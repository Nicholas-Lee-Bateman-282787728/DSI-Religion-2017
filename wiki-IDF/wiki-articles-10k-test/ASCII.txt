   American Standard Code for Information Interchange (ASCII),  ASK-ee,http://www.m-w.com/cgi-bin/audio.pl?ascii001.wav=ASCII|audio is a character encoding based on the English alphabet. ASCII codes represent text in computers, communications equipment, and other devices that work with text. Most modern character encodings — which support many more characters than did the original — have a historical basis in ASCII. Work on ASCII began in 1960. The first edition of the standard was published in 1963,Brandel, Mary. 1963: The Debut of ASCII: History of the origin of the ASCII standard. a major revision in 1967, and the most recent update in 1986. It currently defines codes for 128 characters: 33 are non-printing, mostly obsolete control characters that affect how text is processed, and 94 are printable characters (excluding the space). On March 11, 1968, U.S. President Lyndon B. Johnson mandated that all computers purchased by the United States federal government support ASCII, stating: I have also approved recommendations of the Secretary of Commerce regarding standards for recording the Standard Code for Information Interchange on magnetic tapes and paper tapes when they are used in computer operations. All computers and related equipment configurations brought into the Federal Government inventory on and after July 1, 1969, must have the capability to use the Standard Code for Information Interchange and the formats prescribed by the magnetic tape and paper tape standards when these media are used. Like other character encodings, ASCII specifies a correspondence between digital bit patterns and character symbols (i.e. graphemes and control characters). This allows digital devices to communicate with each other and to process, store, and communicate character-oriented information such as written language. The ASCII character encoding International Organization for Standardization (December 1, 1975). "The set of control characters for ISO 646". Internet Assigned Numbers Authority Registry. Alternate U.S. version: [ ]. Accessed August 7, 2005. — or a compatible extension (see below) — is used on nearly all common computers, especially personal computers and workstations. The preferred MIME name for this encoding is "US-ASCII". Internet Assigned Numbers Authority (January 28, 2005). "Character Sets". Accessed August 7, 2005. Except for a few of the ASCII control characters that prescribe some elementary line-oriented formatting, ASCII does not define any mechanism for describing the structure or appearance of text within a document. Other schemes, such as markup languages, address page and document layout and formatting. ASCII is, strictly, a seven-bit code, meaning it uses patterns of seven binary digits (a range of 0 to 127 decimal) to represent each character. When ASCII was introduced, many computers used eight-bit bytes (groups of bits), also called octets, as the native data type. In seven-bit ASCII encoding, the eighth bit was commonly used as a parity bit for error checking on communication lines or for other device-specific functions. Machines that did not use parity checking typically set the eighth bit to 0.  The American National Standards Institute (then called the American Standards Association or ASA, and later the United States of America Standards Institute or USASI) developed ASCII based on earlier teleprinter encoding systems. Circa 1956, Ivan Idelson, at Ferranti in the UK, had proposed the Cluff-Foster-Idelson coding of characters on 7 track paper tape to a British Standards committee. This was one of the influences on ASCII.  ASCII itself first entered commercial use in 1963 as a seven-bit teleprinter code for American Telephone & Telegraph's TWX (Teletype Wide-area eXchange) network. TWX originally used the earlier five-bit Baudot code, which was also used by the competing Telex teleprinter system.  The Bell System had planned to upgrade to a six-bit code derived from the Fieldata project, which contained many punctuation and control characters that the Baudot code did not, but was persuaded instead to join the American Standards Association (part of ANSI) subcommittee that had started to develop ASCII.  Compared with earlier telegraph codes, the proposed Bell code and ASCII both underwent re-ordering for more convenient sorting (especially alphabetization) of lists, and added features for devices other than teleprinters. Bob Bemer introduced features such as the escape sequence.Brandel, Mary. 1963: The Debut of ASCII: History of the origin of the ASCII standard. (See second-to-last paragraph.) His British colleague Hugh McGregor Ross helped to popularize this work — according to Bemer, "so much so that the code that was to become ASCII was first called the Bemer-Ross Code in Europe".Bemer meets Europe, (February, 1961) employed at IBM at that time ASCII was published as ASA X3.4-1963 and then subsequently updated as USASI X3.4-1967, USASI X3.4-1968, ANSI X3.4-1977, and finally, ANSI X3.4-1986. Other international standards bodies have ratified character encodings such as ISO/IEC 646 that are identical or nearly identical to ASCII, with extensions for characters outside the English alphabet and symbols used outside the United States, such as the symbol for the United Kingdom's pound sterling (£). Almost every country needed an adapted version of ASCII since ASCII only suited the needs of the USA and a few other countries. For example, Canada had its own version that supported French. Although these encodings are sometimes referred to as ASCII, true ASCII is strictly defined only by ANSI standard. ASCII has been incorporated into the Unicode character set as the first 128 symbols, so the ASCII characters have the same numeric codes in both sets. This allows UTF-8 to be backward compatible with ASCII, a significant advantage. ASCII reserves the first 32 codes (numbers 0–31 decimal) for control characters: codes originally intended not to carry printable information, but rather to control devices (such as printers) that make use of ASCII, or to provide meta-information about data streams such as those stored on magnetic tape. For example, character 10 represents the "line feed" function (which causes a printer to advance its paper), and character 8 represents "backspace". The original ASCII standard used only short descriptive phrases for each control character. The ambiguity this left was sometimes intentional (where a character would be used slightly differently on a terminal link than on a data stream) and sometimes more accidental (such as what "delete" means). Probably the most influential single device on the interpretation of these characters was the ASR-33 Teletype series, which was a printing terminal with an available paper tape reader/punch option. Paper tape was a very popular medium for long-term program storage up through the 1980s, lower cost and in some ways less fragile than magnetic tape. In particular, the Teletype 33 machine assignments for codes 17 (Control-Q, DC1, also known as XON), 19 (Control-S, DC3, also known as XOFF), and 127 (DELete) became de-facto standards. Because the keytop for the O key also showed a left-arrow symbol (from ASCII-1963, which had this character instead of underscore), a noncompliant use of code 15 (Control-O, Shift In) interpreted as "delete previous character" was also adopted by many early timesharing systems but eventually faded out. The use of Control-S (XOFF, an abbreviation for "transmit off") as a handshaking signal warning a sender to stop transmission because of impending overflow, and Control-Q (XON, "transmit on") to resume sending, persists to this day in many systems as a manual output control technique. On some systems Control-S retains its meaning but Control-Q is replaced by a second Control-S to resume output. Code 127 is officially named "delete" but the Teletype label was "rubout". Since the original standard gave no detailed interpretation for most control codes, interpretations of this code varied. The original Teletype meaning, and the intent of the standard, was to make it an ignored character, the same as NUL (all zeroes). This was specifically useful for paper tape, because punching the all-ones bit pattern on top of an existing mark would obliterate it. Tapes designed to be "hand edited" could even be produced with spaces of extra NULs (blank tape) so that a block of characters could be "rubbed out" and then replacements put into the empty space. As video terminals began to replace printing ones, the value of the "rubout" character was lost. DEC systems, for example, interpreted "Delete" to mean "remove the character before the cursor," and this interpretation also became common in Unix systems. Most other systems used "Backspace" for that meaning and used "Delete" as it was used on paper tape, to mean "remove the character after the cursor". That latter interpretation is the most common today. Many more of the control codes have taken on meanings quite different from their original ones. The "escape" character (code 27), for example, was originally intended to allow sending other control characters as literals instead of invoking their meaning. This is the same meaning of "escape" encountered in URL encodings, C language strings, and other systems where certain characters have a reserved meaning. Over time this meaning has been coopted and has eventually drifted. In modern use, an ESC sent to the terminal usually indicates the start of a command sequence, usually in the form of an ANSI escape code.  An ESC sent from the terminal is most often used as an "out of band" character used to terminate an operation, as in the TECO and vi text editors. The inherent ambiguity of many control characters, combined with their historical usage, has also created problems when transferring "plain text" files between systems. The clearest example of this is the newline problem on various operating systems. On printing terminals there is no question that you terminate a line of text with both "Carriage Return" and "Linefeed". The first returns the printing carriage to the beginning of the line and the second advances to the next line without moving the carriage. However, requiring two characters to mark the end of a line introduced unnecessary complexity and questions as to how to interpret each character when encountered alone. To simplify matters, plain text files on Unix systems use line feeds alone to separate lines.  Similarly, older Macintosh systems, among others, use only carriage returns in plain text files. Various DEC operating systems used both characters to mark the end of a line, perhaps for compatibility with teletypes, and this de facto standard was copied in the CP/M operating system and then in MS-DOS and eventually Microsoft Windows. Transmission of text over the Internet, for protocols as E-mail and the World Wide Web, uses both characters. The DEC operating systems, along with CP/M, tracked file length only in units of disk blocks and used Control-Z (SUB) to mark the end of the actual text in the file (also done for CP/M compatibility in some cases in MS-DOS, though MS-DOS has always recorded exact file-lengths).  Control-C (ETX, End of TeXt) might have made more sense, but was already in wide use as a program abort signal.  UNIX's use of Control-D (EOT, End of Transmission) appears on its face similar, but is used only from the terminal and never stored in a file. While the codes mentioned above have retained some semblance of their original meanings, many of the codes originally intended for stream delimiters or for link control on a terminal have lost all meaning except their relation to a letter. Control-A is almost never used to mean "start of header" except on an ANSI magnetic tape. When connecting a terminal to a system, or asking the system to recognize that a logged-out terminal wants to log in, modern systems are much more likely to want a carriage return or an ESCape than Control-E (ENQuire, meaning "is there anybody out there?"). The abbreviation ASCIIZ or ASCIZ refers to a null-terminated ASCII string (also known as a C string). RFC 2822 refers to NO-WS-CTL, non-whitespace control characters.  These are control characters that do not include carriage return, line feed, and white space characters (see here), i.e.: decimal 1–8, 11–12, 14–31, and 127. Code 32, the "space" character, denotes the space between words, as produced by the space-bar of a keyboard. Codes 33 to 126, known as the printable characters, represent letters, digits, punctuation marks, and a few miscellaneous symbols. Seven-bit ASCII provided seven "national" characters and, if the combined hardware and software permit, can use overstrikes to simulate some additional international characters: in such a scenario a backspace can precede a grave accent (which the American and British standards, but only those standards, also call "opening single quotation mark"), a backtick, or a breath mark (inverted vel). RFC 1345 (published in June 1992) and the IANA registry of character sets (ongoing), both recognize the following case-insensitive aliases for ASCII as suitable for use on the Internet: Of these, only the aliases "US-ASCII" and "ASCII" have achieved widespread use. One often finds them in the optional "charset" parameter in the Content-Type header of some MIME messages, in the equivalent "meta" element of some HTML documents, and in the encoding declaration part of the prolog of some XML documents. As computer technology spread throughout the world, different standards bodies and corporations developed many variations of ASCII in order to facilitate the expression of non-English languages that used Roman-based alphabets. One could class some of these variations as "ASCII extensions", although some misuse that term to cover all variants, including those that do not preserve ASCII's character-map in the 7-bit range. The PETSCII Code used by Commodore International for their 8-bit systems is probably unique among post-1970 codes in being based on ASCII-1963 instead of the far more common ASCII-1967. ISO/IEC 646 (1972), the first attempt to remedy ASCII's English language bias, created compatibility problems, since it remained a 7-bit character-set. It made no additional codes available, so it reassigned some in language-specific variants. Escape codes were defined to indicate which national variant applied to a piece of text, but these were rarely used, so it was often impossible to know what variant to work with and therefore which character a code represented, and text-processing systems could generally cope with only one variant anyway. A German, French, or Swedish, etc., programmer had to get used to  ä aÄiÜ='Ön'; ü or similar, instead of { a[i]='\n'; } Eventually, improved technology brought out-of-band means to represent the information formerly encoded in the eighth bit of each byte, freeing this bit to add another 128 additional character-codes for new assignments. For example, IBM developed 8-bit code pages, such as code page 437, which replaced the control-characters with graphic symbols such as smiley faces, and mapped additional graphic characters to the upper 128 positions. Operating systems such as DOS supported these code-pages, and manufacturers of IBM PCs supported them in hardware.  Digital Equipment Corporation developed the Multinational Character Set (DEC-MCS) for use in the popular VT220 terminal. Eight-bit standards such as ISO/IEC 8859 (derived from the DEC-MCS) and Mac OS Roman developed as true extensions of ASCII, leaving the original character-mapping intact, but adding additional character definitions after the first 128 (i.e., 7-bit) characters. This enabled representation of characters used in a broader range of languages. But these standards continued to suffer from incompatibilities and limitations. Still, ISO-8859-1 (Latin 1), its variant Windows-1252 (often mislabeled as ISO-8859-1), and the original 7-bit ASCII remain the most common character encodings in use today. Unicode and the ISO/IEC 10646 Universal Character Set (UCS) have a much wider array of characters, and their various encoding forms have begun to supplant ISO/IEC 8859 and ASCII rapidly in many environments. While ASCII is limited to 128 characters, Unicode and the UCS support more characters by separating the concepts of unique identification (using natural numbers called code points) and encoding (to 8-, 16- or 32-bit binary formats, called UTF-8, UTF-16 and UTF-32). To permit backward compatibility, the 128 ASCII and 256 ISO-8859-1 (Latin 1) characters are assigned Unicode/UCS code points that are the same as their codes in the earlier standards. Therefore, ASCII can be considered a 7-bit encoding scheme for a very small subset of Unicode/UCS, and, conversely, the UTF-8 encoding forms are binary-compatible with ASCII for code points below 128, meaning every properly encoded ASCII file is also a valid UTF-8 file. The other encoding forms resemble ASCII in how they represent the first 128 characters of Unicode, but use 16 or 32 bits per character, so they require conversion for compatibility. Collation of data is sometimes done in ASCII-code order rather than "standard" alphabetical order. The main deviations are: The slang expression ASCIIbetical is sometimes used for this order.ASCIIbetical. In programming, alphanumeric sorting means to sort by numeric value, without regard of any character set. An alphanumerically sorted array of bytes will appear ASCIIbetically when viewed in an ASCII-compatible character set. A refined version of this order converts uppercase letters to lowercase before comparing ASCII values. (where all ASCII printable characters are identical to ASCII) (where some ASCII printable characters have been replaced)  als:ASCII ast:ASCII kab:ASCII ksh:ASCII sco:ASCII zh-min-nan:ASCII Binary !! Oct !! Dec !! Hex !! Abbr !! PR !! CS!! CEC!! Description 000 0000 000 0 00 NUL ^@ \0 Null character 000 0001 001 1 01 SOH ^A Start of Header 000 0010 002 2 02 STX ^B Start of Text 000 0011 003 3 03 ETX ^C End of Text 000 0100 004 4 04 EOT ^D End of Transmission 000 0101 005 5 05 ENQ ^E Enquiry 000 0110 006 6 06 ACK ^F Acknowledgment 000 0111 007 7 07 BEL ^G \a Bell 000 1000 010 8 08 BS ^H \b Backspace 000 1001 011 9 09 HT ^I \t Horizontal Tab 000 1010 012 10 0A LF ^J \n Line feed 000 1011 013 11 0B VT ^K \v Vertical Tab 000 1100 014 12 0C FF ^L \f Form feed 000 1101 015 13 0D CR ^M \r Carriage return 000 1110 016 14 0E SO ^N Shift Out 000 1111 017 15 0F SI ^O Shift In 001 0000 020 16 10 DLE ^P Data Link Escape 001 0001 021 17 11 DC1 ^Q Device Control 1 (oft. XON) 001 0010 022 18 12 DC2 ^R Device Control 2 001 0011 023 19 13 DC3 ^S Device Control 3 (oft. XOFF) 001 0100 024 20 14 DC4 ^T Device Control 4 001 0101 025 21 15 NAK ^U Negative Acknowledgement 001 0110 026 22 16 SYN ^V Synchronous Idle 001 0111 027 23 17 ETB ^W End of Trans. Block 001 1000 030 24 18 CAN ^X Cancel 001 1001 031 25 19 EM ^Y End of Medium 001 1010 032 26 1A SUB ^Z Substitute 001 1011 033 27 1B ESC ^[ \e Escape 001 1100 034 28 1C FS ^\ File Separator 001 1101 035 29 1D GS ^] Group Separator 001 1110 036 30 1E RS ^^ Record Separator 001 1111 037 31 1F US ^_ Unit Separator 111 1111 177 127 7F DEL ^? Delete Binary !! Oct !! Dec !! Hex !! Glyph 010 0000 040 32 20 SP 010 0001 041 33 21 ! 010 0010 042 34 22 " 010 0011 043 35 23 010 0100 044 36 24 $ 010 0101 045 37 25 % 010 0110 046 38 26 & 010 0111 047 39 27 ' 010 1000 050 40 28 ( 010 1001 051 41 29 ) 010 1010 052 42 2A 010 1011 053 43 2B + 010 1100 054 44 2C , 010 1101 055 45 2D - 010 1110 056 46 2E . 010 1111 057 47 2F / 011 0000 060 48 30 0 011 0001 061 49 31 1 011 0010 062 50 32 2 011 0011 063 51 33 3 011 0100 064 52 34 4 011 0101 065 53 35 5 011 0110 066 54 36 6 011 0111 067 55 37 7 011 1000 070 56 38 8 011 1001 071 57 39 9 011 1010 072 58 3A : 011 1011 073 59 3B 011 1100 074 60 3C 011 1111 077 63 3F ? Binary !! Oct !! Dec !! Hex !! Glyph 100 0000 100 64 40 @ 100 0001 101 65 41 A 100 0010 102 66 42 B 100 0011 103 67 43 C 100 0100 104 68 44 D 100 0101 105 69 45 E 100 0110 106 70 46 F 100 0111 107 71 47 G 100 1000 110 72 48 H 100 1001 111 73 49 I 100 1010 112 74 4A J 100 1011 113 75 4B K 100 1100 114 76 4C L 100 1101 115 77 4D M 100 1110 116 78 4E N 100 1111 117 79 4F O 101 0000 120 80 50 P 101 0001 121 81 51 Q 101 0010 122 82 52 R 101 0011 123 83 53 S 101 0100 124 84 54 T 101 0101 125 85 55 U 101 0110 126 86 56 V 101 0111 127 87 57 W 101 1000 130 88 58 X 101 1001 131 89 59 Y 101 1010 132 90 5A Z 101 1011 133 91 5B [ 101 1100 134 92 5C \ 101 1101 135 93 5D ] 101 1110 136 94 5E ^ 101 1111 137 95 5F _ Binary !! Oct !! Dec !! Hex !! Glyph 110 0000 140 96 60 ` 110 0001 141 97 61 a 110 0010 142 98 62 b 110 0011 143 99 63 c 110 0100 144 100 64 d 110 0101 145 101 65 e 110 0110 146 102 66 f 110 0111 147 103 67 g 110 1000 150 104 68 h 110 1001 151 105 69 i 110 1010 152 106 6A j 110 1011 153 107 6B k 110 1100 154 108 6C l 110 1101 155 109 6D m 110 1110 156 110 6E n 110 1111 157 111 6F o 111 0000 160 112 70 p 111 0001 161 113 71 q 111 0010 162 114 72 r 111 0011 163 115 73 s 111 0100 164 116 74 t 111 0101 165 117 75 u 111 0110 166 118 76 v 111 0111 167 119 77 w 111 1000 170 120 78 x 111 1001 171 121 79 y 111 1010 172 122 7A z 111 1011 173 123 7B &#123; 111 1100 174 124 7C &#124; 111 1101 175 125 7D &#125; 111 1110 176 126 7E ~  Printable Representation, the Unicode characters from the area U+2400 to U+2421 reserved for representing control characters when it is necessary to print or display them rather than have them perform their intended function. Some browsers may not display these properly.  Control key Sequence/caret notation, the traditional key sequences for inputting control characters.  The caret (^) represents the "Control" or "Ctrl" key that must be held down while pressing the second key in the sequence.  The caret-key representation is also used by some software to represent control characters.  Character Escape Codes in C programming language and many other languages influenced by it, such as Java and Perl.  The Backspace character can also be entered by pressing the "Backspace", "Bksp", or ← key on some systems.  The Delete character can also be entered by pressing the "Delete" or "Del" key.  It can also be entered by pressing the "Backspace", "Bksp", or ← key on some systems.  The '\e' escape sequence is not part of ISO C and many other language specifications. However, it is understood by several compilers.  The Escape character can also be entered by pressing the "Escape" or "Esc" key on some systems.  The Carriage Return character can also be entered by pressing the "Return", "Ret", "Enter", or  key on most systems. [i] The ambiguity surrounding Backspace comes from mismatches between the intent of the human or software transmitting the Backspace and the interpretation by the software receiving it.  If the transmitter expects Backspace to erase the previous character and the receiver expects Delete to be used to erase the previous character, many receivers will echo the Backspace as "^H", just as they would echo any other uninterpreted control character.  (A similar mismatch in the other direction may yield Delete displayed as "^?".) The digits 0–9 are represented with their values in binary prefixed with 0011 (this means that converting BCD to ASCII is simply a matter of taking each BCD nibble separately and prefixing 0011 to it). Lowercase and uppercase letters only differ in bit pattern by a single bit, simplifying case conversion to a range test (to avoid converting characters that are not letters) and a single bitwise operation. Fast case conversion is important because it is often used in case-ignoring search algorithms. In contrast with EBCDIC, the lowercase and uppercase letters each occupy 26 consecutive positions. ANSI_X3.4-1968 (canonical name) ANSI_X3.4-1986 ASCII (with ASCII-7 and ASCII-8 variants) US-ASCII (preferred MIME name) us ISO646-US ISO_646.irv:1991 iso-ir-6 IBM367 cp367 csASCII capitals come before lowercase letters, i.e. "Z" before "a" characters in extended character sets such as "é" come after "z" "ASCIIbetical" is sometimes used to refer to the collation order in ASCII (see above). "ASCIIfy" or "asciify" (and derivative terms) is sometimes used to refer to the process of changing something into, or rendering something in, ASCII characters.Stammtisch Beau Fleuve glossary : ASCII (includes mention of asciify) Asteroid 3568 ASCII is named after the character encoding. American National Standards Institute (ANSI) ASCII art ASCII Ribbon Campaign Binary Bob Bemer Control character Latin characters in Unicode List of binary codes Text file Text games Unicode Extended ASCII Indian Script Code for Information Interchange (ISCII) ISO/IEC 8859 multi-part standard ISO/IEC 8859-1 the Western European languages part Mac OS Roman UTF-8 Vietnamese Standard Code for Information Interchange (VISCII) Windows code pages ATASCII – Atari Standard Code for Information Interchange Galaksija character set – character set of Galaksija kit computer ISO/IEC 646 PETSCII – PET Standard Code of Information Interchange, also known as CBM ASCII YUSCII – Yugoslav Standard Code for Information Interchange ZX Spectrum character set A history of ASCII, its roots and predecessors by Tom Jennings,  October 29 2004 (accessed December 17 2005) A pronunciation guide for ASCII characters Printable ASCII table, also includes printable Code Page 850 table ANSI INCITS 4-1986 (R2002) Information Systems – Coded Character Sets – 7-Bit American National Standard Code for Information Interchange (7-Bit ASCII) ASCII to 8-bit binary converter and source code ASCII to ASCII CODE converter and source code ASCII Chart, how to send documents "in ASCII", etc Convert PDF, PostScript, WMF and EMF to ASCII Interactive AJAX-style ASCII (and Unicode) Decoder Table Online Encoder/Decoder for ASCII, HEX, Binary, Base64, etc with MD2, MD4, MD5, SHA1+2, CRC, and other hashing algorithms The ASCII subset of Unicode Thoughts on the Past and Future with computer pioneer Bob Bemer  :LINKNUM:288
