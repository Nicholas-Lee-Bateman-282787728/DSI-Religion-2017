  Computer science (or computing science) is the study of the theoretical foundations of information and computation and their implementation and application in computer systems."Computer science is the study of information" Department of Computer and Information Science, Guttenberg Information Technologies"Computer science is the study of computation." Computer Science Department, College of Saint Benedict, Saint John's University"Computer Science is the study of all aspects of computer systems, from the theoretical foundations to the very practical aspects of managing large software projects." Massey University Computer science has many sub-fields; some emphasize the computation of specific results (such as computer graphics), while others relate to properties of computational problems (such as computational complexity theory). Still others focus on the challenges in implementing computations. For example, programming language theory studies approaches to describing computations, while computer programming applies specific programming languages to solve specific computational problems. A further subfield, human-computer interaction, focuses on the challenges in making computers and computations useful, usable and universally accessible to people. The early foundations of what would become computer science predate the invention of the modern digital computer. Machines for calculating fixed numerical tasks, such as the abacus, have existed since antiquity. Wilhelm Schickard built the first mechanical calculator  in 1623. Charles Babbage designed a difference engine in Victorian times (between 1837 and 1901) helped by Ada Lovelace. Around 1900, the IBM corporation sold punch-card machines. However, all of these machines were constrained to perform a single task, or at best some subset of all possible tasks. During the 1940s, as newer and more powerful computing machines were developed, the term computer came to refer to the machines rather than their human predecessors. As it became clear that computers could be used for more than just mathematical calculations, the field of computer science broadened to study computation in general. Computer science began to be established as a distinct academic discipline in the 1960s, with the creation of the first computer science departments and degree programs.  Since practical computers became available, many applications of computing have become distinct areas of study in their own right. Many initially believed it impossible that "computers themselves could actually be a scientific field of study" (Levy 1984, p. 11), though it was in the "late fifties" (Levy 1984, p.11) that it gradually became accepted among the greater academic population. It is the now well-known IBM brand that formed part of the computer science revolution during this time. IBM (short for International Business Machines) released the IBM 704 and later the IBM 709 computers, which were widely used during the exploration period of such devices. "Still, working with the IBM [computer] was frustrating...if you had misplaced as much as one letter in one instruction, the program would crash, and you would have to start the whole process over again" (Levy 1984, p.13). During the late 1950s, the computer science discipline was very much in its developmental stages, and such issues were commonplace. Time has seen significant improvements in the usability and effectiveness of computer science technology. Modern society has seen a significant shift from computers being used solely by experts or professionals to more a more widespread user base. By the 1990s, computers became accepted as being the norm within everyday life. During this time data entry was a primary component of the use of computers, many preferring to streamline their business practices through the use of a computer. This also gave the additional benefit of removing the need of large amounts of documentation and file records which consumed much-needed physical space within offices. Despite its relatively short history as a formal academic discipline, computer science has made a number of fundamental contributions to science and society. These include: Computer science is frequently derided by the sentence "Any field which has to have 'science' in its name isn't one."  This was placed in print by physicist Richard Feynman in his Lectures on Computation (1996). Despite its name, a significant amount of computer science does not involve the study of computers themselves. Because of this, several alternative names have been proposed. Danish scientist Peter Naur suggested the term datalogy, to reflect the fact that the scientific discipline revolves around data and data treatment, while not necessarily involving computers. The first scientific institution to use the term was the Department of Datalogy at the University of Copenhagen, founded in 1969, with Peter Naur being the first professor in datalogy. The term is used mainly in the Scandinavian countries. Also, in the early days of computing, a number of terms for the practitioners of the field of computing were suggested in the Communications of the ACM—turingineer, turologist, flow-charts-man, applied meta-mathematician, and applied epistemologist.Communications of the ACM 1(4):p.6  Three months later in the same journal, comptologist was suggested, followed next year by hypologist.Communications of the ACM 2(1):p.4  Recently the term computics has been suggested.IEEE Computer 28(12):p.136 Infomatik was a term used in Europe with more frequency. The renowned computer scientist Edsger Dijkstra stated, "Computer science is no more about computers than astronomy is about telescopes." The design and deployment of computers and computer systems is generally considered the province of disciplines other than computer science. For example, the study of computer hardware is usually considered part of computer engineering, while the study of commercial computer systems and their deployment is often called information technology or information systems. Computer science is sometimes criticized as being insufficiently scientific, a view espoused in the statement "Science is to computer science as hydrodynamics is to plumbing", credited to Stan Kelly-BootleComputer Language, October 1990 and others. However, there has been much cross-fertilization of ideas between the various computer-related disciplines. Computer science research has also often crossed into other disciplines, such as artificial intelligence, cognitive science, physics (see quantum computing), and linguistics. Computer science is considered by some to have a much closer relationship with mathematics than many scientific disciplines. Early computer science was strongly influenced by the work of mathematicians such as Kurt Gödel and Alan Turing, and there continues to be a useful interchange of ideas between the two fields in areas such as mathematical logic, category theory, domain theory, and algebra. The relationship between computer science and software engineering is a contentious issue, which is further muddied by disputes over what the term "software engineering" means, and how computer science is defined. David Parnas, taking a cue from the relationship between other engineering and science disciplines, has claimed that the principal focus of computer science is studying the properties of computation in general, while the principal focus of software engineering is the design of specific computations to achieve practical goals, making the two separate but complementary disciplines., p. 19: "Rather than treat software engineering as a subfield of computer science, I treat it as an element of the set, {Civil Engineering, Mechanical Engineering, Chemical Engineering, Electrical Engineering, ....}." The academic political and funding aspects of computer science tend to have roots as to whether a department in the U.S. formed with either a mathematical emphasis or an engineering emphasis.  In general, electrical engineering-based computer science departments have tended to succeed as computer science and/or engineering departments. Computer science departments with a mathematics emphasis and with a numerical orientation consider alignment computational science.  Both types of departments tend to make efforts to bridge the field educationally if not across all research. Computer science searches for concepts and formal proofs to explain and describe computational systems of interest. As with all sciences, these theories can then be utilised to synthesize practical engineering applications, which in turn may suggest new systems to be studied and analysed. While the ACM Computing Classification System can be used to split computer science up into different topics of fields, a more descriptive breakdown follows: The subfield didactics of computer science focuses on cognitive approaches of developing competencies of computer science and specific strategies for analysis, design, implementation and evaluation of excellent lessons in computer science. Some universities teach computer science as a theoretical study of computation and algorithmic reasoning.  These programs often feature the theory of computation, analysis of algorithms, formal methods, concurrency theory, databases, computer graphics and systems analysis, among others.  They typically also teach computer programming, but treat it as a vessel for the support of other fields of computer science rather than a central focus of high-level study. Other colleges and universities, as well as secondary schools and vocational programs that teach computer science, emphasize the practice of advanced computer programming rather than the theory of algorithms and computation in their computer science curricula.  Such curricula tend to focus on those skills that are important to workers entering the software industry. The practical aspects of computer programming are often referred to as software engineering. However, there is a lot of disagreement over what the term "software engineering" actually means, and whether it is the same thing as programming. See Peter J. Denning, Great principles in computing curricula, Technical Symposium on Computer Science Education, 2004. Main list: List of basic computer science topics   ast:Informática zh-min-nan:Tiān-náu kho-ha̍k fur:Informatiche csb:Infòrmatika lad:Informatika jbo:samske nds-nl:Komputerkunde scn:Nfurmàtica simple:Computer science zh-yue:電算 bat-smg:Infuormatėka wuu:计算机科学 Boolean logic and other ways of modeling logical queries; the uses and limitations of formal proof methods. Theory of proofs and heuristics for finding proofs in the simple domain of integers.  Used in cryptography as well as a test domain in artificial intelligence. Foundations for data structures and searching algorithms. Formal analysis of the types of data, and the use of these types to understand properties of programs, especially program safety. Category theory provides a means of capturing all of math and computation in a single synthesis. The study of algorithms to solve problems stated in terms of geometry. Foundations for algorithms in discrete mathematics, as well as the study of the limitations of floating point computation, including round-off errors. Different logical structures for solving problems. What is calculable with the current models of computers. Proofs developed by Alan Turing and others provide insight into the possibilities of what can be computed and what cannot. Fundamental bounds (especially time and storage space) on classes of computations. Representation and manipulation of data using the quantum properties of particles and quantum mechanism. Time and space complexity of algorithms. Formal logical processes used for computation, and the efficiency of these processes. The organization of and rules for the manipulation of data. Ways of translating   computer programs, usually from higher level languages to lower level ones. A program that takes in as input a computer program and executes it. Formal language paradigms for expressing algorithms, and the properties of these languages (e.g., what problems they are suited to solve). The theory and practice of simultaneous computation; data safety in any multitasking or multithreaded environment. Computing using multiple computing devices over a network to accomplish a common objective or task and thereby reducing the latency involved in single processor contributions for any task. Computing using multiple concurrent threads of execution. Using ideas from algorithm theory to creatively design solutions to real tasks The practice of using a programming language to implement algorithms Mathematical approaches for describing and reasoning about software designs. The application of the scientific method to the understanding of arbitrary existing software The principles and practice of designing, developing, and testing programs, as well as proper engineering practices. The design, organization, optimization and verification of a computer system, mostly about CPUs and memory subsystems (and the bus connecting them). The implementation of computer architectures, in terms of descriptions of their specific electrical circuitry Systems for managing computer programs and providing the basis of a useable system. Algorithms and data structures for the creation, manipulation, storage, and transmission of digital audio recordings. Also important in voice recognition applications. Algorithms and protocols for reliably communicating data across different shared or dedicated media, often including error correction. Applies results from complexity, probability and number theory to invent and break codes. Data mining is the extracting of the relevant data from all the sources of data Study of algorithms for searching and processing information in documents and databases; closely related to information retrieval. The implementation and study of systems that exhibit an autonomous intelligence or behaviour of their own. The study of digital organisms to learn about biological systems and evolution. Solving engines, such as used in Prolog, which produce steps to a result given a query on a fact and rule database. Algorithms for identifying three dimensional objects from one or more two dimensional pictures. Automated creation of a set of rules and axioms based on input. Automated understanding and generation of human language Algorithms for controlling the behavior of robots. Algorithms both for generating visual images synthetically, and for integrating or altering visual and spatial information sampled from the real world. Determining information from an image through computation. The study of making computers and computations useful, usable and universally accessible to people, including the study and design of computer interfaces through which people use computers. The use of computer science to maintain, analyse, and store biological data, and to assist in solving biological problems such as protein folding, function prediction and phylogeny. Computational modelling of real minds Computational modelling of theoretical chemistry in order to determine chemical structures and properties Computational modelling of real brains Numerical simulations of large non-analytic systems Algorithms for the numerical solution of mathematical problems such as root-finding, integration, the solution of ordinary differential equations and the approximation/evaluation of special functions. Manipulation and solution of expressions in symbolic form, also known as Computer algebra. A formal definition of computation and computability, and proof that there are computationally unsolvable and intractable problems. The concept of a programming language, a tool for the precise expression of methodological information at various levels of abstraction. Sparked the Digital Revolution which led to the current Information Age and the Internet.http://www.cis.cornell.edu/Dean/Presentations/Slides/bgu.pdf In cryptography, breaking the Enigma machine was an important factor contributing to the Allied victory in World War II.David Kahn, The Codebreakers, 1967, ISBN 0-684-83130-9. Scientific computing enabled advanced study of the mind and mapping the human genome was possible with Human Genome Project. Distributed computing projects like Folding@home explore protein folding. Algorithmic trading has increased the efficiency and liquidity of financial markets by using artificial intelligence, machine learning and other statistical/numerical techniques on a large scale.Black box traders are on the march The Telegraph, August 26, 2006 Career domains in computer science English in computer science Women in computer science Computing Informatics List of academic computer science departments List of computer science conferences List of open problems in computer science List of prominent pioneers in computer science List of publications in computer science List of software engineering topics List of computer scientists Association for Computing Machinery. 1998 ACM Computing Classification System. 1998. IEEE Computer Society and the Association for Computing Machinery. Computing Curricula 2001: Computer Science. December 15, 2001. Peter J. Denning. Is computer science science?, Communications of the ACM, April 2005. Donald E. Knuth. Selected Papers on Computer Science, CSLI Publications, Cambridge Univ. Press, 1996. Computer Science Directory - search engine and directory dedicated to computer science. Directory of free university lectures in Computer Science Collection of Computer Science Bibliographies Photographs of computer scientists (Bertrand Meyer's gallery) UCLA Computer Science 1 Freshman Computer Science Seminar Section 1 Berkeley Introduction to Computers  :LINKNUM:198
