ggplot(data = panss.data, aes(x = P1)) +
geom_histogram(data = subset(panss.data, cond==TRUE), binwidth = 0.9, fill = "blue") +
geom_histogram(data = subset(panss.data, cond==FALSE), binwidth = 0.9, fill = "red") +
labs(title = "Histogram for P1", x = "Difference from Expert", y = "Count")
ggplot(data = panss.data, aes(x = P1)) +
geom_histogram(data = subset(panss.data, cond==TRUE), binwidth = 0.5, fill = "blue") +
geom_histogram(data = subset(panss.data, cond==FALSE), binwidth = 0.5, fill = "red") +
labs(title = "Histogram for P1", x = "Difference from Expert", y = "Count")
ggplot(data = panss.data, aes(x = P1)) +
geom_histogram(data = subset(panss.data, cond==TRUE), binwidth = 0.7, fill = "blue") +
geom_histogram(data = subset(panss.data, cond==FALSE), binwidth = 0.7, fill = "red") +
labs(title = "Histogram for P1", x = "Difference from Expert", y = "Count")
boxplot(panss.data[,-c(1,2)])
plot(apply(panss.data[,-c(1,2)],1,mean) ~ panss.data$LANG)
summary(panss.data[,-1])
summary(panss.data$LANG)
plot(apply(panss.data[,-c(1,2)],1,mean) ~ panss.data$LANG)
cor.test(panss.data$P1, panss.data$P2, method="s")
table(rep(names(panss.data)[-c(1,2)], nrow(panss.data)),as.vector(t(as.matrix(panss.data[,-c(1,2)]))))
score.participants <- function(a, np = 5, nn= 5, ng = 10) {
#	Criteria to "pass" the training:
#	-- rate np of P symptoms within 1 point of the expert
#	-- rate nn of N symptoms within 1 point of the expert
#	-- rate ng of G symptoms within 1 point of the expert
#	Default values are np = 5, nn = 5, and ng = 10
b <- matrix(data = 0, nrow = nrow(a), ncol = 4)
r1 <- 3:9		# Positive symptoms
r2 <- 10:16		# Negative symptoms
r3 <- 17:32		# Generic symptoms
for (iROW in 1:nrow(a)) {
b[iROW, 1] <- sum(abs(a[iROW, r1]) <= 1)
b[iROW, 2] <- sum(abs(a[iROW, r2]) <= 1)
b[iROW, 3] <- sum(abs(a[iROW, r3]) <= 1)
b[iROW, 4] <- 1
if (b[iROW, 1] < np) {
b[iROW, 4] <- 0
}
if (b[iROW, 2] < nn) {
b[iROW, 4] <- 0
}
if (b[iROW, 3] < ng) {
b[iROW, 4] <- 0
}
}
return(b)
}
panss.scores <- score.participants(panss.data)
table(panss.data$LANG, panss.scores[,4])
View(panss.scores)
x <- as.data.frame(table(panss.data$LANG, panss.scores[,4]))
View(x)
View(panss.data)
table(panss.data$LANG, panss.scores[,4])
# Samantha Garofalo and Nathan Fogal
# Case Study 6.4 - Reverse Psychlogy
#############################################################################
# An analysis of the PANSS data
# Step 1: Set the working directory to where your datasets are (the directory path)
dataDirectory <- "~/Documents/Data Science/Statistical Consulting/Case Study 4"
setwd(dataDirectory)
###############################
# Step 2: Read in the data
# Note: The expert's ratings are listed in the first row (ID = 0)
# (a) If the data is all in one file, with a .txt extension:
fileName <- "STAT+7995+CS6p4+Data.txt"
panss.raw <- read.table(file = fileName, header = TRUE)
# (b) If the data is in separate .csv files:
fileName1 <- "STAT+7995+CS6p4+Data+A.csv"
file1 <- read.csv(file = fileName1, header = TRUE) # read in first data file
fileName2 <- "STAT+7995+CS6p4+Data+B.csv"
file2 <- read.csv(file = fileName2, header = TRUE) # read in second data file
file2 <- file2[-1,] # remove the first row, which contains a repeat of the expert (ID = 0)
panss.raw <- rbind(file1, file2) # add the rows of the separate dataframes together
# Verify that there are 73 obs. of 32 variables
dim(panss.raw)
# Output should be: [1] 73 32
###############################
# Step 3: Calibrate the participants' data to be a difference from the expert's ratings
#         using a simple iterative loop
# First need to copy only the participants' data to a separate dataframe (remove expert)
panss.data <- panss.raw[-1,]
# Then run the data through the loop
for (iROW in 1:nrow(panss.data)) {
panss.data[iROW,-c(1,2)] <- panss.raw[iROW + 1,-c(1,2)] - panss.raw[1,-c(1,2)]
}
###############################
# Step 4: Create a function that scores participants
score.participants <- function(a, np = 5, nn= 5, ng = 10) {
#	Criteria to "pass" the training:
#	-- rate np of P symptoms within 1 point of the expert
#	-- rate nn of N symptoms within 1 point of the expert
#	-- rate ng of G symptoms within 1 point of the expert
#	Default values are np = 5, nn = 5, and ng = 10
b <- matrix(data = 0, nrow = nrow(a), ncol = 4)
r1 <- 3:9		# Positive symptoms
r2 <- 10:16		# Negative symptoms
r3 <- 17:32		# Generic symptoms
for (iROW in 1:nrow(a)) {
b[iROW, 1] <- sum(abs(a[iROW, r1]) <= 1)
b[iROW, 2] <- sum(abs(a[iROW, r2]) <= 1)
b[iROW, 3] <- sum(abs(a[iROW, r3]) <= 1)
b[iROW, 4] <- 1
if (b[iROW, 1] < np) {
b[iROW, 4] <- 0
}
if (b[iROW, 2] < nn) {
b[iROW, 4] <- 0
}
if (b[iROW, 3] < ng) {
b[iROW, 4] <- 0
}
}
return(b)
}
# Score participants
panss.scores <- score.participants(panss.data)
table(panss.data$LANG, panss.scores[,4])
fisher.test(panss.data$LANG, panss.scores[,4])
panss.scores <- score.participants(panss.data)
table(panss.data$LANG, panss.scores[,4])
summary(panss.scores)
View(panss.scores)
colnames(panss.scores) <- c("Positive_Score", "Negative_Score", "General_Score", "Pass?")
colnames(panss.scores) <- c("Positive_Score", "Negative_Score", "General_Score", "Pass?")
colnames(panss.scores) <- c("Positive_Score", "Negative_Score", "General_Score", "Pass?")
summary(panss.scores)
colnames(panss.scores) <- c("Positive_Score", "Negative_Score", "General_Score", "Pass")
colnames(panss.scores)
View(panss.scores)
colnames(panss.scores) <- c("Positive_Score", "Negative_Score", "General_Score", "Pass?")
summary(panss.scores)
colnames(panss.scores) <- c("Positive_Score", "Negative_Score", "General_Score", "Pass")
summary(panss.scores)
table(rep(names(panss.scores), nrow(panss.scores)), as.vector(t(as.matrix(panss.scores))))
table(rep(names(panss.data)[-c(1,2)], nrow(panss.data)),as.vector(t(as.matrix(panss.data[,-c(1,2)]))))
table(panss.data, panss.scores[,4])
table(sort(panss.data), panss.scores[,4])
panss.scores
table(panss.scores)
table(panss.scores$Pass)
table(panss.scores[,4])
table(panss.data$LANG, panss.scores[,4])
summary(panss.scores)
summary(panss.scores[panss.LANG == "E",])
summary(panss.scores[panss.data$LANG == "E",])
summary(panss.scores[panss.data$LANG == "E",])
summary(panss.scores[panss.data$LANG == "I",])
summary(panss.scores[panss.data$LANG == "F",])
# Step 5: Perform some numerical summaries on the score data
# First need to rename the columns
colnames(panss.scores) <- c("Positive_Score", "Negative_Score", "General_Score", "Pass")
# Create a table that shows the frequencies of the number of participants that passed or failed
table(panss.scores[,4])
# Create a table that shows the frequencies of the languages and whether they passed or failed
table(panss.data$LANG, panss.scores[,4])
# List the summary statistics of each variable
summary(panss.scores)
# List the summary statistics for each variable by language
summary(panss.scores[panss.data$LANG == "E",])
summary(panss.scores[panss.data$LANG == "I",])
summary(panss.scores[panss.data$LANG == "F",])
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
cond <- panss.data$P1 == 0
ggplot(data = panss.data, aes(x = P1)) +
geom_histogram(data = subset(panss.data, cond==TRUE), binwidth = 0.5, fill = "blue") +
geom_histogram(data = subset(panss.data, cond==FALSE), binwidth = 0.5, fill = "red") +
labs(title = "Histogram for P1", x = "Difference from Expert", y = "Count")
ggplot(data = panss.scores, aed(x = Pass))
ggplot(data = panss.scores, aes(x = Pass))
ggplot(data = panss.scores, aes(x = panss.scores$Pass)) + geom_histogram(stat = "count")
is.matrix(panss.score$Pass)
is.matrix(panss.scores$Pass)
panss.scores <- as.data.frame(panss.scores)
ggplot(data = panss.scores, aes(x = panss.scores$Pass)) + geom_histogram(stat = "count")
ggplot(data = panss.scores, aes(x = panss.scores$Pass, fill = panss.scores$Pass)) + geom_histogram(stat = "count")
ggplot(data = panss.data, aes(x = panss.data$LANG)) + geom_histogram(stat = "count")
panss.scores$Pass <- ifelse(panss.scores$Pass == 1, "Pass", "Fail")
panss.scores$Pass <- ifelse(panss.scores$Pass == 1, "Pass", "Fail")
table(panss.scores[,4])
panss.scores <- score.participants(panss.data)
is.numeric(panss.scores$Pass)
class(panss.scores[,4])
panss.scores <- as.data.frame(panss.scores)
colnames(panss.scores) <- c("Positive_Score", "Negative_Score", "General_Score", "Pass")
panss.scores$Pass <- ifelse(panss.scores$Pass == 1, "Pass", "Fail")
table(panss.scores[,4])
table(panss.data$LANG, panss.scores[,4])
summary(panss.scores)
summary(panss.scores[panss.data$LANG == "E",])
summary(panss.scores[panss.data$LANG == "I",])
summary(panss.scores[panss.data$LANG == "F",])
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
cond <- panss.data$P1 == 0
ggplot(data = panss.data, aes(x = P1)) +
geom_histogram(data = subset(panss.data, cond==TRUE), binwidth = 0.5, fill = "blue") +
geom_histogram(data = subset(panss.data, cond==FALSE), binwidth = 0.5, fill = "red") +
labs(title = "Histogram for P1", x = "Difference from Expert", y = "Count")
ggplot(data = panss.scores, aes(x = panss.scores$Pass)) + geom_histogram(stat = "count")
ggplot(data = panss.data, aes(x = panss.data$LANG)) + geom_histogram(stat = "count")
boxplot(panss.data[,-c(1,2)])
plot(apply(panss.data[,-c(1,2)],1,mean) ~ panss.data$LANG)
###############################
# Step 6: Perform some graphical summaries
# Import ggplot library
install.packages("ggplot2")
library(ggplot2)
# Create a condition where you compare the expert to the participants' scores
cond <- panss.data$P1 == 0
# Look at histogram of calibrated P1 data
# Can change out which variable we are looking at by replacing x = P1 below
ggplot(data = panss.data, aes(x = P1)) +
geom_histogram(data = subset(panss.data, cond==TRUE), binwidth = 0.5, fill = "blue") +
geom_histogram(data = subset(panss.data, cond==FALSE), binwidth = 0.5, fill = "red") +
labs(title = "Histogram for P1", x = "Difference from Expert", y = "Count")
# Frequency plots of different types of languages
ggplot(data = panss.data, aes(x = panss.data$LANG)) + geom_histogram(stat = "count")
# Frequency plots of score data
ggplot(data = panss.scores, aes(x = panss.scores$Pass)) + geom_histogram(stat = "count")
# Boxplots of all calibrated ratings
boxplot(panss.data[,-c(1,2)])
# Boxplots of the mean of the calibrated ratings across the different languages
plot(apply(panss.data[,-c(1,2)],1,mean) ~ panss.data$LANG)
install.packages("ggplot2")
# Create a condition where you compare the expert to the participants' scores
cond <- panss.data$P1 == 0
# Look at histogram of calibrated P1 data
# Can change out which variable we are looking at by replacing x = P1 below
ggplot(data = panss.data, aes(x = P1)) +
geom_histogram(data = subset(panss.data, cond==TRUE), binwidth = 0.5, fill = "blue") +
geom_histogram(data = subset(panss.data, cond==FALSE), binwidth = 0.5, fill = "red") +
labs(title = "Histogram for P1", x = "Difference from Expert", y = "Count")
# Frequency plots of different types of languages
ggplot(data = panss.data, aes(x = panss.data$LANG)) + geom_histogram(stat = "count")
# Frequency plots of score data
ggplot(data = panss.scores, aes(x = panss.scores$Pass)) + geom_histogram(stat = "count")
# Boxplots of all calibrated ratings
boxplot(panss.data[,-c(1,2)])
# Boxplots of the mean of the calibrated ratings across the different languages
plot(apply(panss.data[,-c(1,2)],1,mean) ~ panss.data$LANG)
# Test for homogeneity across languages
# Does language have a significant effect on the performance of the physician?
fisher.test(panss.data$LANG, panss.scores[,4])
# Calculate the Spearman correlation between P1 and P2.
# Overall and for English-language only
cor.test(panss.data$P1, panss.data$P2, method="s")
cor.test(panss.data$P1[panss.data$LANG == "E"], panss.data$P2[panss.data$LANG == "E"],
method="s")
table(panss.scores[,4])
table(panss.data$LANG, panss.scores[,4])
summary(panss.scores)
summary(panss.scores[panss.data$LANG == "E",])
summary(panss.scores[panss.data$LANG == "I",])
summary(panss.scores[panss.data$LANG == "F",])
fisher.test(panss.data$LANG, panss.scores[,4])
setwd("~/Downloads")
pdf("WBC_Graphs.pdf")
library(readxl)
WBC <- read_excel("~/Downloads/Interns Scoring.xlsx", sheet = "WBC")
WBC <- WBC[,1:5]
WBC <- WBC[!is.na(WBC$Score),]
WBC <- WBC[!is.na(WBC$Date),]
WBC$Date <- as.Date(WBC$Date , format = "%m/%d/%y")
setwd("~/Documents/Data Science/Capstone/DSI-Religion-2017/modelOutputSingleDocs/307 Signals")
signals <- read.csv("SingleDocSignals.csv")
signals$Filename <- paste(signals$groupId, ".txt", sep = "")
df <- rbind(WBC, DorothyDay, ISIS, JohnPiper, MehrBaba, SeaShepherds, Unitarian)
setwd("~/Downloads")
library(readxl)
# First, download Interns Scoring Doc in xlsx format
WBC <- read_excel("~/Downloads/Interns Scoring.xlsx", sheet = "WBC")
# Bahai <- read_excel("~/Downloads/Interns Scoring.xlsx", sheet = "Bahai")
DorothyDay <- read_excel("~/Downloads/Interns Scoring.xlsx", sheet = "DorothyDay")
ISIS <- read_excel("~/Downloads/Interns Scoring.xlsx", sheet = "ISIS")
JohnPiper <- read_excel("~/Downloads/Interns Scoring.xlsx", sheet = "JohnPiper")
MehrBaba <- read_excel("~/Downloads/Interns Scoring.xlsx", sheet = "MehrBaba")
SeaShepherds <- read_excel("~/Downloads/Interns Scoring.xlsx", sheet = "SeaShepherds")
Unitarian <- read_excel("~/Downloads/Interns Scoring.xlsx", sheet = "Unitarian")
WBC <- WBC[,1:5]
# Bahai <- Bahai[,1:5]
DorothyDay <- DorothyDay[,1:5]
ISIS <- ISIS[,1:5]
JohnPiper <- JohnPiper[,1:5]
MehrBaba <- MehrBaba[,1:5]
SeaShepherds <- SeaShepherds[,1:5]
Unitarian <- Unitarian[,1:5]
WBC <- WBC[!is.na(WBC$Score),]
# Bahai <- Bahai[!is.na(Bahai$Score),]
DorothyDay <- DorothyDay[!is.na(DorothyDay$Score),]
ISIS <- ISIS[!is.na(ISIS$Score),]
JohnPiper <- JohnPiper[!is.na(JohnPiper$Score),]
MehrBaba <- MehrBaba[!is.na(MehrBaba$Score),]
SeaShepherds <- SeaShepherds[!is.na(SeaShepherds$Score),]
Unitarian <- Unitarian[!is.na(Unitarian$Score),]
WBC <- WBC[!is.na(WBC$Date),]
# Bahai <- Bahai[!is.na(Bahai$Date),]
DorothyDay <- DorothyDay[!is.na(DorothyDay$Date),]
ISIS <- ISIS[!is.na(ISIS$Date),]
JohnPiper <- JohnPiper[!is.na(JohnPiper$Date),]
MehrBaba <- MehrBaba[!is.na(MehrBaba$Date),]
SeaShepherds <- SeaShepherds[!is.na(SeaShepherds$Date),]
Unitarian <- Unitarian[!is.na(Unitarian$Date),]
WBC$Date <- as.Date(WBC$Date , format = "%m/%d/%y")
# Bahai$Date <- as.Date(Bahai$Date , format = "%m/%d/%y")
DorothyDay$Date <- as.Date(DorothyDay$Date , format = "%m/%d/%y")
ISIS$Date <- as.Date(ISIS$Date , format = "%m/%d/%y")
JohnPiper$Date <- as.Date(JohnPiper$Date , format = "%m/%d/%y")
MehrBaba$Date <- as.Date(MehrBaba$Date , format = "%m/%d/%y")
SeaShepherds$Date <- as.Date(SeaShepherds$Date , format = "%m/%d/%y")
Unitarian$Date <- as.Date(Unitarian$Date , format = "%m/%d/%y")
# Signals
setwd("~/Documents/Data Science/Capstone/DSI-Religion-2017/modelOutputSingleDocs/307 Signals")
# Import the signals dataframe
signals <- read.csv("SingleDocSignals.csv")
signals$Filename <- paste(signals$groupId, ".txt", sep = "")
# Rename the column (got deleted for some reason)
colnames(MehrBaba)[1] <- "Group"
df <- rbind(WBC, DorothyDay, ISIS, JohnPiper, MehrBaba, SeaShepherds, Unitarian)
# Merge the 2 datasets, but do a right outer join so that all the documents that have dates
# are accounted for
new.df <- merge(x = signals, y = df, by = "Filename", all.y = TRUE)
# Remove any NA's in the date
new.df <- new.df[!is.na(new.df$Date),]
# Rename the dataframe for ease
df <- new.df
df <- df[,c("Filename", "perPos", "perNeg", "PSJudge", "judgementFrac", "nous", "vous",
"je", "ils", "il", "elle", "le", "UniqueWordCount", "avgSD", "avgEVC",
"Group", "Date", 'Score')]
# Split the dataframes based on groups so that we can graph by each group
mylist <- split(df, df$Group)
WBC <- as.data.frame(mylist$`Westboro Baptist Church`)
DorothyDay <- as.data.frame(mylist$`Dorothy Day`)
ISIS <- as.data.frame(mylist$ISIS)
JohnPiper <- as.data.frame(mylist$`John Piper`)
MehrBaba <- as.data.frame(mylist$`Mehr Baba`)
SeaShepherds <- as.data.frame(mylist$SeaShepherds)
Unitarian <- as.data.frame(mylist$Unitarian)
# Plot the time series by signal
library(ggplot2)
library(reshape2)
WBC <- WBC[,c("perPos", "perNeg", "PSJudge", "judgementFrac", "nous", "vous",
"je", "ils", "il", "elle", "le", "UniqueWordCount", "avgSD", "avgEVC", "Date", 'Score')]
WBC.upper <- WBC[,c("UniqueWordCount", "judgementFrac")]
d <- melt(WBC.upper, id.vars = "Date", variable.name = "series")
WBC.upper <- WBC[,c("UniqueWordCount", "Date", "judgementFrac")]
d <- melt(WBC.upper, id.vars = "Date", variable.name = "series")
ggplot(d, aes(Date, value)) + geom_line(aes(colour = series)) + ggtitle("WBC")
WBC.lower <- WBC[,c("nous", "ils", "Date")]
d <- melt(WBC.lower, id.vars = "Date", variable.name = "series")
ggplot(d, aes(Date, value)) + geom_line(aes(colour = series)) + ggtitle("WBC")
dev.off()
View(WBC)
ggplot(WBC, aes(x = Date, y = Score)) + geom_line() + ggtitle("WBC")
ggplot(WBC, aes(x = Date, y = Score)) + geom_line(colours = "green") + ggtitle("WBC")
ggplot(WBC, aes(x = Date, y = Score, color = "navy")) + geom_line() + ggtitle("WBC")
install.packages("gtable")
install.packages("gtable")
library(gtable)
library(grid)
library(extrafont)
WBC.upper <- WBC[,c("UniqueWordCount", "avgSD", "avgEVC", "Date", "PSJudge", "judgementFrac")]
WBC.upper <- WBC[,c("UniqueWordCount", "Date", "judgementFrac")]
d <- melt(WBC.upper, id.vars = "Date", variable.name = "series")
p1 <- ggplot(d, aes(Date, value)) + geom_line(aes(colour = series)) + ggtitle("WBC")
p2 <- ggplot(WBC, aes(x = Date, y = Score)) + geom_line() + ggtitle("WBC")
g1 <- ggplot_gtable(ggplot_build(p1))
g2 <- ggplot_gtable(ggplot_build(p2))
pp <- c(subset(g1$layout, name == "panel", se = t:r))
g <- gtable_add_grob(g1, g2$grobs[[which(g2$layout$name == "panel")]], pp$t,
pp$l, pp$b, pp$l)
ia <- which(g2$layout$name == "axis-l")
ga <- g2$grobs[[ia]]
ax <- ga$children[[2]]
ax$widths <- rev(ax$widths)
ax$grobs <- rev(ax$grobs)
g <- gtable_add_cols(g, g2$widths[g2$layout[ia, ]$l], length(g$widths) - 1)
g <- gtable_add_grob(g, ax, pp$t, length(g$widths) - 1, pp$b)
g
g1 <- ggplotGrob(p1)
g2 <- ggplotGrob(p2)
pp <- c(subset(g1$layout, name == "panel", se = t:r))
g1 <- gtable_add_grob(g1, g2$grobs[[which(g2$layout$name == "panel")]], pp$t, pp$l, pp$b, pp$l)
hinvert_title_grob <- function(grob){
# Swap the widths
widths <- grob$widths
grob$widths[1] <- widths[3]
grob$widths[3] <- widths[1]
grob$vp[[1]]$layout$widths[1] <- widths[3]
grob$vp[[1]]$layout$widths[3] <- widths[1]
# Fix the justification
grob$children[[1]]$hjust <- 1 - grob$children[[1]]$hjust
grob$children[[1]]$vjust <- 1 - grob$children[[1]]$vjust
grob$children[[1]]$x <- unit(1, "npc") - grob$children[[1]]$x
grob
}
index <- which(g2$layout$name == "axis-l")  # Which grob
yaxis <- g2$grobs[[index]]                  # Extract the grob
ticks <- yaxis$children[[2]]
ticks$widths <- rev(ticks$widths)
ticks$grobs <- rev(ticks$grobs)
plot_theme <- function(p) {
plyr::defaults(p$theme, theme_get())
}
tml <- plot_theme(p1)$axis.ticks.length   # Tick mark length
ticks$grobs[[1]]$x <- ticks$grobs[[1]]$x - unit(1, "npc") + tml
ticks$grobs[[2]] <- hinvert_title_grob(ticks$grobs[[2]])
yaxis$children[[2]] <- ticks
g1 <- gtable_add_cols(g1, g2$widths[g2$layout[index, ]$l], pp$r)
g1 <- gtable_add_grob(g1, yaxis, pp$t, pp$r + 1, pp$b, pp$r + 1, clip = "off", name = "axis-r")
left = textGrob("Number in Russia", x = 0, y = 0.9, just = c("left", "top"), gp = gpar(fontsize = 14, col =  "#68382C", fontfamily = "OfficinaSanITCMedium"))
right =  textGrob("Rest of World", x = 1, y = 0.9, just = c("right", "top"), gp = gpar(fontsize = 14, col =  "#00a4e6", fontfamily = "OfficinaSanITCMedium"))
labs = gTree("Labs", children = gList(left, right))
height = unit(3, "grobheight", left)
g1 <- gtable_add_rows(g1, height, 2)
g1 = gtable_add_grob(g1, labs, t=3, l=3, r=5)
g1$layout[which(g1$layout$name == "panel"), ]$clip = "off"
g1
ggsave("plot.pdf", g1, width=5, height=5)
ggplot(d, aes(Date, value)) +
geom_line() +
scale_y_continuous(
"Signals",
sec.axis = sec_axis(~ . * 1.20, name = "mpg (UK)")
)
grid.draw(g1)
WBC.upper <- WBC[,c("Date", "judgementFrac")]
d <- melt(WBC.upper, id.vars = "Date", variable.name = "series")
p1 <- ggplot(d, aes(Date, value)) + geom_line(aes(colour = series)) + ggtitle("WBC")
p2 <- ggplot(WBC, aes(x = Date, y = Score)) + geom_line() + ggtitle("WBC")
# Get the plot grobs
g1 <- ggplotGrob(p1)
g2 <- ggplotGrob(p2)
# Get the locations of the plot panels in g1.
pp <- c(subset(g1$layout, name == "panel", se = t:r))
# Overlap panel for second plot on that of the first plot
g1 <- gtable_add_grob(g1, g2$grobs[[which(g2$layout$name == "panel")]], pp$t, pp$l, pp$b, pp$l)
# ggplot contains many labels that are themselves complex grob;
# usually a text grob surrounded by margins.
# When moving the grobs from, say, the left to the right of a plot,
# make sure the margins and the justifications are swapped around.
# The function below does the swapping.
# Taken from the cowplot package:
# https://github.com/wilkelab/cowplot/blob/master/R/switch_axis.R
hinvert_title_grob <- function(grob){
# Swap the widths
widths <- grob$widths
grob$widths[1] <- widths[3]
grob$widths[3] <- widths[1]
grob$vp[[1]]$layout$widths[1] <- widths[3]
grob$vp[[1]]$layout$widths[3] <- widths[1]
# Fix the justification
grob$children[[1]]$hjust <- 1 - grob$children[[1]]$hjust
grob$children[[1]]$vjust <- 1 - grob$children[[1]]$vjust
grob$children[[1]]$x <- unit(1, "npc") - grob$children[[1]]$x
grob
}
# Get the y axis from g2 (axis line, tick marks, and tick mark labels)
index <- which(g2$layout$name == "axis-l")  # Which grob
yaxis <- g2$grobs[[index]]                  # Extract the grob
# yaxis is a complex of grobs containing the axis line, the tick marks, and the tick mark labels.
# The relevant grobs are contained in axis$children:
#   axis$children[[1]] contains the axis line;
#   axis$children[[2]] contains the tick marks and tick mark labels.
# Second, swap tick marks and tick mark labels
ticks <- yaxis$children[[2]]
ticks$widths <- rev(ticks$widths)
ticks$grobs <- rev(ticks$grobs)
# Third, move the tick marks
# Tick mark lengths can change.
# A function to get the original tick mark length
# Taken from the cowplot package:
# https://github.com/wilkelab/cowplot/blob/master/R/switch_axis.R
plot_theme <- function(p) {
plyr::defaults(p$theme, theme_get())
}
tml <- plot_theme(p1)$axis.ticks.length   # Tick mark length
ticks$grobs[[1]]$x <- ticks$grobs[[1]]$x - unit(1, "npc") + tml
# Fourth, swap margins and fix justifications for the tick mark labels
ticks$grobs[[2]] <- hinvert_title_grob(ticks$grobs[[2]])
# Fifth, put ticks back into yaxis
yaxis$children[[2]] <- ticks
# Put the transformed yaxis on the right side of g1
g1 <- gtable_add_cols(g1, g2$widths[g2$layout[index, ]$l], pp$r)
g1 <- gtable_add_grob(g1, yaxis, pp$t, pp$r + 1, pp$b, pp$r + 1, clip = "off", name = "axis-r")
# Labels grob
left = textGrob("Number in Russia", x = 0, y = 0.9, just = c("left", "top"), gp = gpar(fontsize = 14, col =  "#68382C", fontfamily = "OfficinaSanITCMedium"))
right =  textGrob("Rest of World", x = 1, y = 0.9, just = c("right", "top"), gp = gpar(fontsize = 14, col =  "#00a4e6", fontfamily = "OfficinaSanITCMedium"))
labs = gTree("Labs", children = gList(left, right))
# New row in the gtable for labels
height = unit(3, "grobheight", left)
g1 <- gtable_add_rows(g1, height, 2)
# Put the label in the new row
g1 = gtable_add_grob(g1, labs, t=3, l=3, r=5)
# Turn off clipping in the plot panel
g1$layout[which(g1$layout$name == "panel"), ]$clip = "off"
grid.draw(g1)
left = textGrob("Number in Russia", x = 0, y = 0.9, just = c("left", "top"), gp = gpar(fontsize = 14, col =  "#68382C"))
right =  textGrob("Rest of World", x = 1, y = 0.9, just = c("right", "top"), gp = gpar(fontsize = 14, col =  "#00a4e6"))
labs = gTree("Labs", children = gList(left, right))
# New row in the gtable for labels
height = unit(3, "grobheight", left)
g1 <- gtable_add_rows(g1, height, 2)
# Put the label in the new row
g1 = gtable_add_grob(g1, labs, t=3, l=3, r=5)
# Turn off clipping in the plot panel
g1$layout[which(g1$layout$name == "panel"), ]$clip = "off"
grid.draw(g1)
ggplot(WBC, aes(x = Date, y = Score)) + geom_line() + ggtitle("WBC")
ggplot(WBC, aes(x = Date, y = Score)) + geom_line() + ggtitle("WBC") + geom_point()
