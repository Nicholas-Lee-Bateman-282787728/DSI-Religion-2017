auto.arima(LCT, stationary = TRUE, seasonal = FALSE)
# Answer:
# Series: LCT
# ARIMA(0,0,0) with non-zero mean
# Coefficients:
#       intercept
#           1e-04
# s.e.      5e-04
# sigma^2 estimated as 0.0004556:  log likelihood=5431.52
# AIC=-10859.04   AICc=-10859.04   BIC=-10847.62
# 3. Time Domain: identifying an ARCH/GARCH model for the residuals
mm <- garchFit(formula = ~arma(0,3) + garch(1,0), data = res, trace = TRUE)
summary(mm)
resid = mm@residuals
resid = ts(resid)
plot(resid, main = "Plot of Residuals of GARCH Model for CAT Series")
V = resid^2
acf(V, main = "ACF Plot of Residuals^2 of GARCH Model for CAT Series")
pacf(V, main = "PACF Plot of Residuals^2 of GARCH Model for CAT Series")
# 4. Frequency Domain: Smoothing the periodogram to determine periodicities
m1 = round(sqrt(length(CT)))
D = ts(DD$DD.Close)
plot(D, main = "Plot of Untransformed DD Series")
LDT = diff(log(D))
plot(LDT, main = "Plot of Stationary DD Series")
acf(LDT, main = "ACF Plot of Stationary DD Series")
pacf(LDT, main = "PACF Plot of Stationary DD Series")
# 2. Time Domain: fitting the ARMA Model
Box.test(LDT, type="Ljung")
# Answer:
# Box-Ljung test
# data:  LDT
# X-squared = 2.2034, df = 1, p-value = 0.1377
rr = arima(LDT, order = c(0,0,0), include.mean = TRUE)
rr
# Answer:
# Call:
# arima(x = LDT, order = c(0, 0, 0), include.mean = TRUE)
# Coefficients:
#       intercept
#           1e-04
# s.e.      4e-04
# sigma^2 estimated as 0.0003497:  log likelihood = 5727.32,  aic = -11450.65
res = rr$residuals
acf(res, main = "ACF Plot of Residuals of ARMA Model for DD Series")
pacf(res, main = "PACF Plot of Residuals of ARMA Model for DD Series")
W = res^2
acf(W, main = "ACF Plot of Residuals^2 of ARMA Model for DD Series")
pacf(W, main = "PACF Plot of Residuals^2 of ARMA Model for DD Series")
auto.arima(LDT, stationary = TRUE, seasonal = FALSE)
# Answer:
# Series: LDT
# ARIMA(0,0,0) with non-zero mean
# Coefficients:
#       intercept
#           1e-04
# s.e.      4e-04
# sigma^2 estimated as 0.0003497:  log likelihood=5727.32
# AIC=-11450.65   AICc=-11450.64   BIC=-11439.22
# 3. Time Domain: identifying an ARCH/GARCH model for the residuals
mm <- garchFit(formula = ~arma(0,0) + garch(1,0), data = res, trace = TRUE)
summary(mm)
resid = mm@residuals
resid = ts(resid)
plot(resid, main = "Plot of Residuals of GARCH Model for DD Series")
V = resid^2
acf(V, main = "ACF Plot of Residuals^2 of GARCH Model for DD Series")
pacf(V, main = "PACF Plot of Residuals^2 of GARCH Model for DD Series")
# 4. Frequency Domain: Smoothing the periodogram to determine periodicities
m2 = round(sqrt(length(D)))
V = ts(VZ$VZ.Close)
plot(V, main = "Plot of Untransformed VZ Series")
LVT = diff(log(V))
plot(LVT, main = "Plot of Stationary VZ Series")
acf(LVT, main = "ACF Plot of Stationary VZ Series")
pacf(LVT, main = "PACF Plot of Stationary VZ Series")
# 2. Time Domain: fitting the ARMA Model
Box.test(LVT, type="Ljung")
# Answer:
# Box-Ljung test
# data:  LVT
# X-squared = 0.4519, df = 1, p-value = 0.5014
rr = arima(LVT, order = c(0,0,3), include.mean = TRUE)
rr
# Answer:
# Call:
# arima(x = LVT, order = c(0, 0, 3), include.mean = TRUE)
# Coefficients:
#           ma1      ma2      ma3  intercept
#       -0.0201  -0.0976  -0.0301      1e-04
# s.e.   0.0211   0.0214   0.0209      3e-04
# sigma^2 estimated as 0.000202:  log likelihood = 6341.29,  aic = -12672.58
res = rr$residuals
acf(res, main = "ACF Plot of Residuals of ARMA Model for VZ Series")
pacf(res, main = "PACF Plot of Residuals of ARMA Model for VZ Series")
W = res^2
acf(W, main = "ACF Plot of Residuals^2 of ARMA Model for VZ Series")
pacf(W, main = "PACF Plot of Residuals^2 of ARMA Model for VZ Series")
auto.arima(LVT, stationary = TRUE, seasonal = FALSE)
# Answer:
# Series: LVT
# ARIMA(0,0,3) with zero mean
# Coefficients:
#           ma1      ma2      ma3
#       -0.0200  -0.0976  -0.0301
# s.e.   0.0211   0.0214   0.0209
# sigma^2 estimated as 0.000202:  log likelihood=6341.23
# AIC=-12674.47   AICc=-12674.45   BIC=-12651.62
# 3. Time Domain: identifying an ARCH/GARCH model for the residuals
mm <- garchFit(formula = ~arma(0,3) + garch(1,3), data = res, trace = TRUE)
summary(mm)
resid = mm@residuals
library(car)
############################################################################
# Problem 4.2
# Consider the multiple regression model fit to the NFL team performance data in Problem 3.1.
x2 <- c(1985,2855,1737,2905,1666,2927,2341,2737,1414,1838,1480,2191,2229,2204,2140,
1730,2072,2929,2268,1983,1792,1606,1492,2835,2416,1638,2649,1503)
x7 <- c(59.7,55,65.6,61.4,66.1,61,66.1,58,57,58.9,67.5,57.2,58.8,58.6,59.2,54.4,
49.6,54.3,58.7,51.7,61.9,52.7,57.8,59.7,54.9,65.3,43.8,53.5)
x8 <- c(2205,2096,1847,1903,1457,1848,1564,1821,2577,2476,1984,1917,1761,1709,
1901,2288,2072,2861,2411,2289,2203,2592,2053,1979,2048,1786,2876,2560)
y <- c(10,11,11,13,10,11,10,11,4,2,7,10,9,9,6,5,5,5,6,4,3,3,4,10,6,8,2,0)
nfl.lm <- lm(y~x2+x7+x8)
# (a) Construct a normal probability plot of the residuals. Does there seem to be any
#     problem with the normality assumption?
qqnorm(nfl.lm$residuals)
qqline(nfl.lm$residuals)
# (b) Construct and interpret a plot of the residuals versus the predicted response.
plot(nfl.lm$fitted.values, nfl.lm$residuals)
abline(h = 0)
# (c) Construct plots of the residuals vs each of the regressor variables. Do these plots
#     imply that the regressor is correctly specified?
plot(x2, nfl.lm$residuals)
abline(h = 0)
plot(x7, nfl.lm$residuals)
abline(h = 0)
plot(x8, nfl.lm$residuals)
abline(h = 0)
# (d) Construct the partial regression plots for this model. Compare the plots with the
#     plots of residuals vs. regressors from part (c) above. Discuss the type of information
#     provided by these plots.
avPlots(nfl.lm)
install.packages("car")
install.packages("pbkrtests")
# installing/loading the package:
if(!require(installr)) {
install.packages("installr"); require(installr)} #load / install+load installr
# using the package:
updateR() # this will start the updating process of your R installation.  It will check for newer versions, and if one is available, will guide you through the decisions you'd need to make.
=12*15
12*15
library(genalg)
library(ggplot2)
install.packages("genalg")
library(genalg)
dataset <- data.frame(item = c("pocketknife", "beans", "potatoes", "onions",
"sleeping bag", "rope", "compass"), survivalpoints = c(10, 20, 15, 2, 30,
10, 30), weight = c(1, 5, 10, 1, 7, 5, 1))
weightlimit <- 20
chromosome = c(1, 0, 0, 1, 1, 0, 0)
dataset[chromosome == 1, ]
cat(chromosome %*% dataset$survivalpoints)
evalFunc <- function(x) {
current_solution_survivalpoints <- x %*% dataset$survivalpoints
current_solution_weight <- x %*% dataset$weight
if (current_solution_weight > weightlimit)
return(0) else return(-current_solution_survivalpoints)
}
iter = 100
GAmodel <- rbga.bin(size = 7, popSize = 200, iters = iter, mutationChance = 0.01,
elitism = T, evalFunc = evalFunc, verbose = TRUE)
cat(genalg:::summary.rbga(GAmodel))
solution = c(1, 1, 0, 1, 1, 1, 1)
dataset[solution == 1, ]
cat(paste(solution %*% dataset$survivalpoints, "/", sum(dataset$survivalpoints)))
require(genalg)
evaluate <- function(string=c()) {
returnVal = NA;
if (length(string) == 2) { # expecting a chromosome of length 2
returnVal = abs(string[1]-pi) + abs(string[2]-sqrt(50)); # when that's minimal, we've done
} else {                                                   # a good job
stop("Expecting a chromosome of length 2!");
}
returnVal
}
monitor <- function(obj) {
# plot the population
xlim = c(obj$stringMin[1], obj$stringMax[1]);
ylim = c(obj$stringMin[2], obj$stringMax[2]);
plot(obj$population, xlim=xlim, ylim=ylim,
xlab="pi", ylab="sqrt(50)");
}
rbga.results = rbga(stringMin=c(1, 1), stringMax=c(5, 10), popSize = 200, monitorFunc=monitor,
evalFunc=evaluate, verbose=TRUE, mutationChance=0.01)
plot(rbga.results)
plot(rbga.results, type="hist")
plot(rbga.results, type="vars")
# Beginning to look at Time Series
# Graphs of Scores over Time by Group
# By: Samantha Garofalo (smg7un)
# DSI-Religion-2017 Capstone
############################################################################################
# Scores
setwd("~/Downloads")
library(readxl)
# First, download Interns Scoring Doc in xlsx format
WBC <- read_excel("~/Downloads/Interns Scoring.xlsx", sheet = "WBC")
# Bahai <- read_excel("~/Downloads/Interns Scoring.xlsx", sheet = "Bahai")
DorothyDay <- read_excel("~/Downloads/Interns Scoring.xlsx", sheet = "DorothyDay")
ISIS <- read_excel("~/Downloads/Interns Scoring.xlsx", sheet = "ISIS")
JohnPiper <- read_excel("~/Downloads/Interns Scoring.xlsx", sheet = "JohnPiper")
MehrBaba <- read_excel("~/Downloads/Interns Scoring.xlsx", sheet = "MehrBaba")
SeaShepherds <- read_excel("~/Downloads/Interns Scoring.xlsx", sheet = "SeaShepherds")
Unitarian <- read_excel("~/Downloads/Interns Scoring.xlsx", sheet = "Unitarian")
WBC <- WBC[,1:5]
# Bahai <- Bahai[,1:5]
DorothyDay <- DorothyDay[,1:5]
ISIS <- ISIS[,1:5]
JohnPiper <- JohnPiper[,1:5]
MehrBaba <- MehrBaba[,1:5]
SeaShepherds <- SeaShepherds[,1:5]
Unitarian <- Unitarian[,1:5]
WBC <- WBC[!is.na(WBC$Score),]
# Bahai <- Bahai[!is.na(Bahai$Score),]
DorothyDay <- DorothyDay[!is.na(DorothyDay$Score),]
ISIS <- ISIS[!is.na(ISIS$Score),]
JohnPiper <- JohnPiper[!is.na(JohnPiper$Score),]
MehrBaba <- MehrBaba[!is.na(MehrBaba$Score),]
SeaShepherds <- SeaShepherds[!is.na(SeaShepherds$Score),]
Unitarian <- Unitarian[!is.na(Unitarian$Score),]
WBC <- WBC[!is.na(WBC$Date),]
# Bahai <- Bahai[!is.na(Bahai$Date),]
DorothyDay <- DorothyDay[!is.na(DorothyDay$Date),]
ISIS <- ISIS[!is.na(ISIS$Date),]
JohnPiper <- JohnPiper[!is.na(JohnPiper$Date),]
MehrBaba <- MehrBaba[!is.na(MehrBaba$Date),]
SeaShepherds <- SeaShepherds[!is.na(SeaShepherds$Date),]
Unitarian <- Unitarian[!is.na(Unitarian$Date),]
WBC$Date <- as.Date(WBC$Date , format = "%m/%d/%y")
# Bahai$Date <- as.Date(Bahai$Date , format = "%m/%d/%y")
DorothyDay$Date <- as.Date(DorothyDay$Date , format = "%m/%d/%y")
ISIS$Date <- as.Date(ISIS$Date , format = "%m/%d/%y")
JohnPiper$Date <- as.Date(JohnPiper$Date , format = "%m/%d/%y")
MehrBaba$Date <- as.Date(MehrBaba$Date , format = "%m/%d/%y")
SeaShepherds$Date <- as.Date(SeaShepherds$Date , format = "%m/%d/%y")
Unitarian$Date <- as.Date(Unitarian$Date , format = "%m/%d/%y")
plot(WBC$Date, WBC$Score, main = "WBC", xlab = "Date", ylab = "Score", ylim = c(0,9))
# plot(Bahai$Date, Bahai$Score, main = "Bahai", xlab = "Date", ylab = "Score", ylim = c(0,9))
plot(DorothyDay$Date, DorothyDay$Score, main = "DorothyDay", xlab = "Date", ylab = "Score", ylim = c(0,9))
plot(ISIS$Date, ISIS$Score, main = "ISIS", xlab = "Date", ylab = "Score", ylim = c(0,9))
plot(JohnPiper$Date, JohnPiper$Score, main = "JohnPiper", xlab = "Date", ylab = "Score", ylim = c(0,9))
plot(MehrBaba$Date, MehrBaba$Score, main = "MehrBaba", xlab = "Date", ylab = "Score", ylim = c(0,9))
plot(SeaShepherds$Date, SeaShepherds$Score, main = "SeaShepherds", xlab = "Date", ylab = "Score", ylim = c(0,9))
plot(Unitarian$Date, Unitarian$Score, main = "Unitarian", xlab = "Date", ylab = "Score", ylim = c(0,9))
############################################################################################
# Signals
setwd("~/Documents/Data Science/Capstone/DSI-Religion-2017/modelOutputSingleDocs/307 Signals")
# Import the signals dataframe
signals <- read.csv("SingleDocSignals.csv")
signals$Filename <- paste(signals$groupId, ".txt", sep = "")
# Rename the column (got deleted for some reason)
colnames(MehrBaba)[1] <- "Group"
df <- rbind(WBC, DorothyDay, ISIS, JohnPiper, MehrBaba, SeaShepherds, Unitarian)
# Merge the 2 datasets, but do a right outer join so that all the documents that have dates
# are accounted for
new.df <- merge(x = signals, y = df, by = "Filename", all.y = TRUE)
# Remove any NA's in the date
new.df <- new.df[!is.na(new.df$Date),]
# Rename the dataframe for ease
df <- new.df
df <- df[,c("Filename", "perPos", "perNeg", "PSJudge", "judgementFrac", "nous", "vous",
"je", "ils", "il", "elle", "le", "UniqueWordCount", "avgSD", "avgEVC",
"Group", "Date", 'Score')]
# Split the dataframes based on groups so that we can graph by each group
mylist <- split(df, df$Group)
WBC <- as.data.frame(mylist$`Westboro Baptist Church`)
DorothyDay <- as.data.frame(mylist$`Dorothy Day`)
ISIS <- as.data.frame(mylist$ISIS)
JohnPiper <- as.data.frame(mylist$`John Piper`)
MehrBaba <- as.data.frame(mylist$`Mehr Baba`)
SeaShepherds <- as.data.frame(mylist$SeaShepherds)
Unitarian <- as.data.frame(mylist$Unitarian)
# Plot the time series by signal
library(ggplot2)
library(reshape2)
####################################
# Westboro
WBC <- WBC[,c("perPos", "perNeg", "PSJudge", "judgementFrac", "nous", "vous",
"je", "ils", "il", "elle", "le", "UniqueWordCount", "avgSD", "avgEVC", "Date", 'Score')]
WBC.upper <- WBC[,c("UniqueWordCount", "avgSD", "avgEVC", "Date", "PSJudge", "judgementFrac")]
d <- melt(WBC.upper, id.vars = "Date", variable.name = "series")
ggplot(d, aes(Date, value)) + geom_line(aes(colour = series)) + ggtitle("WBC")
WBC.lower <- WBC[,c("perPos", "perNeg", "nous", "vous", "je", "ils", "il", "elle", "le", "Date")]
d <- melt(WBC.lower, id.vars = "Date", variable.name = "series")
ggplot(d, aes(Date, value)) + geom_line(aes(colour = series)) + ggtitle("WBC")
####################################
# Dorothy Day
DorothyDay <- DorothyDay[,c("perPos", "perNeg", "PSJudge", "judgementFrac", "nous", "vous",
"je", "ils", "il", "elle", "le", "UniqueWordCount", "avgSD", "avgEVC", "Date", 'Score')]
DorothyDay.upper <- DorothyDay[,c("UniqueWordCount", "avgSD", "avgEVC", "Date", "PSJudge", "judgementFrac")]
d <- melt(DorothyDay.upper, id.vars = "Date", variable.name = "series")
ggplot(d, aes(Date, value)) + geom_line(aes(colour = series)) + ggtitle("Dorothy Day")
DorothyDay.lower <- DorothyDay[,c("perPos", "perNeg", "nous", "vous", "je", "ils", "il", "elle", "le", "Date")]
d <- melt(DorothyDay.lower, id.vars = "Date", variable.name = "series")
ggplot(d, aes(Date, value)) + geom_line(aes(colour = series)) + ggtitle("Dorothy Day")
####################################
# ISIS
ISIS <- ISIS[,c("perPos", "perNeg", "PSJudge", "judgementFrac", "nous", "vous",
"je", "ils", "il", "elle", "le", "UniqueWordCount", "avgSD", "avgEVC", "Date", 'Score')]
ISIS.upper <- ISIS[,c("UniqueWordCount", "avgSD", "avgEVC", "Date", "PSJudge", "judgementFrac")]
d <- melt(ISIS.upper, id.vars = "Date", variable.name = "series")
ggplot(d, aes(Date, value)) + geom_line(aes(colour = series)) + ggtitle("ISIS")
ISIS.lower <- ISIS[,c("perPos", "perNeg", "nous", "vous", "je", "ils", "il", "elle", "le", "Date")]
d <- melt(ISIS.lower, id.vars = "Date", variable.name = "series")
ggplot(d, aes(Date, value)) + geom_line(aes(colour = series)) + ggtitle("ISIS")
####################################
# John Piper
JohnPiper <- JohnPiper[,c("perPos", "perNeg", "PSJudge", "judgementFrac", "nous", "vous",
"je", "ils", "il", "elle", "le", "UniqueWordCount", "avgSD", "avgEVC", "Date", 'Score')]
JohnPiper.upper <- JohnPiper[,c("UniqueWordCount", "avgSD", "avgEVC", "Date", "PSJudge", "judgementFrac")]
d <- melt(JohnPiper.upper, id.vars = "Date", variable.name = "series")
ggplot(d, aes(Date, value)) + geom_line(aes(colour = series)) + ggtitle("John Piper")
JohnPiper.lower <- JohnPiper[,c("perPos", "perNeg", "nous", "vous", "je", "ils", "il", "elle", "le", "Date")]
d <- melt(JohnPiper.lower, id.vars = "Date", variable.name = "series")
ggplot(d, aes(Date, value)) + geom_line(aes(colour = series)) + ggtitle("John Piper")
####################################
# Mehr Baba
MehrBaba <- MehrBaba[,c("perPos", "perNeg", "PSJudge", "judgementFrac", "nous", "vous",
"je", "ils", "il", "elle", "le", "UniqueWordCount", "avgSD", "avgEVC", "Date", 'Score')]
MehrBaba.upper <- MehrBaba[,c("UniqueWordCount", "avgSD", "avgEVC", "Date", "PSJudge", "judgementFrac")]
d <- melt(MehrBaba.upper, id.vars = "Date", variable.name = "series")
ggplot(d, aes(Date, value)) + geom_line(aes(colour = series)) + ggtitle("Mehr Baba")
MehrBaba.lower <- MehrBaba[,c("perPos", "perNeg", "nous", "vous", "je", "ils", "il", "elle", "le", "Date")]
d <- melt(MehrBaba.lower, id.vars = "Date", variable.name = "series")
ggplot(d, aes(Date, value)) + geom_line(aes(colour = series)) + ggtitle("Mehr Baba")
####################################
# Sea Shepards
SeaShepherds <- SeaShepherds[,c("perPos", "perNeg", "PSJudge", "judgementFrac", "nous", "vous",
"je", "ils", "il", "elle", "le", "UniqueWordCount", "avgSD", "avgEVC", "Date", 'Score')]
SeaShepherds.upper <- SeaShepherds[,c("UniqueWordCount", "avgSD", "avgEVC", "Date", "PSJudge", "judgementFrac")]
d <- melt(SeaShepherds.upper, id.vars = "Date", variable.name = "series")
ggplot(d, aes(Date, value)) + geom_line(aes(colour = series)) + ggtitle("Sea Shepherds")
SeaShepherds.lower <- SeaShepherds[,c("perPos", "perNeg", "nous", "vous", "je", "ils", "il", "elle", "le", "Date")]
d <- melt(SeaShepherds.lower, id.vars = "Date", variable.name = "series")
ggplot(d, aes(Date, value)) + geom_line(aes(colour = series)) + ggtitle("SeaShepherds")
####################################
# Unitarian
Unitarian <- Unitarian[,c("perPos", "perNeg", "PSJudge", "judgementFrac", "nous", "vous",
"je", "ils", "il", "elle", "le", "UniqueWordCount", "avgSD", "avgEVC", "Date", 'Score')]
Unitarian.upper <- Unitarian[,c("UniqueWordCount", "avgSD", "avgEVC", "Date", "PSJudge", "judgementFrac")]
d <- melt(Unitarian.upper, id.vars = "Date", variable.name = "series")
ggplot(d, aes(Date, value)) + geom_line(aes(colour = series)) + ggtitle("Unitarian")
Unitarian.lower <- Unitarian[,c("perPos", "perNeg", "nous", "vous", "je", "ils", "il", "elle", "le", "Date")]
d <- melt(Unitarian.lower, id.vars = "Date", variable.name = "series")
ggplot(d, aes(Date, value)) + geom_line(aes(colour = series)) + ggtitle("Unitarian")
pdf("TS_Graphs.pdf")
# Scores
setwd("~/Downloads")
library(readxl)
# First, download Interns Scoring Doc in xlsx format
WBC <- read_excel("~/Downloads/Interns Scoring.xlsx", sheet = "WBC")
# Bahai <- read_excel("~/Downloads/Interns Scoring.xlsx", sheet = "Bahai")
DorothyDay <- read_excel("~/Downloads/Interns Scoring.xlsx", sheet = "DorothyDay")
ISIS <- read_excel("~/Downloads/Interns Scoring.xlsx", sheet = "ISIS")
JohnPiper <- read_excel("~/Downloads/Interns Scoring.xlsx", sheet = "JohnPiper")
MehrBaba <- read_excel("~/Downloads/Interns Scoring.xlsx", sheet = "MehrBaba")
SeaShepherds <- read_excel("~/Downloads/Interns Scoring.xlsx", sheet = "SeaShepherds")
Unitarian <- read_excel("~/Downloads/Interns Scoring.xlsx", sheet = "Unitarian")
WBC <- WBC[,1:5]
# Bahai <- Bahai[,1:5]
DorothyDay <- DorothyDay[,1:5]
ISIS <- ISIS[,1:5]
JohnPiper <- JohnPiper[,1:5]
MehrBaba <- MehrBaba[,1:5]
SeaShepherds <- SeaShepherds[,1:5]
Unitarian <- Unitarian[,1:5]
WBC <- WBC[!is.na(WBC$Score),]
# Bahai <- Bahai[!is.na(Bahai$Score),]
DorothyDay <- DorothyDay[!is.na(DorothyDay$Score),]
ISIS <- ISIS[!is.na(ISIS$Score),]
JohnPiper <- JohnPiper[!is.na(JohnPiper$Score),]
MehrBaba <- MehrBaba[!is.na(MehrBaba$Score),]
SeaShepherds <- SeaShepherds[!is.na(SeaShepherds$Score),]
Unitarian <- Unitarian[!is.na(Unitarian$Score),]
WBC <- WBC[!is.na(WBC$Date),]
# Bahai <- Bahai[!is.na(Bahai$Date),]
DorothyDay <- DorothyDay[!is.na(DorothyDay$Date),]
ISIS <- ISIS[!is.na(ISIS$Date),]
JohnPiper <- JohnPiper[!is.na(JohnPiper$Date),]
MehrBaba <- MehrBaba[!is.na(MehrBaba$Date),]
SeaShepherds <- SeaShepherds[!is.na(SeaShepherds$Date),]
Unitarian <- Unitarian[!is.na(Unitarian$Date),]
WBC$Date <- as.Date(WBC$Date , format = "%m/%d/%y")
# Bahai$Date <- as.Date(Bahai$Date , format = "%m/%d/%y")
DorothyDay$Date <- as.Date(DorothyDay$Date , format = "%m/%d/%y")
ISIS$Date <- as.Date(ISIS$Date , format = "%m/%d/%y")
JohnPiper$Date <- as.Date(JohnPiper$Date , format = "%m/%d/%y")
MehrBaba$Date <- as.Date(MehrBaba$Date , format = "%m/%d/%y")
SeaShepherds$Date <- as.Date(SeaShepherds$Date , format = "%m/%d/%y")
Unitarian$Date <- as.Date(Unitarian$Date , format = "%m/%d/%y")
plot(WBC$Date, WBC$Score, main = "WBC", xlab = "Date", ylab = "Score", ylim = c(0,9))
# plot(Bahai$Date, Bahai$Score, main = "Bahai", xlab = "Date", ylab = "Score", ylim = c(0,9))
plot(DorothyDay$Date, DorothyDay$Score, main = "DorothyDay", xlab = "Date", ylab = "Score", ylim = c(0,9))
plot(ISIS$Date, ISIS$Score, main = "ISIS", xlab = "Date", ylab = "Score", ylim = c(0,9))
plot(JohnPiper$Date, JohnPiper$Score, main = "JohnPiper", xlab = "Date", ylab = "Score", ylim = c(0,9))
plot(MehrBaba$Date, MehrBaba$Score, main = "MehrBaba", xlab = "Date", ylab = "Score", ylim = c(0,9))
plot(SeaShepherds$Date, SeaShepherds$Score, main = "SeaShepherds", xlab = "Date", ylab = "Score", ylim = c(0,9))
plot(Unitarian$Date, Unitarian$Score, main = "Unitarian", xlab = "Date", ylab = "Score", ylim = c(0,9))
############################################################################################
# Signals
setwd("~/Documents/Data Science/Capstone/DSI-Religion-2017/modelOutputSingleDocs/307 Signals")
# Import the signals dataframe
signals <- read.csv("SingleDocSignals.csv")
signals$Filename <- paste(signals$groupId, ".txt", sep = "")
# Rename the column (got deleted for some reason)
colnames(MehrBaba)[1] <- "Group"
df <- rbind(WBC, DorothyDay, ISIS, JohnPiper, MehrBaba, SeaShepherds, Unitarian)
# Merge the 2 datasets, but do a right outer join so that all the documents that have dates
# are accounted for
new.df <- merge(x = signals, y = df, by = "Filename", all.y = TRUE)
# Remove any NA's in the date
new.df <- new.df[!is.na(new.df$Date),]
# Rename the dataframe for ease
df <- new.df
df <- df[,c("Filename", "perPos", "perNeg", "PSJudge", "judgementFrac", "nous", "vous",
"je", "ils", "il", "elle", "le", "UniqueWordCount", "avgSD", "avgEVC",
"Group", "Date", 'Score')]
# Split the dataframes based on groups so that we can graph by each group
mylist <- split(df, df$Group)
WBC <- as.data.frame(mylist$`Westboro Baptist Church`)
DorothyDay <- as.data.frame(mylist$`Dorothy Day`)
ISIS <- as.data.frame(mylist$ISIS)
JohnPiper <- as.data.frame(mylist$`John Piper`)
MehrBaba <- as.data.frame(mylist$`Mehr Baba`)
SeaShepherds <- as.data.frame(mylist$SeaShepherds)
Unitarian <- as.data.frame(mylist$Unitarian)
# Plot the time series by signal
library(ggplot2)
library(reshape2)
####################################
# Westboro
WBC <- WBC[,c("perPos", "perNeg", "PSJudge", "judgementFrac", "nous", "vous",
"je", "ils", "il", "elle", "le", "UniqueWordCount", "avgSD", "avgEVC", "Date", 'Score')]
WBC.upper <- WBC[,c("UniqueWordCount", "avgSD", "avgEVC", "Date", "PSJudge", "judgementFrac")]
d <- melt(WBC.upper, id.vars = "Date", variable.name = "series")
ggplot(d, aes(Date, value)) + geom_line(aes(colour = series)) + ggtitle("WBC")
WBC.lower <- WBC[,c("perPos", "perNeg", "nous", "vous", "je", "ils", "il", "elle", "le", "Date")]
d <- melt(WBC.lower, id.vars = "Date", variable.name = "series")
ggplot(d, aes(Date, value)) + geom_line(aes(colour = series)) + ggtitle("WBC")
####################################
# Dorothy Day
DorothyDay <- DorothyDay[,c("perPos", "perNeg", "PSJudge", "judgementFrac", "nous", "vous",
"je", "ils", "il", "elle", "le", "UniqueWordCount", "avgSD", "avgEVC", "Date", 'Score')]
DorothyDay.upper <- DorothyDay[,c("UniqueWordCount", "avgSD", "avgEVC", "Date", "PSJudge", "judgementFrac")]
d <- melt(DorothyDay.upper, id.vars = "Date", variable.name = "series")
ggplot(d, aes(Date, value)) + geom_line(aes(colour = series)) + ggtitle("Dorothy Day")
DorothyDay.lower <- DorothyDay[,c("perPos", "perNeg", "nous", "vous", "je", "ils", "il", "elle", "le", "Date")]
d <- melt(DorothyDay.lower, id.vars = "Date", variable.name = "series")
ggplot(d, aes(Date, value)) + geom_line(aes(colour = series)) + ggtitle("Dorothy Day")
####################################
# ISIS
ISIS <- ISIS[,c("perPos", "perNeg", "PSJudge", "judgementFrac", "nous", "vous",
"je", "ils", "il", "elle", "le", "UniqueWordCount", "avgSD", "avgEVC", "Date", 'Score')]
ISIS.upper <- ISIS[,c("UniqueWordCount", "avgSD", "avgEVC", "Date", "PSJudge", "judgementFrac")]
d <- melt(ISIS.upper, id.vars = "Date", variable.name = "series")
ggplot(d, aes(Date, value)) + geom_line(aes(colour = series)) + ggtitle("ISIS")
ISIS.lower <- ISIS[,c("perPos", "perNeg", "nous", "vous", "je", "ils", "il", "elle", "le", "Date")]
d <- melt(ISIS.lower, id.vars = "Date", variable.name = "series")
ggplot(d, aes(Date, value)) + geom_line(aes(colour = series)) + ggtitle("ISIS")
####################################
# John Piper
JohnPiper <- JohnPiper[,c("perPos", "perNeg", "PSJudge", "judgementFrac", "nous", "vous",
"je", "ils", "il", "elle", "le", "UniqueWordCount", "avgSD", "avgEVC", "Date", 'Score')]
JohnPiper.upper <- JohnPiper[,c("UniqueWordCount", "avgSD", "avgEVC", "Date", "PSJudge", "judgementFrac")]
d <- melt(JohnPiper.upper, id.vars = "Date", variable.name = "series")
ggplot(d, aes(Date, value)) + geom_line(aes(colour = series)) + ggtitle("John Piper")
JohnPiper.lower <- JohnPiper[,c("perPos", "perNeg", "nous", "vous", "je", "ils", "il", "elle", "le", "Date")]
d <- melt(JohnPiper.lower, id.vars = "Date", variable.name = "series")
ggplot(d, aes(Date, value)) + geom_line(aes(colour = series)) + ggtitle("John Piper")
####################################
# Mehr Baba
MehrBaba <- MehrBaba[,c("perPos", "perNeg", "PSJudge", "judgementFrac", "nous", "vous",
"je", "ils", "il", "elle", "le", "UniqueWordCount", "avgSD", "avgEVC", "Date", 'Score')]
MehrBaba.upper <- MehrBaba[,c("UniqueWordCount", "avgSD", "avgEVC", "Date", "PSJudge", "judgementFrac")]
d <- melt(MehrBaba.upper, id.vars = "Date", variable.name = "series")
ggplot(d, aes(Date, value)) + geom_line(aes(colour = series)) + ggtitle("Mehr Baba")
MehrBaba.lower <- MehrBaba[,c("perPos", "perNeg", "nous", "vous", "je", "ils", "il", "elle", "le", "Date")]
d <- melt(MehrBaba.lower, id.vars = "Date", variable.name = "series")
ggplot(d, aes(Date, value)) + geom_line(aes(colour = series)) + ggtitle("Mehr Baba")
####################################
# Sea Shepards
SeaShepherds <- SeaShepherds[,c("perPos", "perNeg", "PSJudge", "judgementFrac", "nous", "vous",
"je", "ils", "il", "elle", "le", "UniqueWordCount", "avgSD", "avgEVC", "Date", 'Score')]
SeaShepherds.upper <- SeaShepherds[,c("UniqueWordCount", "avgSD", "avgEVC", "Date", "PSJudge", "judgementFrac")]
d <- melt(SeaShepherds.upper, id.vars = "Date", variable.name = "series")
ggplot(d, aes(Date, value)) + geom_line(aes(colour = series)) + ggtitle("Sea Shepherds")
SeaShepherds.lower <- SeaShepherds[,c("perPos", "perNeg", "nous", "vous", "je", "ils", "il", "elle", "le", "Date")]
d <- melt(SeaShepherds.lower, id.vars = "Date", variable.name = "series")
ggplot(d, aes(Date, value)) + geom_line(aes(colour = series)) + ggtitle("SeaShepherds")
####################################
# Unitarian
Unitarian <- Unitarian[,c("perPos", "perNeg", "PSJudge", "judgementFrac", "nous", "vous",
"je", "ils", "il", "elle", "le", "UniqueWordCount", "avgSD", "avgEVC", "Date", 'Score')]
Unitarian.upper <- Unitarian[,c("UniqueWordCount", "avgSD", "avgEVC", "Date", "PSJudge", "judgementFrac")]
d <- melt(Unitarian.upper, id.vars = "Date", variable.name = "series")
ggplot(d, aes(Date, value)) + geom_line(aes(colour = series)) + ggtitle("Unitarian")
Unitarian.lower <- Unitarian[,c("perPos", "perNeg", "nous", "vous", "je", "ils", "il", "elle", "le", "Date")]
d <- melt(Unitarian.lower, id.vars = "Date", variable.name = "series")
ggplot(d, aes(Date, value)) + geom_line(aes(colour = series)) + ggtitle("Unitarian")
# Turn PDF graph collection off
dev.off()
