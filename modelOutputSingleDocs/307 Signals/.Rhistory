V = ts(VZ$VZ.Close)
plot(V, main = "Plot of Untransformed VZ Series")
LVT = diff(log(V))
plot(LVT, main = "Plot of Stationary VZ Series")
acf(LVT, main = "ACF Plot of Stationary VZ Series")
pacf(LVT, main = "PACF Plot of Stationary VZ Series")
# 2. Time Domain: fitting the ARMA Model
Box.test(LVT, type="Ljung")
# Answer:
# Box-Ljung test
# data:  LVT
# X-squared = 0.4519, df = 1, p-value = 0.5014
rr = arima(LVT, order = c(0,0,3), include.mean = TRUE)
rr
# Answer:
# Call:
# arima(x = LVT, order = c(0, 0, 3), include.mean = TRUE)
# Coefficients:
#           ma1      ma2      ma3  intercept
#       -0.0201  -0.0976  -0.0301      1e-04
# s.e.   0.0211   0.0214   0.0209      3e-04
# sigma^2 estimated as 0.000202:  log likelihood = 6341.29,  aic = -12672.58
res = rr$residuals
acf(res, main = "ACF Plot of Residuals of ARMA Model for VZ Series")
pacf(res, main = "PACF Plot of Residuals of ARMA Model for VZ Series")
W = res^2
acf(W, main = "ACF Plot of Residuals^2 of ARMA Model for VZ Series")
pacf(W, main = "PACF Plot of Residuals^2 of ARMA Model for VZ Series")
auto.arima(LVT, stationary = TRUE, seasonal = FALSE)
# Answer:
# Series: LVT
# ARIMA(0,0,3) with zero mean
# Coefficients:
#           ma1      ma2      ma3
#       -0.0200  -0.0976  -0.0301
# s.e.   0.0211   0.0214   0.0209
# sigma^2 estimated as 0.000202:  log likelihood=6341.23
# AIC=-12674.47   AICc=-12674.45   BIC=-12651.62
# 3. Time Domain: identifying an ARCH/GARCH model for the residuals
mm <- garchFit(formula = ~arma(0,3) + garch(1,3), data = res, trace = TRUE)
summary(mm)
resid = mm@residuals
library(car)
############################################################################
# Problem 4.2
# Consider the multiple regression model fit to the NFL team performance data in Problem 3.1.
x2 <- c(1985,2855,1737,2905,1666,2927,2341,2737,1414,1838,1480,2191,2229,2204,2140,
1730,2072,2929,2268,1983,1792,1606,1492,2835,2416,1638,2649,1503)
x7 <- c(59.7,55,65.6,61.4,66.1,61,66.1,58,57,58.9,67.5,57.2,58.8,58.6,59.2,54.4,
49.6,54.3,58.7,51.7,61.9,52.7,57.8,59.7,54.9,65.3,43.8,53.5)
x8 <- c(2205,2096,1847,1903,1457,1848,1564,1821,2577,2476,1984,1917,1761,1709,
1901,2288,2072,2861,2411,2289,2203,2592,2053,1979,2048,1786,2876,2560)
y <- c(10,11,11,13,10,11,10,11,4,2,7,10,9,9,6,5,5,5,6,4,3,3,4,10,6,8,2,0)
nfl.lm <- lm(y~x2+x7+x8)
# (a) Construct a normal probability plot of the residuals. Does there seem to be any
#     problem with the normality assumption?
qqnorm(nfl.lm$residuals)
qqline(nfl.lm$residuals)
# (b) Construct and interpret a plot of the residuals versus the predicted response.
plot(nfl.lm$fitted.values, nfl.lm$residuals)
abline(h = 0)
# (c) Construct plots of the residuals vs each of the regressor variables. Do these plots
#     imply that the regressor is correctly specified?
plot(x2, nfl.lm$residuals)
abline(h = 0)
plot(x7, nfl.lm$residuals)
abline(h = 0)
plot(x8, nfl.lm$residuals)
abline(h = 0)
# (d) Construct the partial regression plots for this model. Compare the plots with the
#     plots of residuals vs. regressors from part (c) above. Discuss the type of information
#     provided by these plots.
avPlots(nfl.lm)
install.packages("car")
install.packages("pbkrtests")
# installing/loading the package:
if(!require(installr)) {
install.packages("installr"); require(installr)} #load / install+load installr
# using the package:
updateR() # this will start the updating process of your R installation.  It will check for newer versions, and if one is available, will guide you through the decisions you'd need to make.
=12*15
12*15
library(genalg)
library(ggplot2)
install.packages("genalg")
library(genalg)
dataset <- data.frame(item = c("pocketknife", "beans", "potatoes", "onions",
"sleeping bag", "rope", "compass"), survivalpoints = c(10, 20, 15, 2, 30,
10, 30), weight = c(1, 5, 10, 1, 7, 5, 1))
weightlimit <- 20
chromosome = c(1, 0, 0, 1, 1, 0, 0)
dataset[chromosome == 1, ]
cat(chromosome %*% dataset$survivalpoints)
evalFunc <- function(x) {
current_solution_survivalpoints <- x %*% dataset$survivalpoints
current_solution_weight <- x %*% dataset$weight
if (current_solution_weight > weightlimit)
return(0) else return(-current_solution_survivalpoints)
}
iter = 100
GAmodel <- rbga.bin(size = 7, popSize = 200, iters = iter, mutationChance = 0.01,
elitism = T, evalFunc = evalFunc, verbose = TRUE)
cat(genalg:::summary.rbga(GAmodel))
solution = c(1, 1, 0, 1, 1, 1, 1)
dataset[solution == 1, ]
cat(paste(solution %*% dataset$survivalpoints, "/", sum(dataset$survivalpoints)))
require(genalg)
evaluate <- function(string=c()) {
returnVal = NA;
if (length(string) == 2) { # expecting a chromosome of length 2
returnVal = abs(string[1]-pi) + abs(string[2]-sqrt(50)); # when that's minimal, we've done
} else {                                                   # a good job
stop("Expecting a chromosome of length 2!");
}
returnVal
}
monitor <- function(obj) {
# plot the population
xlim = c(obj$stringMin[1], obj$stringMax[1]);
ylim = c(obj$stringMin[2], obj$stringMax[2]);
plot(obj$population, xlim=xlim, ylim=ylim,
xlab="pi", ylab="sqrt(50)");
}
rbga.results = rbga(stringMin=c(1, 1), stringMax=c(5, 10), popSize = 200, monitorFunc=monitor,
evalFunc=evaluate, verbose=TRUE, mutationChance=0.01)
plot(rbga.results)
plot(rbga.results, type="hist")
plot(rbga.results, type="vars")
setwd("~/Documents/Data Science/Machine Learning/Final Project")
library(ggplot2)
library(arules)
library(arulesViz)
test <- read.csv("test.csv") # 21.875% testing
train <- read.csv("train.csv") # 78.125% training set
df <- rbind(test, train) # 704 observations, 14 variables
df$steak_bin<-ifelse(df$Steak_cooked=='rare' | df$Steak_cooked=='medium rare', 1, 0)
rare <- df[df$steak_bin == 1,]
rare <- rare[,-15]
rarerules <- apriori(data = rare, parameter = list(support = 0.2, confidence = 0.5, minlen = 1))
inspect(sort(rarerules, by = "lift") [1:5])
rarerules.sorted <- sort(rarerules, by="lift")
raresubset.matrix <- is.subset(rarerules.sorted, rarerules.sorted)
raresubset.matrix[lower.tri(raresubset.matrix, diag=T)] <- NA
rareredundant <- colSums(raresubset.matrix, na.rm=T) >= 1
rarerules.pruned <- rarerules.sorted[!rareredundant]
inspect(sort(rarerules.pruned, by = "lift")[1:10]) # pruned support of 0.2, confidence of 0.5
well <- shots[df$steak_bin == 1,]
well <- df[df$steak_bin == 1,]
well <- well[,-15]
wellrules <- apriori(data = well, parameter = list(support = 0.2, confidence = 0.5, minlen = 1))
inspect(sort(wellrules, by = "lift") [1:5])
wellrules.sorted <- sort(wellrules, by="lift")
wellsubset.matrix <- is.subset(wellrules.sorted, wellrules.sorted)
wellsubset.matrix[lower.tri(wellsubset.matrix, diag=T)] <- NA
wellredundant <- colSums(wellsubset.matrix4, na.rm=T) >= 1
wellredundant <- colSums(wellsubset.matrix, na.rm=T) >= 1
wellrules.pruned <- wellrules.sorted[!wellredundant]
inspect(sort(wellrules.pruned, by = "lift")[1:10]) # pruned support of 0.2, confidence of 0.5
rarerules <- apriori(data = rare, parameter = list(support = 0.4, confidence = 0.8, minlen = 1))
inspect(sort(rarerules, by = "lift") [1:5])
rarerules.sorted <- sort(rarerules, by="lift")
raresubset.matrix <- is.subset(rarerules.sorted, rarerules.sorted)
raresubset.matrix[lower.tri(raresubset.matrix, diag=T)] <- NA
rareredundant <- colSums(raresubset.matrix, na.rm=T) >= 1
rarerules.pruned <- rarerules.sorted[!rareredundant]
inspect(sort(rarerules.pruned, by = "lift")[1:10]) # pruned support of 0.4, confidence of 0.8
well <- df[df$steak_bin == 1,]
well <- well[,-15]
wellrules <- apriori(data = well, parameter = list(support = 0.4, confidence = 0.8, minlen = 1))
inspect(sort(wellrules, by = "lift") [1:5])
wellrules.sorted <- sort(wellrules, by="lift")
wellsubset.matrix <- is.subset(wellrules.sorted, wellrules.sorted)
wellsubset.matrix[lower.tri(wellsubset.matrix, diag=T)] <- NA
wellredundant <- colSums(wellsubset.matrix, na.rm=T) >= 1
wellrules.pruned <- wellrules.sorted[!wellredundant]
inspect(sort(wellrules.pruned, by = "lift")[1:10]) # pruned support of 0.4, confidence of 0.8
plot(rarerules.pruned, method="graph", control=list(type="items"))
plot(wellrules.pruned, method="graph", control=list(type="items"))
plot(rules1.pruned, method="paracoord", control=list(reorder=TRUE)) # another type of visualization
myrules1 <- apriori(data = df, parameter = list(support = 0.6, confidence = 0.9, minlen = 1))
summary(myrules1)
inspect(sort(myrules1, by = "lift") [1:10]) # support of 0.6, confidence of 0.9
rules1.sorted <- sort(myrules1, by="lift")
df <- rbind(test, train) # 704 observations, 14 variables
myrules1 <- apriori(data = df, parameter = list(support = 0.6, confidence = 0.9, minlen = 1))
summary(myrules1)
inspect(sort(myrules1, by = "lift") [1:10]) # support of 0.6, confidence of 0.9
rules1.sorted <- sort(myrules1, by="lift")
subset.matrix1 <- is.subset(rules1.sorted, rules1.sorted)
subset.matrix1[lower.tri(subset.matrix1, diag=T)] <- NA
redundant1 <- colSums(subset.matrix1, na.rm=T) >= 1
rules1.pruned <- rules1.sorted[!redundant1]
myrules2 <- apriori(data = df, parameter = list(support = 0.2, confidence = 0.5, minlen = 1))
summary(myrules2)
inspect(sort(myrules2, by = "lift") [1:10]) # support of 0.2, confidence of 0.5
rules2.sorted <- sort(myrules2, by="lift")
subset.matrix2 <- is.subset(rules2.sorted, rules2.sorted)
subset.matrix2[lower.tri(subset.matrix2, diag=T)] <- NA
redundant2 <- colSums(subset.matrix2, na.rm=T) >= 1
rules2.pruned <- rules2.sorted[!redundant2]
myrules3 <- apriori(data = df, parameter = list(support = 0.1, confidence = 0.4, minlen = 1))
summary(myrules3)
inspect(sort(myrules3, by = "lift") [1:10]) # support of 0.1, confidence of 0.4
rules3.sorted <- sort(myrules3, by="lift")
subset.matrix3 <- is.subset(rules3.sorted, rules3.sorted)
subset.matrix3[lower.tri(subset.matrix3, diag=T)] <- NA
redundant3 <- colSums(subset.matrix3, na.rm=T) >= 1
rules3.pruned <- rules3.sorted[!redundant3]
df$steak_bin<-ifelse(df$Steak_cooked=='rare' | df$Steak_cooked=='medium rare', 1, 0)
rare <- df[df$steak_bin == 1,]
rare <- rare[,-15]
rarerules <- apriori(data = rare, parameter = list(support = 0.4, confidence = 0.8, minlen = 1))
inspect(sort(rarerules, by = "lift") [1:5])
rarerules.sorted <- sort(rarerules, by="lift")
raresubset.matrix <- is.subset(rarerules.sorted, rarerules.sorted)
raresubset.matrix[lower.tri(raresubset.matrix, diag=T)] <- NA
rareredundant <- colSums(raresubset.matrix, na.rm=T) >= 1
rarerules.pruned <- rarerules.sorted[!rareredundant]
well <- df[df$steak_bin == 1,]
well <- well[,-15]
wellrules <- apriori(data = well, parameter = list(support = 0.4, confidence = 0.8, minlen = 1))
inspect(sort(wellrules, by = "lift") [1:5])
wellrules.sorted <- sort(wellrules, by="lift")
wellsubset.matrix <- is.subset(wellrules.sorted, wellrules.sorted)
wellsubset.matrix[lower.tri(wellsubset.matrix, diag=T)] <- NA
wellredundant <- colSums(wellsubset.matrix, na.rm=T) >= 1
wellrules.pruned <- wellrules.sorted[!wellredundant]
setwd("~/Documents/Data Science/Statistical Consulting/Case Study 4")
setwd("~/Downloads")
options(java.parameters = "- Xmx1024m")
library(XLConnect)
wb <- loadWorkbook("Interns Scoring.xlsx")
library(xlsx)
wb <- read.xlsx("Interns Scoring.xlsx")
library(ggplot2)
data <- read.csv("~/Documents/Data Science/DataForGraphs.csv")
group <- data$Group
scored <- data$rank
setwd("~/Documents/Data Science/Capstone/DSI-Religion-2017/modelOutputSingleDocs/307 Signals")
signals <- read.csv(SingleDocSignals.csv)
signals <- read.csv("SingleDocSignals.csv")
View(signals)
library(readxl)
WBC <- read_excel("~/Downloads/Interns Scoring.xlsx", sheet = "WBC")
DorothyDay <- read_excel("~/Downloads/Interns Scoring.xlsx", sheet = "DorothyDay")
ISIS <- read_excel("~/Downloads/Interns Scoring.xlsx", sheet = "ISIS")
JohnPiper <- read_excel("~/Downloads/Interns Scoring.xlsx", sheet = "JohnPiper")
MehrBaba <- read_excel("~/Downloads/Interns Scoring.xlsx", sheet = "MehrBaba")
SeaShepherds <- read_excel("~/Downloads/Interns Scoring.xlsx", sheet = "SeaShepherds")
Unitarian <- read_excel("~/Downloads/Interns Scoring.xlsx", sheet = "Unitarian")
WBC <- WBC[,1:5]
DorothyDay <- DorothyDay[,1:5]
ISIS <- ISIS[,1:5]
JohnPiper <- JohnPiper[,1:5]
MehrBaba <- MehrBaba[,1:5]
SeaShepherds <- SeaShepherds[,1:5]
Unitarian <- Unitarian[,1:5]
WBC <- WBC[!is.na(WBC$Score),]
DorothyDay <- DorothyDay[!is.na(DorothyDay$Score),]
ISIS <- ISIS[!is.na(ISIS$Score),]
JohnPiper <- JohnPiper[!is.na(JohnPiper$Score),]
MehrBaba <- MehrBaba[!is.na(MehrBaba$Score),]
SeaShepherds <- SeaShepherds[!is.na(SeaShepherds$Score),]
Unitarian <- Unitarian[!is.na(Unitarian$Score),]
WBC <- WBC[!is.na(WBC$Date),]
DorothyDay <- DorothyDay[!is.na(DorothyDay$Date),]
ISIS <- ISIS[!is.na(ISIS$Date),]
JohnPiper <- JohnPiper[!is.na(JohnPiper$Date),]
MehrBaba <- MehrBaba[!is.na(MehrBaba$Date),]
SeaShepherds <- SeaShepherds[!is.na(SeaShepherds$Date),]
Unitarian <- Unitarian[!is.na(Unitarian$Date),]
WBC$Date <- as.Date(WBC$Date , format = "%m/%d/%y")
DorothyDay$Date <- as.Date(DorothyDay$Date , format = "%m/%d/%y")
ISIS$Date <- as.Date(ISIS$Date , format = "%m/%d/%y")
JohnPiper$Date <- as.Date(JohnPiper$Date , format = "%m/%d/%y")
MehrBaba$Date <- as.Date(MehrBaba$Date , format = "%m/%d/%y")
SeaShepherds$Date <- as.Date(SeaShepherds$Date , format = "%m/%d/%y")
Unitarian$Date <- as.Date(Unitarian$Date , format = "%m/%d/%y")
plot(WBC$Date, WBC$Score, main = "WBC", xlab = "Date", ylab = "Score", ylim = c(0,9))
plot(DorothyDay$Date, DorothyDay$Score, main = "DorothyDay", xlab = "Date", ylab = "Score", ylim = c(0,9))
plot(ISIS$Date, ISIS$Score, main = "ISIS", xlab = "Date", ylab = "Score", ylim = c(0,9))
plot(JohnPiper$Date, JohnPiper$Score, main = "JohnPiper", xlab = "Date", ylab = "Score", ylim = c(0,9))
plot(MehrBaba$Date, MehrBaba$Score, main = "MehrBaba", xlab = "Date", ylab = "Score", ylim = c(0,9))
plot(SeaShepherds$Date, SeaShepherds$Score, main = "SeaShepherds", xlab = "Date", ylab = "Score", ylim = c(0,9))
plot(Unitarian$Date, Unitarian$Score, main = "Unitarian", xlab = "Date", ylab = "Score", ylim = c(0,9))
View(DorothyDay)
View(ISIS)
View(JohnPiper)
View(MehrBaba)
View(SeaShepherds)
View(Unitarian)
View(WBC)
signals$Filename <- signals$groupId + ".txt"
signals$Filename <- paste(signals$groupId, ".txt", sep = "")
signals <- signals[,-1:3]
signals <- signals[-1]
signals <- signals[-1]
signals <- signals[-1]
signals <- read.csv("SingleDocSignals.csv")
df <- rbind(WBC, DorothyDay, ISIS, JohnPiper, MehrBaba, SeaShepherds, Unitarian)
View(Unitarian)
View(WBC)
View(SeaShepherds)
df <- rbind(WBC, DorothyDay)
df <- rbind(df, ISIS)
df <- rbind(df, JohnPiper)
df <- rbind(df, MehrBaba)
View(df)
View(MehrBaba)
MehrBaba[,1] <- "Group"
WBC <- read_excel("~/Downloads/Interns Scoring.xlsx", sheet = "WBC")
DorothyDay <- read_excel("~/Downloads/Interns Scoring.xlsx", sheet = "DorothyDay")
ISIS <- read_excel("~/Downloads/Interns Scoring.xlsx", sheet = "ISIS")
JohnPiper <- read_excel("~/Downloads/Interns Scoring.xlsx", sheet = "JohnPiper")
MehrBaba <- read_excel("~/Downloads/Interns Scoring.xlsx", sheet = "MehrBaba")
SeaShepherds <- read_excel("~/Downloads/Interns Scoring.xlsx", sheet = "SeaShepherds")
Unitarian <- read_excel("~/Downloads/Interns Scoring.xlsx", sheet = "Unitarian")
WBC <- WBC[,1:5]
DorothyDay <- DorothyDay[,1:5]
ISIS <- ISIS[,1:5]
JohnPiper <- JohnPiper[,1:5]
MehrBaba <- MehrBaba[,1:5]
SeaShepherds <- SeaShepherds[,1:5]
Unitarian <- Unitarian[,1:5]
WBC <- WBC[!is.na(WBC$Score),]
DorothyDay <- DorothyDay[!is.na(DorothyDay$Score),]
ISIS <- ISIS[!is.na(ISIS$Score),]
JohnPiper <- JohnPiper[!is.na(JohnPiper$Score),]
MehrBaba <- MehrBaba[!is.na(MehrBaba$Score),]
SeaShepherds <- SeaShepherds[!is.na(SeaShepherds$Score),]
Unitarian <- Unitarian[!is.na(Unitarian$Score),]
WBC <- WBC[!is.na(WBC$Date),]
DorothyDay <- DorothyDay[!is.na(DorothyDay$Date),]
ISIS <- ISIS[!is.na(ISIS$Date),]
JohnPiper <- JohnPiper[!is.na(JohnPiper$Date),]
MehrBaba <- MehrBaba[!is.na(MehrBaba$Date),]
SeaShepherds <- SeaShepherds[!is.na(SeaShepherds$Date),]
Unitarian <- Unitarian[!is.na(Unitarian$Date),]
WBC$Date <- as.Date(WBC$Date , format = "%m/%d/%y")
DorothyDay$Date <- as.Date(DorothyDay$Date , format = "%m/%d/%y")
ISIS$Date <- as.Date(ISIS$Date , format = "%m/%d/%y")
JohnPiper$Date <- as.Date(JohnPiper$Date , format = "%m/%d/%y")
MehrBaba$Date <- as.Date(MehrBaba$Date , format = "%m/%d/%y")
SeaShepherds$Date <- as.Date(SeaShepherds$Date , format = "%m/%d/%y")
Unitarian$Date <- as.Date(Unitarian$Date , format = "%m/%d/%y")
plot(WBC$Date, WBC$Score, main = "WBC", xlab = "Date", ylab = "Score", ylim = c(0,9))
plot(DorothyDay$Date, DorothyDay$Score, main = "DorothyDay", xlab = "Date", ylab = "Score", ylim = c(0,9))
plot(ISIS$Date, ISIS$Score, main = "ISIS", xlab = "Date", ylab = "Score", ylim = c(0,9))
plot(JohnPiper$Date, JohnPiper$Score, main = "JohnPiper", xlab = "Date", ylab = "Score", ylim = c(0,9))
plot(MehrBaba$Date, MehrBaba$Score, main = "MehrBaba", xlab = "Date", ylab = "Score", ylim = c(0,9))
plot(SeaShepherds$Date, SeaShepherds$Score, main = "SeaShepherds", xlab = "Date", ylab = "Score", ylim = c(0,9))
plot(Unitarian$Date, Unitarian$Score, main = "Unitarian", xlab = "Date", ylab = "Score", ylim = c(0,9))
setwd("~/Documents/Data Science/Capstone/DSI-Religion-2017/modelOutputSingleDocs/307 Signals")
signals <- read.csv("SingleDocSignals.csv")
signals$Filename <- paste(signals$groupId, ".txt", sep = "")
colnames(MehrBaba)[1] <- "Group"
df <- rbind(WBC, DorothyDay, ISIS, JohnPiper, MehrBaba, SeaShepherds, Unitarian)
View(df)
new.df <- merge(x = signals, y = df, by = "Filename", all.y = TRUE)
View(new.df)
new.df <- new.df[!is.na(new.df$Date),]
df <- new.df
mylist <- split(df, df$Group)
WBC <- as.data.frame(mylist$`Westboro Baptist Church`)
DorothyDay <- as.data.frame(mylist$`Dorothy Day`)
ISIS <- as.data.frame(mylist$ISIS)
JohnPiper <- as.data.frame(mylist$`John Piper`)
MehrBaba <- as.data.frame(mylist$`Mehr Baba`)
SeaShepherds <- as.data.frame(mylist$SeaShepherds)
Unitarian <- as.data.frame(mylist$Unitarian)
library(ggplot2)
library(reshape2)
ggplot(WBC, aes(Date, value, col = variable)) + geom_point() + stat_smooth()
d <- melt(WBC, id.vars="Date")
ggplot(WBC, aes(Date, value, col = variable)) + geom_point() + stat_smooth()
d <- melt(WBC, id.vars = "Date", variable.name = "variable")
ggplot(WBC, aes(Date, value)) + geom_line(aes(colour = variable))
df <- df[,c("Filename", "perPos", "perNeg", "PSJudge", "judgementFrac", "nous", "vous", "je", "ils", "il", "elle", "le", "UniqueWordCount", "avgSD", "avgEVC", "Group", "Date")]
mylist <- split(df, df$Group)
WBC <- as.data.frame(mylist$`Westboro Baptist Church`)
DorothyDay <- as.data.frame(mylist$`Dorothy Day`)
ISIS <- as.data.frame(mylist$ISIS)
JohnPiper <- as.data.frame(mylist$`John Piper`)
MehrBaba <- as.data.frame(mylist$`Mehr Baba`)
SeaShepherds <- as.data.frame(mylist$SeaShepherds)
Unitarian <- as.data.frame(mylist$Unitarian)
library(ggplot2)
library(reshape2)
df <- data.frame(time = 1:10,
a = cumsum(rnorm(10)),
b = cumsum(rnorm(10)),
c = cumsum(rnorm(10)))
df <- melt(df ,  id.vars = 'time', variable.name = 'series')
ggplot(df, aes(time,value)) + geom_line(aes(colour = series))
df <- new.df
df <- df[,c("Filename", "perPos", "perNeg", "PSJudge", "judgementFrac", "nous", "vous",
"je", "ils", "il", "elle", "le", "UniqueWordCount", "avgSD", "avgEVC",
"Group", "Date")]
mylist <- split(df, df$Group)
WBC <- as.data.frame(mylist$`Westboro Baptist Church`)
DorothyDay <- as.data.frame(mylist$`Dorothy Day`)
ISIS <- as.data.frame(mylist$ISIS)
JohnPiper <- as.data.frame(mylist$`John Piper`)
MehrBaba <- as.data.frame(mylist$`Mehr Baba`)
SeaShepherds <- as.data.frame(mylist$SeaShepherds)
Unitarian <- as.data.frame(mylist$Unitarian)
library(ggplot2)
library(reshape2)
d <- melt(WBC, id.vars = "Date", variable.name = "series")
ggplot(d, aes(Date, value)) + geom_line(aes(colour = series))
View(WBC)
WBC <- WBC[,c("perPos", "perNeg", "PSJudge", "judgementFrac", "nous", "vous",
"je", "ils", "il", "elle", "le", "UniqueWordCount", "avgSD", "avgEVC", "Date")]
d <- melt(WBC, id.vars = "Date", variable.name = "series")
ggplot(d, aes(Date, value)) + geom_line(aes(colour = series))
WBC.upper <- WBC[,c("UniqueWordCount", "avgSD", "avgEVC", "Date", "PSJudge", "judgementFrac")]
WBC.lower <- WBC[,c("perPos", "perNeg", "nous", "vous", "je", "ils", "il", "elle", "le", "Date")]
d <- melt(WBC.upper, id.vars = "Date", variable.name = "series")
ggplot(d, aes(Date, value)) + geom_line(aes(colour = series))
ggplot(d, aes(Date, value)) + geom_line(aes(colour = series)) + ggtitle("WBC")
d <- melt(WBC.lower, id.vars = "Date", variable.name = "series")
ggplot(d, aes(Date, value)) + geom_line(aes(colour = series)) + ggtitle("WBC")
WBC <- WBC[,c("perPos", "perNeg", "PSJudge", "judgementFrac", "nous", "vous",
"je", "ils", "il", "elle", "le", "UniqueWordCount", "avgSD", "avgEVC", "Date", 'Score')]
df <- new.df
df <- df[,c("Filename", "perPos", "perNeg", "PSJudge", "judgementFrac", "nous", "vous",
"je", "ils", "il", "elle", "le", "UniqueWordCount", "avgSD", "avgEVC",
"Group", "Date", 'Score')]
WBC <- WBC[,c("perPos", "perNeg", "PSJudge", "judgementFrac", "nous", "vous",
"je", "ils", "il", "elle", "le", "UniqueWordCount", "avgSD", "avgEVC", "Date", 'Score')]
mylist <- split(df, df$Group)
WBC <- as.data.frame(mylist$`Westboro Baptist Church`)
DorothyDay <- as.data.frame(mylist$`Dorothy Day`)
ISIS <- as.data.frame(mylist$ISIS)
JohnPiper <- as.data.frame(mylist$`John Piper`)
MehrBaba <- as.data.frame(mylist$`Mehr Baba`)
SeaShepherds <- as.data.frame(mylist$SeaShepherds)
Unitarian <- as.data.frame(mylist$Unitarian)
WBC <- WBC[,c("perPos", "perNeg", "PSJudge", "judgementFrac", "nous", "vous",
"je", "ils", "il", "elle", "le", "UniqueWordCount", "avgSD", "avgEVC", "Date", 'Score')]
WBC.upper <- WBC[,c("UniqueWordCount", "avgSD", "avgEVC", "Date", "PSJudge", "judgementFrac")]
d <- melt(WBC.upper, id.vars = "Date", variable.name = "series")
ggplot(d, aes(Date, value)) + geom_line(aes(colour = series)) + ggtitle("WBC") + geom_point(data = "WBC", aes(Date, Score))
as.numeric(WBC$Score)
is.numeric(WBC$Score)
ggplot(d, aes(Date, value)) + geom_line(aes(colour = series)) + ggtitle("WBC")
ggplot(NULL, aes(Date, value)) + geom_line(data = d, aes(colour = series)) + ggtitle("WBC") + geom_point(data = WBC, aes(Date, Score))
d <- melt(WBC.lower, id.vars = "Date", variable.name = "series")
ggplot(NULL, aes(Date, value)) + geom_line(data = d, aes(colour = series)) + ggtitle("WBC") + geom_point(data = WBC, aes(Date, Score))
par(mfrow = c(2, 1))
ggplot(d, aes(Date, value)) + geom_line(aes(colour = series)) + ggtitle("WBC")
WBC.lower <- WBC[,c("perPos", "perNeg", "nous", "vous", "je", "ils", "il", "elle", "le", "Date")]
d <- melt(WBC.lower, id.vars = "Date", variable.name = "series")
ggplot(d, aes(Date, value)) + geom_line(aes(colour = series)) + ggtitle("WBC")
par(mfrow = c(2,1))
ggplot(d, aes(Date, value)) + geom_line(aes(colour = series)) + ggtitle("WBC")
WBC <- WBC[,c("perPos", "perNeg", "PSJudge", "judgementFrac", "nous", "vous",
"je", "ils", "il", "elle", "le", "UniqueWordCount", "avgSD", "avgEVC", "Date", 'Score')]
WBC.upper <- WBC[,c("UniqueWordCount", "avgSD", "avgEVC", "Date", "PSJudge", "judgementFrac")]
d <- melt(WBC.upper, id.vars = "Date", variable.name = "series")
ggplot(d, aes(Date, value)) + geom_line(aes(colour = series)) + ggtitle("WBC")
WBC.lower <- WBC[,c("perPos", "perNeg", "nous", "vous", "je", "ils", "il", "elle", "le", "Date")]
d <- melt(WBC.lower, id.vars = "Date", variable.name = "series")
ggplot(d, aes(Date, value)) + geom_line(aes(colour = series)) + ggtitle("WBC")
DorothyDay <- DorothyDay[,c("perPos", "perNeg", "PSJudge", "judgementFrac", "nous", "vous",
"je", "ils", "il", "elle", "le", "UniqueWordCount", "avgSD", "avgEVC", "Date", 'Score')]
DorothyDay.upper <- DorothyDay[,c("UniqueWordCount", "avgSD", "avgEVC", "Date", "PSJudge", "judgementFrac")]
d <- melt(DorothyDay.upper, id.vars = "Date", variable.name = "series")
ggplot(d, aes(Date, value)) + geom_line(aes(colour = series)) + ggtitle("Dorothy Day")
DorothyDay.lower <- DorothyDay[,c("perPos", "perNeg", "nous", "vous", "je", "ils", "il", "elle", "le", "Date")]
d <- melt(DorothyDay.lower, id.vars = "Date", variable.name = "series")
ggplot(d, aes(Date, value)) + geom_line(aes(colour = series)) + ggtitle("Dorothy Day")
ISIS <- ISIS[,c("perPos", "perNeg", "PSJudge", "judgementFrac", "nous", "vous",
"je", "ils", "il", "elle", "le", "UniqueWordCount", "avgSD", "avgEVC", "Date", 'Score')]
ISIS.upper <- ISIS[,c("UniqueWordCount", "avgSD", "avgEVC", "Date", "PSJudge", "judgementFrac")]
d <- melt(ISIS.upper, id.vars = "Date", variable.name = "series")
ggplot(d, aes(Date, value)) + geom_line(aes(colour = series)) + ggtitle("ISIS")
ISIS.lower <- ISIS[,c("perPos", "perNeg", "nous", "vous", "je", "ils", "il", "elle", "le", "Date")]
d <- melt(ISIS.lower, id.vars = "Date", variable.name = "series")
ggplot(d, aes(Date, value)) + geom_line(aes(colour = series)) + ggtitle("ISIS")
JohnPiper <- JohnPiper[,c("perPos", "perNeg", "PSJudge", "judgementFrac", "nous", "vous",
"je", "ils", "il", "elle", "le", "UniqueWordCount", "avgSD", "avgEVC", "Date", 'Score')]
JohnPiper.upper <- JohnPiper[,c("UniqueWordCount", "avgSD", "avgEVC", "Date", "PSJudge", "judgementFrac")]
d <- melt(JohnPiper.upper, id.vars = "Date", variable.name = "series")
ggplot(d, aes(Date, value)) + geom_line(aes(colour = series)) + ggtitle("John Piper")
JohnPiper.lower <- JohnPiper[,c("perPos", "perNeg", "nous", "vous", "je", "ils", "il", "elle", "le", "Date")]
d <- melt(JohnPiper.lower, id.vars = "Date", variable.name = "series")
ggplot(d, aes(Date, value)) + geom_line(aes(colour = series)) + ggtitle("John Piper")
MehrBaba <- MehrBaba[,c("perPos", "perNeg", "PSJudge", "judgementFrac", "nous", "vous",
"je", "ils", "il", "elle", "le", "UniqueWordCount", "avgSD", "avgEVC", "Date", 'Score')]
MehrBaba.upper <- MehrBaba[,c("UniqueWordCount", "avgSD", "avgEVC", "Date", "PSJudge", "judgementFrac")]
d <- melt(MehrBaba.upper, id.vars = "Date", variable.name = "series")
ggplot(d, aes(Date, value)) + geom_line(aes(colour = series)) + ggtitle("Mehr Baba")
MehrBaba.lower <- MehrBaba[,c("perPos", "perNeg", "nous", "vous", "je", "ils", "il", "elle", "le", "Date")]
d <- melt(MehrBaba.lower, id.vars = "Date", variable.name = "series")
ggplot(d, aes(Date, value)) + geom_line(aes(colour = series)) + ggtitle("Mehr Baba")
SeaShepherds <- SeaShepherds[,c("perPos", "perNeg", "PSJudge", "judgementFrac", "nous", "vous",
"je", "ils", "il", "elle", "le", "UniqueWordCount", "avgSD", "avgEVC", "Date", 'Score')]
SeaShepherds.upper <- SeaShepherds[,c("UniqueWordCount", "avgSD", "avgEVC", "Date", "PSJudge", "judgementFrac")]
d <- melt(SeaShepherds.upper, id.vars = "Date", variable.name = "series")
ggplot(d, aes(Date, value)) + geom_line(aes(colour = series)) + ggtitle("Sea Shepherds")
SeaShepherds.lower <- SeaShepherds[,c("perPos", "perNeg", "nous", "vous", "je", "ils", "il", "elle", "le", "Date")]
d <- melt(SeaShepherds.lower, id.vars = "Date", variable.name = "series")
ggplot(d, aes(Date, value)) + geom_line(aes(colour = series)) + ggtitle("SeaShepherds")
Unitarian <- Unitarian[,c("perPos", "perNeg", "PSJudge", "judgementFrac", "nous", "vous",
"je", "ils", "il", "elle", "le", "UniqueWordCount", "avgSD", "avgEVC", "Date", 'Score')]
Unitarian.upper <- Unitarian[,c("UniqueWordCount", "avgSD", "avgEVC", "Date", "PSJudge", "judgementFrac")]
d <- melt(Unitarian.upper, id.vars = "Date", variable.name = "series")
ggplot(d, aes(Date, value)) + geom_line(aes(colour = series)) + ggtitle("Unitarian")
Unitarian.lower <- Unitarian[,c("perPos", "perNeg", "nous", "vous", "je", "ils", "il", "elle", "le", "Date")]
d <- melt(Unitarian.lower, id.vars = "Date", variable.name = "series")
ggplot(d, aes(Date, value)) + geom_line(aes(colour = series)) + ggtitle("Unitarian")
