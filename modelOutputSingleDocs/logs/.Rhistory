plot(D)
LDT = diff(log(D))
plot(LDT)
acf(LDT)
pacf(LDT)
# 2. Time Domain: fitting the ARMA Model
Box.test(LDT, type="Ljung")
rr = arima(LDT, order = c(0,0,0), include.mean = TRUE)
rr
res = rr$residuals
res = rr$residuals
acf(res)
pacf(res)
W = res^2
acf(W)
pacf(W)
auto.arima(LDT, stationary = TRUE, seasonal = FALSE)
mm <- garchFit(formula = ~arma(0,0) + garch(1,0), data = res, trace = TRUE)
summary(mm)
resid = mm@residuals
resid = ts(resid)
plot(resid)
V = resid^2
acf(V)
pacf(V)
# 4. Frequency Domain: Smoothing the periodogram to determine periodicities
m2 = round(sqrt(length(D)))
length(D)
m2
spec.pgram(LDT, spans=c(95,95), taper = 0, log="no")
V = ts(VZ$VZ.Close)
plot(V)
LVT = diff(log(V))
plot(LVT)
acf(LVT)
pacf(LVT)
# 2. Time Domain: fitting the ARMA Model
Box.test(LVT, type="Ljung")
rr = arima(LVT, order = c(0,0,3), include.mean = TRUE)
rr
res = rr$residuals
acf(res)
pacf(res)
W = res^2
acf(W)
pacf(W)
auto.arima(LVT, stationary = TRUE, seasonal = FALSE)
mm <- garchFit(formula = ~arma(0,3) + garch(1,3), data = res, trace = TRUE)
summary(mm)
resid = mm@residuals
resid = ts(resid)
plot(resid)
V = resid^2
acf(V)
pacf(V)
# 4. Frequency Domain: Smoothing the periodogram to determine periodicities
m3 = round(sqrt(length(V)))
length(V)
m3
spec.pgram(LVT, spans=c(95,95), taper = 0, log="no")
dev.off()
# 12.05.15
# STAT 3559 - Exam 2
# Author: Samantha Garofalo (smg7un)
# Problems 7-9
################################################################################
library(quantmod)
library(fGarch)
library(stats)
library(forecast)
load("/Users/samanthagarofalo/Downloads/Stat3559_Exam2Data_113015.RData")
pdf(file="Exam2_Graphs.pdf", width=6, height=6)
################################################################################
# 1. Determining if process is stationary
CT = ts(CAT$CAT.Close)
plot(CT, main = "Plot of Untransformed CAT Series")
LCT = diff(log(CT))
plot(LCT, main = "Plot of Stationary CAT Series")
acf(LCT, main = "ACF Plot of Stationary CAT Series")
pacf(LCT, main = "PACF Plot of Stationary CAT Series")
# 2. Time Domain: fitting the ARMA Model
Box.test(LCT, type="Ljung")
# Answer:
# Box-Ljung test
# data:  LCT
# X-squared = 0.011928, df = 1, p-value = 0.913
rr = arima(LCT, order = c(0,0,0), include.mean = TRUE)
rr
# Answer:
# Call:
#   arima(x = LCT, order = c(0, 0, 0), include.mean = TRUE)
# Coefficients:
#       intercept
#           1e-04
# s.e.      5e-04
# sigma^2 estimated as 0.0004556:  log likelihood = 5431.52,  aic = -10859.04
res = rr$residuals
acf(res, main = "ACF Plot of Residuals of ARMA Model for CAT Series")
pacf(res, main = "PACF Plot of Residuals of ARMA Model for CAT Series")
W = res^2
acf(W, main = "ACF Plot of Residuals^2 of ARMA Model for CAT Series")
pacf(W, main = "PACF Plot of Residuals^2 of ARMA Model for CAT Series")
auto.arima(LCT, stationary = TRUE, seasonal = FALSE)
# Answer:
# Series: LCT
# ARIMA(0,0,0) with non-zero mean
# Coefficients:
#       intercept
#           1e-04
# s.e.      5e-04
# sigma^2 estimated as 0.0004556:  log likelihood=5431.52
# AIC=-10859.04   AICc=-10859.04   BIC=-10847.62
# 3. Time Domain: identifying an ARCH/GARCH model for the residuals
mm <- garchFit(formula = ~arma(0,3) + garch(1,0), data = res, trace = TRUE)
summary(mm)
resid = mm@residuals
resid = ts(resid)
plot(resid, main = "Plot of Residuals of GARCH Model for CAT Series")
V = resid^2
acf(V, main = "ACF Plot of Residuals^2 of GARCH Model for CAT Series")
pacf(V, main = "PACF Plot of Residuals^2 of GARCH Model for CAT Series")
# 4. Frequency Domain: Smoothing the periodogram to determine periodicities
m1 = round(sqrt(length(CT)))
length(CT)
# Answer:
# [1] 2238
m1
# Answer:
# [1] 47
spec.pgram(LCT, spans=c(95,95), taper = 0, log="no", main = "Smoothed Periodagram of CAT Series")
################################################################################
# 1. Determining if process is stationary
D = ts(DD$DD.Close)
plot(D, main = "Plot of Untransformed DD Series")
LDT = diff(log(D))
plot(LDT, main = "Plot of Stationary DD Series")
acf(LDT, main = "ACF Plot of Stationary DD Series")
pacf(LDT, main = "PACF Plot of Stationary DD Series")
# 2. Time Domain: fitting the ARMA Model
Box.test(LDT, type="Ljung")
# Answer:
# Box-Ljung test
# data:  LDT
# X-squared = 2.2034, df = 1, p-value = 0.1377
rr = arima(LDT, order = c(0,0,0), include.mean = TRUE)
rr
# Answer:
# Call:
# arima(x = LDT, order = c(0, 0, 0), include.mean = TRUE)
# Coefficients:
#       intercept
#           1e-04
# s.e.      4e-04
# sigma^2 estimated as 0.0003497:  log likelihood = 5727.32,  aic = -11450.65
res = rr$residuals
acf(res, main = "ACF Plot of Residuals of ARMA Model for DD Series")
pacf(res, main = "PACF Plot of Residuals of ARMA Model for DD Series")
W = res^2
acf(W, main = "ACF Plot of Residuals^2 of ARMA Model for DD Series")
pacf(W, main = "PACF Plot of Residuals^2 of ARMA Model for DD Series")
auto.arima(LDT, stationary = TRUE, seasonal = FALSE)
# Answer:
# Series: LDT
# ARIMA(0,0,0) with non-zero mean
# Coefficients:
#       intercept
#           1e-04
# s.e.      4e-04
# sigma^2 estimated as 0.0003497:  log likelihood=5727.32
# AIC=-11450.65   AICc=-11450.64   BIC=-11439.22
# 3. Time Domain: identifying an ARCH/GARCH model for the residuals
mm <- garchFit(formula = ~arma(0,0) + garch(1,0), data = res, trace = TRUE)
summary(mm)
resid = mm@residuals
resid = ts(resid)
plot(resid, main = "Plot of Residuals of GARCH Model for DD Series")
V = resid^2
acf(V, main = "ACF Plot of Residuals^2 of GARCH Model for DD Series")
pacf(V, main = "PACF Plot of Residuals^2 of GARCH Model for DD Series")
# 4. Frequency Domain: Smoothing the periodogram to determine periodicities
m2 = round(sqrt(length(D)))
length(D)
# Answer:
# [1] 2238
m2
# Answer:
# [1] 47
spec.pgram(LDT, spans=c(95,95), taper = 0, log="no", main = "Smoothed Periodagram of DD Series")
################################################################################
# 1. Determining if process is stationary
V = ts(VZ$VZ.Close)
plot(V, main = "Plot of Untransformed VZ Series")
LVT = diff(log(V))
plot(LVT, main = "Plot of Stationary VZ Series")
acf(LVT, main = "ACF Plot of Stationary VZ Series")
pacf(LVT, main = "PACF Plot of Stationary VZ Series")
# 2. Time Domain: fitting the ARMA Model
Box.test(LVT, type="Ljung")
# Answer:
# Box-Ljung test
# data:  LVT
# X-squared = 0.4519, df = 1, p-value = 0.5014
rr = arima(LVT, order = c(0,0,3), include.mean = TRUE)
rr
# Answer:
# Call:
# arima(x = LVT, order = c(0, 0, 3), include.mean = TRUE)
# Coefficients:
#           ma1      ma2      ma3  intercept
#       -0.0201  -0.0976  -0.0301      1e-04
# s.e.   0.0211   0.0214   0.0209      3e-04
# sigma^2 estimated as 0.000202:  log likelihood = 6341.29,  aic = -12672.58
res = rr$residuals
acf(res, main = "ACF Plot of Residuals of ARMA Model for VZ Series")
pacf(res, main = "PACF Plot of Residuals of ARMA Model for VZ Series")
W = res^2
acf(W, main = "ACF Plot of Residuals^2 of ARMA Model for VZ Series")
pacf(W, main = "PACF Plot of Residuals^2 of ARMA Model for VZ Series")
auto.arima(LVT, stationary = TRUE, seasonal = FALSE)
# Answer:
# Series: LVT
# ARIMA(0,0,3) with zero mean
# Coefficients:
#           ma1      ma2      ma3
#       -0.0200  -0.0976  -0.0301
# s.e.   0.0211   0.0214   0.0209
# sigma^2 estimated as 0.000202:  log likelihood=6341.23
# AIC=-12674.47   AICc=-12674.45   BIC=-12651.62
# 3. Time Domain: identifying an ARCH/GARCH model for the residuals
mm <- garchFit(formula = ~arma(0,3) + garch(1,3), data = res, trace = TRUE)
summary(mm)
resid = mm@residuals
resid = ts(resid)
plot(resid, main = "Plot of Residuals of GARCH Model for VZ Series")
V = resid^2
acf(V, main = "ACF Plot of Residuals^2 of GARCH Model for VZ Series")
pacf(V, main = "PACF Plot of Residuals^2 of GARCH Model for VZ Series")
# 4. Frequency Domain: Smoothing the periodogram to determine periodicities
m3 = round(sqrt(length(V)))
length(V)
# Answer:
# [1] 2237
m3
# Answer:
# [1] 47
spec.pgram(LVT, spans=c(95,95), taper = 0, log="no", main = "Periodagram of VZ Series")
dev.off()
CT = ts(CAT$CAT.Close)
plot(CT, main = "Plot of Untransformed CAT Series")
LCT = diff(log(CT))
plot(LCT, main = "Plot of Stationary CAT Series")
acf(LCT, main = "ACF Plot of Stationary CAT Series")
pacf(LCT, main = "PACF Plot of Stationary CAT Series")
# 2. Time Domain: fitting the ARMA Model
Box.test(LCT, type="Ljung")
# Answer:
# Box-Ljung test
# data:  LCT
# X-squared = 0.011928, df = 1, p-value = 0.913
rr = arima(LCT, order = c(0,0,0), include.mean = TRUE)
rr
# Answer:
# Call:
#   arima(x = LCT, order = c(0, 0, 0), include.mean = TRUE)
# Coefficients:
#       intercept
#           1e-04
# s.e.      5e-04
# sigma^2 estimated as 0.0004556:  log likelihood = 5431.52,  aic = -10859.04
res = rr$residuals
acf(res, main = "ACF Plot of Residuals of ARMA Model for CAT Series")
pacf(res, main = "PACF Plot of Residuals of ARMA Model for CAT Series")
W = res^2
acf(W, main = "ACF Plot of Residuals^2 of ARMA Model for CAT Series")
pacf(W, main = "PACF Plot of Residuals^2 of ARMA Model for CAT Series")
auto.arima(LCT, stationary = TRUE, seasonal = FALSE)
# Answer:
# Series: LCT
# ARIMA(0,0,0) with non-zero mean
# Coefficients:
#       intercept
#           1e-04
# s.e.      5e-04
# sigma^2 estimated as 0.0004556:  log likelihood=5431.52
# AIC=-10859.04   AICc=-10859.04   BIC=-10847.62
# 3. Time Domain: identifying an ARCH/GARCH model for the residuals
mm <- garchFit(formula = ~arma(0,3) + garch(1,0), data = res, trace = TRUE)
summary(mm)
resid = mm@residuals
resid = ts(resid)
plot(resid, main = "Plot of Residuals of GARCH Model for CAT Series")
V = resid^2
acf(V, main = "ACF Plot of Residuals^2 of GARCH Model for CAT Series")
pacf(V, main = "PACF Plot of Residuals^2 of GARCH Model for CAT Series")
# 4. Frequency Domain: Smoothing the periodogram to determine periodicities
m1 = round(sqrt(length(CT)))
D = ts(DD$DD.Close)
plot(D, main = "Plot of Untransformed DD Series")
LDT = diff(log(D))
plot(LDT, main = "Plot of Stationary DD Series")
acf(LDT, main = "ACF Plot of Stationary DD Series")
pacf(LDT, main = "PACF Plot of Stationary DD Series")
# 2. Time Domain: fitting the ARMA Model
Box.test(LDT, type="Ljung")
# Answer:
# Box-Ljung test
# data:  LDT
# X-squared = 2.2034, df = 1, p-value = 0.1377
rr = arima(LDT, order = c(0,0,0), include.mean = TRUE)
rr
# Answer:
# Call:
# arima(x = LDT, order = c(0, 0, 0), include.mean = TRUE)
# Coefficients:
#       intercept
#           1e-04
# s.e.      4e-04
# sigma^2 estimated as 0.0003497:  log likelihood = 5727.32,  aic = -11450.65
res = rr$residuals
acf(res, main = "ACF Plot of Residuals of ARMA Model for DD Series")
pacf(res, main = "PACF Plot of Residuals of ARMA Model for DD Series")
W = res^2
acf(W, main = "ACF Plot of Residuals^2 of ARMA Model for DD Series")
pacf(W, main = "PACF Plot of Residuals^2 of ARMA Model for DD Series")
auto.arima(LDT, stationary = TRUE, seasonal = FALSE)
# Answer:
# Series: LDT
# ARIMA(0,0,0) with non-zero mean
# Coefficients:
#       intercept
#           1e-04
# s.e.      4e-04
# sigma^2 estimated as 0.0003497:  log likelihood=5727.32
# AIC=-11450.65   AICc=-11450.64   BIC=-11439.22
# 3. Time Domain: identifying an ARCH/GARCH model for the residuals
mm <- garchFit(formula = ~arma(0,0) + garch(1,0), data = res, trace = TRUE)
summary(mm)
resid = mm@residuals
resid = ts(resid)
plot(resid, main = "Plot of Residuals of GARCH Model for DD Series")
V = resid^2
acf(V, main = "ACF Plot of Residuals^2 of GARCH Model for DD Series")
pacf(V, main = "PACF Plot of Residuals^2 of GARCH Model for DD Series")
# 4. Frequency Domain: Smoothing the periodogram to determine periodicities
m2 = round(sqrt(length(D)))
V = ts(VZ$VZ.Close)
plot(V, main = "Plot of Untransformed VZ Series")
LVT = diff(log(V))
plot(LVT, main = "Plot of Stationary VZ Series")
acf(LVT, main = "ACF Plot of Stationary VZ Series")
pacf(LVT, main = "PACF Plot of Stationary VZ Series")
# 2. Time Domain: fitting the ARMA Model
Box.test(LVT, type="Ljung")
# Answer:
# Box-Ljung test
# data:  LVT
# X-squared = 0.4519, df = 1, p-value = 0.5014
rr = arima(LVT, order = c(0,0,3), include.mean = TRUE)
rr
# Answer:
# Call:
# arima(x = LVT, order = c(0, 0, 3), include.mean = TRUE)
# Coefficients:
#           ma1      ma2      ma3  intercept
#       -0.0201  -0.0976  -0.0301      1e-04
# s.e.   0.0211   0.0214   0.0209      3e-04
# sigma^2 estimated as 0.000202:  log likelihood = 6341.29,  aic = -12672.58
res = rr$residuals
acf(res, main = "ACF Plot of Residuals of ARMA Model for VZ Series")
pacf(res, main = "PACF Plot of Residuals of ARMA Model for VZ Series")
W = res^2
acf(W, main = "ACF Plot of Residuals^2 of ARMA Model for VZ Series")
pacf(W, main = "PACF Plot of Residuals^2 of ARMA Model for VZ Series")
auto.arima(LVT, stationary = TRUE, seasonal = FALSE)
# Answer:
# Series: LVT
# ARIMA(0,0,3) with zero mean
# Coefficients:
#           ma1      ma2      ma3
#       -0.0200  -0.0976  -0.0301
# s.e.   0.0211   0.0214   0.0209
# sigma^2 estimated as 0.000202:  log likelihood=6341.23
# AIC=-12674.47   AICc=-12674.45   BIC=-12651.62
# 3. Time Domain: identifying an ARCH/GARCH model for the residuals
mm <- garchFit(formula = ~arma(0,3) + garch(1,3), data = res, trace = TRUE)
summary(mm)
resid = mm@residuals
library(car)
############################################################################
# Problem 4.2
# Consider the multiple regression model fit to the NFL team performance data in Problem 3.1.
x2 <- c(1985,2855,1737,2905,1666,2927,2341,2737,1414,1838,1480,2191,2229,2204,2140,
1730,2072,2929,2268,1983,1792,1606,1492,2835,2416,1638,2649,1503)
x7 <- c(59.7,55,65.6,61.4,66.1,61,66.1,58,57,58.9,67.5,57.2,58.8,58.6,59.2,54.4,
49.6,54.3,58.7,51.7,61.9,52.7,57.8,59.7,54.9,65.3,43.8,53.5)
x8 <- c(2205,2096,1847,1903,1457,1848,1564,1821,2577,2476,1984,1917,1761,1709,
1901,2288,2072,2861,2411,2289,2203,2592,2053,1979,2048,1786,2876,2560)
y <- c(10,11,11,13,10,11,10,11,4,2,7,10,9,9,6,5,5,5,6,4,3,3,4,10,6,8,2,0)
nfl.lm <- lm(y~x2+x7+x8)
# (a) Construct a normal probability plot of the residuals. Does there seem to be any
#     problem with the normality assumption?
qqnorm(nfl.lm$residuals)
qqline(nfl.lm$residuals)
# (b) Construct and interpret a plot of the residuals versus the predicted response.
plot(nfl.lm$fitted.values, nfl.lm$residuals)
abline(h = 0)
# (c) Construct plots of the residuals vs each of the regressor variables. Do these plots
#     imply that the regressor is correctly specified?
plot(x2, nfl.lm$residuals)
abline(h = 0)
plot(x7, nfl.lm$residuals)
abline(h = 0)
plot(x8, nfl.lm$residuals)
abline(h = 0)
# (d) Construct the partial regression plots for this model. Compare the plots with the
#     plots of residuals vs. regressors from part (c) above. Discuss the type of information
#     provided by these plots.
avPlots(nfl.lm)
install.packages("car")
install.packages("pbkrtests")
# installing/loading the package:
if(!require(installr)) {
install.packages("installr"); require(installr)} #load / install+load installr
# using the package:
updateR() # this will start the updating process of your R installation.  It will check for newer versions, and if one is available, will guide you through the decisions you'd need to make.
=12*15
12*15
install.packages('rJava', type='source')
dyn.load('/Library/Java/JavaVirtualMachines/jdk1.8.0_31.jdk/Contents/Home/jre/lib/server/libjvm.dylib')
dyn.load('/Library/Java/JavaVirtualMachines/jdk1.8.0_60.jdk/Contents/Home/jre/lib/server/libjvm.dylib')
jdk1.8.0_66.jdk
setwd("~/Documents/Data Science/Capstone/DSI-Religion-2017/modelOutputSingleDocs/logs")
library(ggplot2)
library(gridExtra)
accuracy <- function(df, returnDF = F) {
RFscores <- logical(nrow(df))
SVMscores <- logical(nrow(df))
for (i in 1:nrow(df)) {
#RFscores[i] <- df$rank[i] >= (df$rfPred[i] - .5) & df$rank[i] <= (df$rfPred[i] + .5)
#SVMscores[i] <- df$rank[i] >= (df$svmPred[i] - .5) & df$rank[i] <= (df$svmPred[i] + .5)
RFscores[i] <- abs(df$rank[i] - df$rfPred[i]) <= 1
SVMscores[i] <- abs(df$rank[i] - df$svmPred[i]) <= 1
}
scores <- c((sum(RFscores)/length(RFscores)), (sum(SVMscores)/length(SVMscores)))
# return data frame
if (returnDF == T) {
print(scores)
data.frame(df$groupId, RFscores, SVMscores)
} else {
print(scores)
}
}
idfDF <- read.csv('./modelOutput/modelPredictions-coco_3_cv_3_netAng_30_sc_0-NQRDMF.csv', stringsAsFactors = F)
idfDF <- read.csv('./modelOutput/logs/modelPredictions-coco_3_cv_3_netAng_30_sc_0-NQRDMF.csv', stringsAsFactors = F)
perf1 <- read.csv('./modelOutput/modelPredictions-coco_3_cv_3_netAng_30_sc_0-RCEVQJ.csv')
data <- read.csv("~/Documents/Data Science/DataForGraphs.csv")
View(data)
group <- data$Group
scored <- data$rank
predictions <- data$rfClassPred
p <- ggplot(data, aes(x = factor(group), scored))
p + geom_boxplot()
p <- ggplot(data, aes(x = factor(group), scored, colour = group))
p + geom_boxplot()
q <- ggplot(data, aes(x = factor(group), predictions, colour = group))
q + geom_boxplot()
data <- transform(data, group = reorder(group, scored))
p <- ggplot(data, aes(x = factor(group), y = scored, colour = group))
p + geom_boxplot()
q <- ggplot(data, aes(x = factor(group), y = predictions, colour = group))
q + geom_boxplot()
p <- ggplot(data, aes(x = factor(group), y = scored, colour = group))
p + geom_boxplot()
p <- ggplot(data, aes(x = factor(group), y = scored, colour = scored))
p + geom_boxplot()
p <- ggplot(data, aes(x = factor(group), y = scored, colour = group))
p + geom_boxplot()
q <- ggplot(data, aes(x = factor(group), y = predictions, colour = group))
q + geom_boxplot()
data <- transform(data, group = reorder(group, predictions))
q <- ggplot(data, aes(x = factor(group), y = predictions, colour = group))
q + geom_boxplot()
p <- ggplot(data, aes(x = factor(group), y = scored, colour = group))
p + geom_boxplot()
r <- ggplot(data, aes(x = factor(scored), y = predictions, colour = scored))
r + geom_boxplot()
r <- ggplot(data, aes(x = factor(scored), y = data$Difference, colour = scored))
r + geom_boxplot()
r <- ggplot(data, aes(x = factor(scored), y = data$Difference)
r + geom_boxplot()
r <- ggplot(data, aes(x = factor(scored), y = data$Difference))
r + geom_boxplot()
r <- ggplot(data, aes(x = factor(scored), y = data$Difference, colour = group))
r + geom_boxplot()
q <- ggplot(data, aes(x = factor(scored), y = data$Difference))
q + geom_boxplot()
s <- ggplot(data, aes(x = factor(scored), y = predictions, colour = scored))
s + geom_boxplot()
s <- ggplot(data, aes(x = factor(scored), y = predictions, colour = scored))
s + geom_boxplot()
t <- ggplot(data, aes(x = factor(scored), y = predictions, colour = group))
t + geom_boxplot()
t <- ggplot(data, aes(x = factor(group), y = predictions, colour = scored))
t + geom_boxplot()
t <- ggplot(data, aes(x = factor(scored), y = predictions, colour = group))
t + geom_boxplot()
View(data)
data <- transform(data, group = reorder(group, scored))
p <- ggplot(data, aes(x = factor(group), y = scored, colour = group))
p + geom_boxplot()
group
levels(group)
