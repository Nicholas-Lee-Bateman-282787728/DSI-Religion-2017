sqrt(1523) * 1.5
n <- 1523
sqrt(n) * 1.5
n / 58.53845
plotBayes <- function(shuffled, color = "test") {
n <- length(shuffled)
#assemble data frame
# nx <- ceiling(n * .04)
# ny <- ceiling(1/.04)
nx <- ceiling(sqrt(n) * 1.5)
ny <- ceiling(n / nx)
rows <- rep(seq(1:nx), ny)
cols <- numeric()
for (i in seq(1:ny)) {
cols <- c(cols, rep(i,nx))
}
# create data frame, add NA for blank spaces
data <- data.frame(result = c(rep(NA, length(rows) - length(shuffled)), shuffled),
x = rows, y = cols)
# add truth column
data$truth = ifelse(data$result == "FN" | data$result == "TP", T, F)
# add test column
data$test = ifelse(data$result == "FP" | data$result == "TP", "Positive", "Negative")
#plot
if (color == "test") {
ggplot(data, aes(x=x, y=y, colour=test)) + geom_point(aes(shape = result, size=2))
} else if (color == "truth") {
ggplot(data, aes(x=x, y=y, colour=truth)) + geom_point(aes(shape = result, size=2))
} else {
print("$$$$$$$ INVALID COLOR ARGUMENT $$$$ using 'test' $$$$$$$$$$")
ggplot(data, aes(x=x, y=y, colour=test)) + geom_point(aes(shape = result, size=2))
}
}
# Breast Cancer, Silver p. 246
# shuffled = shuffleBayesRates(TP = 0.011,
#              FP = 0.099,
#              TN = 0.887,
#              FN = 0.003,
#              n = 1523)
shuffled = shuffleBayesProbs(x = 0.014,
y = 0.7857143,
z = 0.1004057,
n = 1000)
#shuffled[shuffled=="TP" | shuffled == "FN"]
plotBayes(shuffled)
plotBayes(shuffled[shuffled=="TP" | shuffled == "FN"])
sqrt(1000)
40 / sqrt(1000)
sqrt(1000) * 1.264911
ceiling(sqrt(1000) * 40 /sqrt(1000))
ceiling(sqrt(1500) * 40 /sqrt(1000))
n <- 1000
nx <- ceiling(sqrt(n) * 40 /sqrt(1000)) # length of x-axis (setup so that it's 40 when n = 1000)
ny <- ceiling(n / nx)
nx
ny
plotBayes <- function(shuffled, color = "test") {
n <- length(shuffled)
#assemble data frame
nx <- ceiling(sqrt(n) * 40 /sqrt(1000)) # length of x-axis (setup so that it's 40 when n = 1000)
ny <- ceiling(n / nx) # length of y-axis
# fill in coordinate vectors
rows <- rep(seq(1:nx), ny)
cols <- numeric()
for (i in seq(1:ny)) {
cols <- c(cols, rep(i,nx))
}
# create data frame, add NA for blank spaces
data <- data.frame(result = c(rep(NA, length(rows) - length(shuffled)), shuffled),
x = rows, y = cols)
# add truth column
data$truth = ifelse(data$result == "FN" | data$result == "TP", T, F)
# add test column
data$test = ifelse(data$result == "FP" | data$result == "TP", "Positive", "Negative")
#plot
if (color == "test") {
ggplot(data, aes(x=x, y=y, colour=test)) + geom_point(aes(shape = result, size=2))
} else if (color == "truth") {
ggplot(data, aes(x=x, y=y, colour=truth)) + geom_point(aes(shape = result, size=2))
} else {
print("$$$$$$$ INVALID COLOR ARGUMENT $$$$ using 'test' $$$$$$$$$$")
ggplot(data, aes(x=x, y=y, colour=test)) + geom_point(aes(shape = result, size=2))
}
}
# Breast Cancer, Silver p. 246
# shuffled = shuffleBayesRates(TP = 0.011,
#              FP = 0.099,
#              TN = 0.887,
#              FN = 0.003,
#              n = 1523)
shuffled = shuffleBayesProbs(x = 0.014,
y = 0.7857143,
z = 0.1004057,
n = 1000)
#shuffled[shuffled=="TP" | shuffled == "FN"]
plotBayes(shuffled)
plotBayes(shuffled[shuffled=="TP" | shuffled == "FN"])
plotBayes(shuffled)
shuffled = shuffleBayesProbs(x = 0.014,
y = 0.7857143,
z = 0.1004057,
n = 1523)
#shuffled[shuffled=="TP" | shuffled == "FN"]
plotBayes(shuffled)
plotBayes(shuffled[shuffled=="TP" | shuffled == "FN"])
plotStats <- function(shuffled, stat = "all") {
if (stat == "all") {
plotBayes(shuffled)
} else if (stat == "precision") {
print("PRECISION:")
plotBayes(shuffled[shuffled=="TP" | shuffled == "FP"])
print(length(shuffled[shuffled=="TP"]) / length(shuffled[shuffled=="TP" | shuffled == "FP"]))
} else if (stat == "recall" | stat == "sensitivity") {
plotBayes(shuffled[shuffled=="TP" | shuffled == "FN"])
print("RECALL/SENSITIVITY:")
print(length(shuffled[shuffled=="TP"]) / length(shuffled[shuffled=="TP" | shuffled == "FN"]))
} else if (stat == "specificity") {
plotBayes(shuffled[shuffled=="TN" | shuffled == "FN"])
print("SPECIFICITY:")
print(length(shuffled[shuffled=="TN"]) / length(shuffled[shuffled=="TN" | shuffled == "FN"]))
}
}
plotBayes(shuffled[shuffled=="TP" | shuffled == "FN"])
plotStats(shuffled)
plotStats(shuffled, "specificity")
plotStats <- function(shuffled, stat = "all") {
if (stat == "all") {
plotBayes(shuffled)
} else if (stat == "precision") {
print("PRECISION:")
plotBayes(shuffled[shuffled=="TP" | shuffled == "FP"])
print(length(shuffled[shuffled=="TP"]) / length(shuffled[shuffled=="TP" | shuffled == "FP"]))
} else if (stat == "recall" | stat == "sensitivity") {
plotBayes(shuffled[shuffled=="TP" | shuffled == "FN"])
print("RECALL/SENSITIVITY:")
print(length(shuffled[shuffled=="TP"]) / length(shuffled[shuffled=="TP" | shuffled == "FN"]))
} else if (stat == "specificity") {
print("SPECIFICITY:")
print(length(shuffled[shuffled=="TN"]) / length(shuffled[shuffled=="TN" | shuffled == "FN"]))
return(plotBayes(shuffled[shuffled=="TN" | shuffled == "FN"]))
}
}
plotBayes(shuffled[shuffled=="TP" | shuffled == "FN"])
plotStats(shuffled, "specificity")
plotStats <- function(shuffled, stat = "all") {
if (stat == "all") {
plotBayes(shuffled)
} else if (stat == "precision") {
print("PRECISION:")
print(length(shuffled[shuffled=="TP"]) / length(shuffled[shuffled=="TP" | shuffled == "FP"]))
return(plotBayes(shuffled[shuffled=="TP" | shuffled == "FP"]))
} else if (stat == "recall" | stat == "sensitivity") {
print("RECALL/SENSITIVITY:")
print(length(shuffled[shuffled=="TP"]) / length(shuffled[shuffled=="TP" | shuffled == "FN"]))
return(plotBayes(shuffled[shuffled=="TP" | shuffled == "FN"]))
} else if (stat == "specificity") {
print("SPECIFICITY:")
print(length(shuffled[shuffled=="TN"]) / length(shuffled[shuffled=="TN" | shuffled == "FN"]))
return(plotBayes(shuffled[shuffled=="TN" | shuffled == "FN"]))
} else {
print("$$$$$$$$$ INVALID STAT ARGUMENT $$$$ using 'all' $$$$$$$$$$$$")
return(plotBayes(shuffled))
}
plotStats(shuffled, "specificity")
plotStats <- function(shuffled, stat = "all") {
if (stat == "all") {
plotBayes(shuffled)
} else if (stat == "precision") {
print("PRECISION:")
print(length(shuffled[shuffled=="TP"]) / length(shuffled[shuffled=="TP" | shuffled == "FP"]))
return(plotBayes(shuffled[shuffled=="TP" | shuffled == "FP"]))
} else if (stat == "recall" | stat == "sensitivity") {
print("RECALL/SENSITIVITY:")
print(length(shuffled[shuffled=="TP"]) / length(shuffled[shuffled=="TP" | shuffled == "FN"]))
return(plotBayes(shuffled[shuffled=="TP" | shuffled == "FN"]))
} else if (stat == "specificity") {
print("SPECIFICITY:")
print(length(shuffled[shuffled=="TN"]) / length(shuffled[shuffled=="TN" | shuffled == "FN"]))
return(plotBayes(shuffled[shuffled=="TN" | shuffled == "FN"]))
} else {
print("$$$$$$$$$ INVALID STAT ARGUMENT $$$$ using 'all' $$$$$$$$$$$$")
return(plotBayes(shuffled))
}
}
plotStats(shuffled, "specificity")
)
plotStats <- function(shuffled, stat = "all") {
if (stat == "all") {
plotBayes(shuffled)
} else if (stat == "precision") {
print("PRECISION:")
print(length(shuffled[shuffled=="TP"]) / length(shuffled[shuffled=="TP" | shuffled == "FP"]))
return(plotBayes(shuffled[shuffled=="TP" | shuffled == "FP"]))
} else if (stat == "recall" | stat == "sensitivity") {
print("RECALL/SENSITIVITY:")
print(length(shuffled[shuffled=="TP"]) / length(shuffled[shuffled=="TP" | shuffled == "FN"]))
return(plotBayes(shuffled[shuffled=="TP" | shuffled == "FN"]))
} else if (stat == "specificity") {
print("SPECIFICITY:")
print(length(shuffled[shuffled=="TN"]) / length(shuffled[shuffled=="TN" | shuffled == "FN"]))
return(plotBayes(shuffled[shuffled=="TN" | shuffled == "FN"]))
} else {
print("$$$$$$$$$ INVALID STAT ARGUMENT $$$$ using 'all' $$$$$$$$$$$$")
return(plotBayes(shuffled))
}
}
plotStats(shuffled, "specificity")
plotStats(shuffled, "recall")
plotStats(shuffled, "precision")
plotBayes <- function(shuffled, color = "truth") {
n <- length(shuffled)
#assemble data frame
nx <- ceiling(sqrt(n) * 40 /sqrt(1000)) # length of x-axis (setup so that it's 40 when n = 1000)
ny <- ceiling(n / nx) # length of y-axis
# fill in coordinate vectors
rows <- rep(seq(1:nx), ny)
cols <- numeric()
for (i in seq(1:ny)) {
cols <- c(cols, rep(i,nx))
}
# create data frame, add NA for blank spaces
data <- data.frame(result = c(rep(NA, length(rows) - length(shuffled)), shuffled),
x = rows, y = cols)
# add truth column
data$truth = ifelse(data$result == "FN" | data$result == "TP", T, F)
# add test column
data$test = ifelse(data$result == "FP" | data$result == "TP", "Positive", "Negative")
#plot
if (color == "test") {
ggplot(data, aes(x=x, y=y, colour=test)) + geom_point(aes(shape = result, size=2))
} else if (color == "truth") {
ggplot(data, aes(x=x, y=y, colour=truth)) + geom_point(aes(shape = result, size=2))
} else {
print("$$$$$$$ INVALID COLOR ARGUMENT $$$$ using 'test' $$$$$$$$$$")
ggplot(data, aes(x=x, y=y, colour=test)) + geom_point(aes(shape = result, size=2))
}
}
shuffled = shuffleBayesProbs(x = 0.014,
y = 0.7857143,
z = 0.1004057,
n = 1523)
#shuffled[shuffled=="TP" | shuffled == "FN"]
plotStats <- function(shuffled, stat = "all") {
if (stat == "all") {
plotBayes(shuffled)
} else if (stat == "precision") {
print("PRECISION:")
print(length(shuffled[shuffled=="TP"]) / length(shuffled[shuffled=="TP" | shuffled == "FP"]))
return(plotBayes(shuffled[shuffled=="TP" | shuffled == "FP"]))
} else if (stat == "recall" | stat == "sensitivity") {
print("RECALL/SENSITIVITY:")
print(length(shuffled[shuffled=="TP"]) / length(shuffled[shuffled=="TP" | shuffled == "FN"]))
return(plotBayes(shuffled[shuffled=="TP" | shuffled == "FN"]))
} else if (stat == "specificity") {
print("SPECIFICITY:")
print(length(shuffled[shuffled=="TN"]) / length(shuffled[shuffled=="TN" | shuffled == "FN"]))
return(plotBayes(shuffled[shuffled=="TN" | shuffled == "FN"]))
} else {
print("$$$$$$$$$ INVALID STAT ARGUMENT $$$$ using 'all' $$$$$$$$$$$$")
return(plotBayes(shuffled))
}
}
plotStats(shuffled, "specificity")
plotStats(shuffled, "recall")
plotStats(shuffled, "precision")
plotStats(shuffled, "recall")
plotStats <- function(shuffled, stat = "all") {
if (stat == "all") {
plotBayes(shuffled)
} else if (stat == "precision") {
print("PRECISION:")
print(length(shuffled[shuffled=="TP"]) / length(shuffled[shuffled=="TP" | shuffled == "FP"]))
return(plotBayes(shuffled[shuffled=="TP" | shuffled == "FP"]))
} else if (stat == "recall" | stat == "sensitivity") {
print("RECALL/SENSITIVITY:")
print(length(shuffled[shuffled=="TP"]) / length(shuffled[shuffled=="TP" | shuffled == "FN"]))
return(plotBayes(shuffled[shuffled=="TP" | shuffled == "FN"], color = 'test'))
} else if (stat == "specificity") {
print("SPECIFICITY:")
print(length(shuffled[shuffled=="TN"]) / length(shuffled[shuffled=="TN" | shuffled == "FN"]))
return(plotBayes(shuffled[shuffled=="TN" | shuffled == "FN"]))
} else {
print("$$$$$$$$$ INVALID STAT ARGUMENT $$$$ using 'all' $$$$$$$$$$$$")
return(plotBayes(shuffled))
}
}
plotStats(shuffled, "specificity")
plotStats(shuffled, "recall")
plotStats(shuffled, "precision")
plotStats <- function(shuffled, stat = "all") {
if (stat == "all") {
plotBayes(shuffled)
} else if (stat == "precision") {
print("PRECISION:")
print(length(shuffled[shuffled=="TP"]) / length(shuffled[shuffled=="TP" | shuffled == "FP"]))
return(plotBayes(shuffled[shuffled=="TP" | shuffled == "FP"]))
} else if (stat == "recall" | stat == "sensitivity") {
print("RECALL/SENSITIVITY:")
print(length(shuffled[shuffled=="TP"]) / length(shuffled[shuffled=="TP" | shuffled == "FN"]))
#return(plotBayes(shuffled[shuffled=="TP" | shuffled == "FN"], color = 'test'))
return(plotBayes(shuffled[shuffled=="TP" | shuffled == "FN"]))
} else if (stat == "specificity") {
print("SPECIFICITY:")
print(length(shuffled[shuffled=="TN"]) / length(shuffled[shuffled=="TN" | shuffled == "FN"]))
return(plotBayes(shuffled[shuffled=="TN" | shuffled == "FN"]))
} else {
print("$$$$$$$$$ INVALID STAT ARGUMENT $$$$ using 'all' $$$$$$$$$$$$")
return(plotBayes(shuffled))
}
}
plotStats(shuffled)
plotBayes <- function(shuffled, color = "test") {
n <- length(shuffled)
#assemble data frame
nx <- ceiling(sqrt(n) * 40 /sqrt(1000)) # length of x-axis (setup so that it's 40 when n = 1000)
ny <- ceiling(n / nx) # length of y-axis
# fill in coordinate vectors
rows <- rep(seq(1:nx), ny)
cols <- numeric()
for (i in seq(1:ny)) {
cols <- c(cols, rep(i,nx))
}
# create data frame, add NA for blank spaces
data <- data.frame(result = c(rep(NA, length(rows) - length(shuffled)), shuffled),
x = rows, y = cols)
# add truth column
data$truth = ifelse(data$result == "FN" | data$result == "TP", T, F)
# add test column
data$test = ifelse(data$result == "FP" | data$result == "TP", "Positive", "Negative")
#plot
if (color == "test") {
ggplot(data, aes(x=x, y=y, colour=test)) + geom_point(aes(shape = result, size=2))
} else if (color == "truth") {
ggplot(data, aes(x=x, y=y, colour=truth)) + geom_point(aes(shape = result, size=2))
} else {
print("$$$$$$$ INVALID COLOR ARGUMENT $$$$ using 'test' $$$$$$$$$$")
ggplot(data, aes(x=x, y=y, colour=test)) + geom_point(aes(shape = result, size=2))
}
}
# Breast Cancer, Silver p. 246
# shuffled = shuffleBayesRates(TP = 0.011,
#              FP = 0.099,
#              TN = 0.887,
#              FN = 0.003,
#              n = 1523)
shuffled = shuffleBayesProbs(x = 0.014,
y = 0.7857143,
z = 0.1004057,
n = 1523)
#shuffled[shuffled=="TP" | shuffled == "FN"]
plotStats <- function(shuffled, stat = "all") {
if (stat == "all") {
plotBayes(shuffled)
} else if (stat == "precision") {
print("PRECISION:")
print(length(shuffled[shuffled=="TP"]) / length(shuffled[shuffled=="TP" | shuffled == "FP"]))
return(plotBayes(shuffled[shuffled=="TP" | shuffled == "FP"]))
} else if (stat == "recall" | stat == "sensitivity") {
print("RECALL/SENSITIVITY:")
print(length(shuffled[shuffled=="TP"]) / length(shuffled[shuffled=="TP" | shuffled == "FN"]))
#return(plotBayes(shuffled[shuffled=="TP" | shuffled == "FN"], color = 'test'))
return(plotBayes(shuffled[shuffled=="TP" | shuffled == "FN"]))
} else if (stat == "specificity") {
print("SPECIFICITY:")
print(length(shuffled[shuffled=="TN"]) / length(shuffled[shuffled=="TN" | shuffled == "FN"]))
return(plotBayes(shuffled[shuffled=="TN" | shuffled == "FN"]))
} else {
print("$$$$$$$$$ INVALID STAT ARGUMENT $$$$ using 'all' $$$$$$$$$$$$")
return(plotBayes(shuffled))
}
}
plotStats(shuffled)
plotStats(shuffled, "specificity")
plotBayes <- function(shuffled, color = "truth") {
n <- length(shuffled)
#assemble data frame
nx <- ceiling(sqrt(n) * 40 /sqrt(1000)) # length of x-axis (setup so that it's 40 when n = 1000)
ny <- ceiling(n / nx) # length of y-axis
# fill in coordinate vectors
rows <- rep(seq(1:nx), ny)
cols <- numeric()
for (i in seq(1:ny)) {
cols <- c(cols, rep(i,nx))
}
# create data frame, add NA for blank spaces
data <- data.frame(result = c(rep(NA, length(rows) - length(shuffled)), shuffled),
x = rows, y = cols)
# add truth column
data$truth = ifelse(data$result == "FN" | data$result == "TP", T, F)
# add test column
data$test = ifelse(data$result == "FP" | data$result == "TP", "Positive", "Negative")
#plot
if (color == "test") {
ggplot(data, aes(x=x, y=y, colour=test)) + geom_point(aes(shape = result, size=2))
} else if (color == "truth") {
ggplot(data, aes(x=x, y=y, colour=truth)) + geom_point(aes(shape = result, size=2))
} else {
print("$$$$$$$ INVALID COLOR ARGUMENT $$$$ using 'test' $$$$$$$$$$")
ggplot(data, aes(x=x, y=y, colour=test)) + geom_point(aes(shape = result, size=2))
}
}
# Breast Cancer, Silver p. 246
# shuffled = shuffleBayesRates(TP = 0.011,
#              FP = 0.099,
#              TN = 0.887,
#              FN = 0.003,
#              n = 1523)
shuffled = shuffleBayesProbs(x = 0.014,
y = 0.7857143,
z = 0.1004057,
n = 1523)
#shuffled[shuffled=="TP" | shuffled == "FN"]
plotStats <- function(shuffled, stat = "all") {
if (stat == "all") {
plotBayes(shuffled)
} else if (stat == "precision") {
print("PRECISION:")
print(length(shuffled[shuffled=="TP"]) / length(shuffled[shuffled=="TP" | shuffled == "FP"]))
return(plotBayes(shuffled[shuffled=="TP" | shuffled == "FP"]))
} else if (stat == "recall" | stat == "sensitivity") {
print("RECALL/SENSITIVITY:")
print(length(shuffled[shuffled=="TP"]) / length(shuffled[shuffled=="TP" | shuffled == "FN"]))
#return(plotBayes(shuffled[shuffled=="TP" | shuffled == "FN"], color = 'test'))
return(plotBayes(shuffled[shuffled=="TP" | shuffled == "FN"]))
} else if (stat == "specificity") {
print("SPECIFICITY:")
print(length(shuffled[shuffled=="TN"]) / length(shuffled[shuffled=="TN" | shuffled == "FN"]))
return(plotBayes(shuffled[shuffled=="TN" | shuffled == "FN"]))
} else {
print("$$$$$$$$$ INVALID STAT ARGUMENT $$$$ using 'all' $$$$$$$$$$$$")
return(plotBayes(shuffled))
}
}
plotStats(shuffled)
plotBayes <- function(shuffled, color = "test") {
n <- length(shuffled)
#assemble data frame
nx <- ceiling(sqrt(n) * 40 /sqrt(1000)) # length of x-axis (setup so that it's 40 when n = 1000)
ny <- ceiling(n / nx) # length of y-axis
# fill in coordinate vectors
rows <- rep(seq(1:nx), ny)
cols <- numeric()
for (i in seq(1:ny)) {
cols <- c(cols, rep(i,nx))
}
# create data frame, add NA for blank spaces
data <- data.frame(result = c(rep(NA, length(rows) - length(shuffled)), shuffled),
x = rows, y = cols)
# add truth column
data$truth = ifelse(data$result == "FN" | data$result == "TP", T, F)
# add test column
data$test = ifelse(data$result == "FP" | data$result == "TP", "Positive", "Negative")
#plot
if (color == "test") {
ggplot(data, aes(x=x, y=y, colour=test)) + geom_point(aes(shape = result, size=2))
} else if (color == "truth") {
ggplot(data, aes(x=x, y=y, colour=truth)) + geom_point(aes(shape = result, size=2))
} else {
print("$$$$$$$ INVALID COLOR ARGUMENT $$$$ using 'test' $$$$$$$$$$")
ggplot(data, aes(x=x, y=y, colour=test)) + geom_point(aes(shape = result, size=2))
}
}
# Breast Cancer, Silver p. 246
# shuffled = shuffleBayesRates(TP = 0.011,
#              FP = 0.099,
#              TN = 0.887,
#              FN = 0.003,
#              n = 1523)
shuffled = shuffleBayesProbs(x = 0.014,
y = 0.7857143,
z = 0.1004057,
n = 1523)
#shuffled[shuffled=="TP" | shuffled == "FN"]
plotStats <- function(shuffled, stat = "all") {
if (stat == "all") {
plotBayes(shuffled)
} else if (stat == "precision") {
print("PRECISION:")
print(length(shuffled[shuffled=="TP"]) / length(shuffled[shuffled=="TP" | shuffled == "FP"]))
return(plotBayes(shuffled[shuffled=="TP" | shuffled == "FP"]))
} else if (stat == "recall" | stat == "sensitivity") {
print("RECALL/SENSITIVITY:")
print(length(shuffled[shuffled=="TP"]) / length(shuffled[shuffled=="TP" | shuffled == "FN"]))
return(plotBayes(shuffled[shuffled=="TP" | shuffled == "FN"]))
} else if (stat == "specificity") {
print("SPECIFICITY:")
print(length(shuffled[shuffled=="TN"]) / length(shuffled[shuffled=="TN" | shuffled == "FN"]))
return(plotBayes(shuffled[shuffled=="TN" | shuffled == "FN"]))
} else {
print("$$$$$$$$$ INVALID STAT ARGUMENT $$$$ using 'all' $$$$$$$$$$$$")
return(plotBayes(shuffled))
}
}
plotStats(shuffled)
plotStats(shuffled, "specificity")
plotStats(shuffled, "recall")
plotStats(shuffled, "precision")
library(XML)
library(tm)
library(MASS)
library(SnowballC)
#######################
### Import the Data ###
#######################
setwd("~/Documents/DSI/DSI-Religion-2017")
## read in docRanks.csv file ##
docRanks <- read.csv(paste(c(toString(getwd()),"/refData/docRanks.csv"),collapse = ''))
setwd("~/Documents/DSI/Capstone/DSI-Religion-2017")
docRanks <- read.csv(paste(c(toString(getwd()),"/refData/docRanks.csv"),collapse = ''))
df <- read.csv(paste(c(toString(getwd()),"NeuralNet/wikiTFIDF/data_dsicap_single-wikiTFIDF.csv"),collapse = ''))
df <- read.csv(paste(c(toString(getwd()),"/NeuralNet/wikiTFIDF/data_dsicap_single-wikiTFIDF.csv"),collapse = ''))
df <- read.csv(paste(c(toString(getwd()),"/NeuralNet/wikiTFIDF/data_dsicap_single-wikiTFIDF-with-ranks.csv"),collapse = ''))
