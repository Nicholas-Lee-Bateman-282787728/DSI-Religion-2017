#           ma1      ma2      ma3
#       -0.0200  -0.0976  -0.0301
# s.e.   0.0211   0.0214   0.0209
# sigma^2 estimated as 0.000202:  log likelihood=6341.23
# AIC=-12674.47   AICc=-12674.45   BIC=-12651.62
# 3. Time Domain: identifying an ARCH/GARCH model for the residuals
mm <- garchFit(formula = ~arma(0,3) + garch(1,3), data = res, trace = TRUE)
summary(mm)
resid = mm@residuals
resid = ts(resid)
plot(resid, main = "Plot of Residuals of GARCH Model for VZ Series")
V = resid^2
acf(V, main = "ACF Plot of Residuals^2 of GARCH Model for VZ Series")
pacf(V, main = "PACF Plot of Residuals^2 of GARCH Model for VZ Series")
# 4. Frequency Domain: Smoothing the periodogram to determine periodicities
m3 = round(sqrt(length(V)))
length(V)
# Answer:
# [1] 2237
m3
# Answer:
# [1] 47
spec.pgram(LVT, spans=c(95,95), taper = 0, log="no", main = "Periodagram of VZ Series")
dev.off()
CT = ts(CAT$CAT.Close)
plot(CT, main = "Plot of Untransformed CAT Series")
LCT = diff(log(CT))
plot(LCT, main = "Plot of Stationary CAT Series")
acf(LCT, main = "ACF Plot of Stationary CAT Series")
pacf(LCT, main = "PACF Plot of Stationary CAT Series")
# 2. Time Domain: fitting the ARMA Model
Box.test(LCT, type="Ljung")
# Answer:
# Box-Ljung test
# data:  LCT
# X-squared = 0.011928, df = 1, p-value = 0.913
rr = arima(LCT, order = c(0,0,0), include.mean = TRUE)
rr
# Answer:
# Call:
#   arima(x = LCT, order = c(0, 0, 0), include.mean = TRUE)
# Coefficients:
#       intercept
#           1e-04
# s.e.      5e-04
# sigma^2 estimated as 0.0004556:  log likelihood = 5431.52,  aic = -10859.04
res = rr$residuals
acf(res, main = "ACF Plot of Residuals of ARMA Model for CAT Series")
pacf(res, main = "PACF Plot of Residuals of ARMA Model for CAT Series")
W = res^2
acf(W, main = "ACF Plot of Residuals^2 of ARMA Model for CAT Series")
pacf(W, main = "PACF Plot of Residuals^2 of ARMA Model for CAT Series")
auto.arima(LCT, stationary = TRUE, seasonal = FALSE)
# Answer:
# Series: LCT
# ARIMA(0,0,0) with non-zero mean
# Coefficients:
#       intercept
#           1e-04
# s.e.      5e-04
# sigma^2 estimated as 0.0004556:  log likelihood=5431.52
# AIC=-10859.04   AICc=-10859.04   BIC=-10847.62
# 3. Time Domain: identifying an ARCH/GARCH model for the residuals
mm <- garchFit(formula = ~arma(0,3) + garch(1,0), data = res, trace = TRUE)
summary(mm)
resid = mm@residuals
resid = ts(resid)
plot(resid, main = "Plot of Residuals of GARCH Model for CAT Series")
V = resid^2
acf(V, main = "ACF Plot of Residuals^2 of GARCH Model for CAT Series")
pacf(V, main = "PACF Plot of Residuals^2 of GARCH Model for CAT Series")
# 4. Frequency Domain: Smoothing the periodogram to determine periodicities
m1 = round(sqrt(length(CT)))
D = ts(DD$DD.Close)
plot(D, main = "Plot of Untransformed DD Series")
LDT = diff(log(D))
plot(LDT, main = "Plot of Stationary DD Series")
acf(LDT, main = "ACF Plot of Stationary DD Series")
pacf(LDT, main = "PACF Plot of Stationary DD Series")
# 2. Time Domain: fitting the ARMA Model
Box.test(LDT, type="Ljung")
# Answer:
# Box-Ljung test
# data:  LDT
# X-squared = 2.2034, df = 1, p-value = 0.1377
rr = arima(LDT, order = c(0,0,0), include.mean = TRUE)
rr
# Answer:
# Call:
# arima(x = LDT, order = c(0, 0, 0), include.mean = TRUE)
# Coefficients:
#       intercept
#           1e-04
# s.e.      4e-04
# sigma^2 estimated as 0.0003497:  log likelihood = 5727.32,  aic = -11450.65
res = rr$residuals
acf(res, main = "ACF Plot of Residuals of ARMA Model for DD Series")
pacf(res, main = "PACF Plot of Residuals of ARMA Model for DD Series")
W = res^2
acf(W, main = "ACF Plot of Residuals^2 of ARMA Model for DD Series")
pacf(W, main = "PACF Plot of Residuals^2 of ARMA Model for DD Series")
auto.arima(LDT, stationary = TRUE, seasonal = FALSE)
# Answer:
# Series: LDT
# ARIMA(0,0,0) with non-zero mean
# Coefficients:
#       intercept
#           1e-04
# s.e.      4e-04
# sigma^2 estimated as 0.0003497:  log likelihood=5727.32
# AIC=-11450.65   AICc=-11450.64   BIC=-11439.22
# 3. Time Domain: identifying an ARCH/GARCH model for the residuals
mm <- garchFit(formula = ~arma(0,0) + garch(1,0), data = res, trace = TRUE)
summary(mm)
resid = mm@residuals
resid = ts(resid)
plot(resid, main = "Plot of Residuals of GARCH Model for DD Series")
V = resid^2
acf(V, main = "ACF Plot of Residuals^2 of GARCH Model for DD Series")
pacf(V, main = "PACF Plot of Residuals^2 of GARCH Model for DD Series")
# 4. Frequency Domain: Smoothing the periodogram to determine periodicities
m2 = round(sqrt(length(D)))
V = ts(VZ$VZ.Close)
plot(V, main = "Plot of Untransformed VZ Series")
LVT = diff(log(V))
plot(LVT, main = "Plot of Stationary VZ Series")
acf(LVT, main = "ACF Plot of Stationary VZ Series")
pacf(LVT, main = "PACF Plot of Stationary VZ Series")
# 2. Time Domain: fitting the ARMA Model
Box.test(LVT, type="Ljung")
# Answer:
# Box-Ljung test
# data:  LVT
# X-squared = 0.4519, df = 1, p-value = 0.5014
rr = arima(LVT, order = c(0,0,3), include.mean = TRUE)
rr
# Answer:
# Call:
# arima(x = LVT, order = c(0, 0, 3), include.mean = TRUE)
# Coefficients:
#           ma1      ma2      ma3  intercept
#       -0.0201  -0.0976  -0.0301      1e-04
# s.e.   0.0211   0.0214   0.0209      3e-04
# sigma^2 estimated as 0.000202:  log likelihood = 6341.29,  aic = -12672.58
res = rr$residuals
acf(res, main = "ACF Plot of Residuals of ARMA Model for VZ Series")
pacf(res, main = "PACF Plot of Residuals of ARMA Model for VZ Series")
W = res^2
acf(W, main = "ACF Plot of Residuals^2 of ARMA Model for VZ Series")
pacf(W, main = "PACF Plot of Residuals^2 of ARMA Model for VZ Series")
auto.arima(LVT, stationary = TRUE, seasonal = FALSE)
# Answer:
# Series: LVT
# ARIMA(0,0,3) with zero mean
# Coefficients:
#           ma1      ma2      ma3
#       -0.0200  -0.0976  -0.0301
# s.e.   0.0211   0.0214   0.0209
# sigma^2 estimated as 0.000202:  log likelihood=6341.23
# AIC=-12674.47   AICc=-12674.45   BIC=-12651.62
# 3. Time Domain: identifying an ARCH/GARCH model for the residuals
mm <- garchFit(formula = ~arma(0,3) + garch(1,3), data = res, trace = TRUE)
summary(mm)
resid = mm@residuals
library(car)
############################################################################
# Problem 4.2
# Consider the multiple regression model fit to the NFL team performance data in Problem 3.1.
x2 <- c(1985,2855,1737,2905,1666,2927,2341,2737,1414,1838,1480,2191,2229,2204,2140,
1730,2072,2929,2268,1983,1792,1606,1492,2835,2416,1638,2649,1503)
x7 <- c(59.7,55,65.6,61.4,66.1,61,66.1,58,57,58.9,67.5,57.2,58.8,58.6,59.2,54.4,
49.6,54.3,58.7,51.7,61.9,52.7,57.8,59.7,54.9,65.3,43.8,53.5)
x8 <- c(2205,2096,1847,1903,1457,1848,1564,1821,2577,2476,1984,1917,1761,1709,
1901,2288,2072,2861,2411,2289,2203,2592,2053,1979,2048,1786,2876,2560)
y <- c(10,11,11,13,10,11,10,11,4,2,7,10,9,9,6,5,5,5,6,4,3,3,4,10,6,8,2,0)
nfl.lm <- lm(y~x2+x7+x8)
# (a) Construct a normal probability plot of the residuals. Does there seem to be any
#     problem with the normality assumption?
qqnorm(nfl.lm$residuals)
qqline(nfl.lm$residuals)
# (b) Construct and interpret a plot of the residuals versus the predicted response.
plot(nfl.lm$fitted.values, nfl.lm$residuals)
abline(h = 0)
# (c) Construct plots of the residuals vs each of the regressor variables. Do these plots
#     imply that the regressor is correctly specified?
plot(x2, nfl.lm$residuals)
abline(h = 0)
plot(x7, nfl.lm$residuals)
abline(h = 0)
plot(x8, nfl.lm$residuals)
abline(h = 0)
# (d) Construct the partial regression plots for this model. Compare the plots with the
#     plots of residuals vs. regressors from part (c) above. Discuss the type of information
#     provided by these plots.
avPlots(nfl.lm)
install.packages("car")
install.packages("pbkrtests")
# installing/loading the package:
if(!require(installr)) {
install.packages("installr"); require(installr)} #load / install+load installr
# using the package:
updateR() # this will start the updating process of your R installation.  It will check for newer versions, and if one is available, will guide you through the decisions you'd need to make.
=12*15
12*15
setwd("~/Documents/Data Science/Capstone/LargeTxtFiles")
spurgeon <- read.table("AndrewMurry.txt")
install.packages("readr")
library(readr)
murry <- read_file("AndrewMurry.txt")
murry
strReverse <- function(x)
sapply(lapply(strsplit(x, NULL), rev), paste, collapse = "")
strReverse(c("abc", "Statistics"))
new_murry <- unlist(strsplit(murry, '[\n\n\n\n\n"]'))
new_murry <- unlist(strsplit(murry, '\n\n\n\n\n"'))
new_murry
new_murry[1]
new_murry[2]
new_murry[3]
new_murry[4]
new_murry[5]
new_murry <- unlist(strsplit(murry, '\n\n\n\n\n\n"'))
new_murry <- unlist(strsplit(murry, '\n\n\n\n\n\n"'))
test.murry <- as.data.frame(new_murry)
View(test.murry)
install.packages(RWeka)
install.packages("RWeka", lib="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages(RWeka)
install.packages("RWeka")
install.packages("RWeka")
View(test.murry)
setwd("~/Documents")
titles <- read.csv("DocumentNames.csv")
View(titles)
new_murry <- unlist(strsplit(murry, titles$Title))
new_murry <- list()
new_murry <- list()
for (i in 1:length(titles)){
file <- unlist(strsplit(murry, titles$Title[i]))
new_murry <- rbind(new_murry, file)
}
murry
murry[1]
test.murry <- as.data.frame(murry)
View(test.murry)
vec <- as.vector(murry)
install.packages("regexr", lib="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
regmatches(vec, gregexpr("(?<=<i>).*?(?=</i>)", vec, perl = TRUE))
regmatches(vec, gregexpr("(?<='Having Begun in the Spirit').*?(?='Impossible with Man, Possible with God')", vec, perl = TRUE))
?gregexpr
regmatches(vec, gregexpr("(?<='Having Begun in the Spirit').*?(?='Impossible with Man, Possible with God')", vec, perl = FALSE))
setwd("~/Documents/Data Science/Capstone/LargeTxtFiles")
readLines("AndrewMurry.txt")
trying <- readLines("AndrewMurry.txt")
trying <- as.data.frame(trying)
View(trying)
trying[grep("Having Begun in the Spirit", rownames(trying)),]
tryingSubset <- trying[grep("Having Begun in the Spirit", rownames(trying)),]
tryingSubset
as.data.frame(tryingSubset)
getstr = function(mystring, initial.character, final.character)
{
# pre-allocate a vector to store the extracted strings
snippet = rep(0, length(mystring))
for (i in 1:length(mystring))
{
# extract the initial position
initial.position = gregexpr(initial.character, mystring[i])[[1]][1] + 1
# extract the final position
final.position = gregexpr(final.character, mystring[i])[[1]][1] - 1
# extract the substring between the initial and final positions, inclusively
snippet[i] = substr(mystring[i], initial.position, final.position)
}
return(snippet)
}
getstr(murry, '"Having Begun in the Spirit"', '"Impossible with Man, Possible with God"')
setwd("~/Documents/Data Science/Capstone/LargeTxtFiles")
murry <- read_file("AndrewMurry.txt")
getstr = function(mystring, initial.character, final.character)
{
# pre-allocate a vector to store the extracted strings
snippet = rep(0, length(mystring))
for (i in 1:length(mystring))
{
# extract the initial position
initial.position = gregexpr(initial.character, mystring[i])[[1]][1] + 1
# extract the final position
final.position = gregexpr(final.character, mystring[i])[[1]][1] - 1
# extract the substring between the initial and final positions, inclusively
snippet[i] = substr(mystring[i], initial.position, final.position)
}
return(snippet)
}
getstr(murry, '"Having Begun in the Spirit"', '"Impossible with Man, Possible with God"')
getstr(murry, 'Having Begun in the Spirit', 'Impossible with Man, Possible with God')
startingDir <- "~/Documents/Data Science/Testing Rename Function"
files <- list.files(startingDir, pattern = "searchPattern")
head(files)
files <- list.files(startingDir, pattern = ".txt")
head(files)
sapply(files, FUN = function(eachPath) {
file.rename(from = eachPath, to = sub(pattern = ".txt", replacement = "NewTextString", eachPath))
})
new_names <- paste("AEU", + formatC(seq(length(files)), width = 2, flag = "0"), + ".txt", sep = "")
new_names <- paste("AEU", formatC(seq(length(files)), width = 2, flag = "0"), ".txt", sep = "")
file.rename(from = files, to = new_names)
setwd("~/Documents/Data Science/Testing Rename Function")
startingDir <- "~/Documents/Data Science/Testing Rename Function"
files <- list.files(startingDir, pattern = ".txt")
head(files)
new_names <- paste("AEU", formatC(seq(length(files)), width = 2, flag = "0"), ".txt", sep = "")
file.rename(from = files, to = new_names)
setwd("~/Documents/Data Science/Capstone/DSI-Religion-2017/data_dsicap_FULL/AEU/raw")
startingDir <- "~/Documents/Data Science/Capstone/DSI-Religion-2017/data_dsicap_FULL/AEU/raw"
files <- list.files(startingDir, pattern = ".txt")
head(files)
new_names <- paste("AEU", formatC(seq(length(files)), width = 3, flag = "0"), ".txt", sep = "")
file.rename(from = files, to = new_names)
setwd("~/Documents/Data Science/Capstone/DSI-Religion-2017/data_dsicap_FULL/DorothyDay/raw")
startingDir <- "~/Documents/Data Science/Capstone/DSI-Religion-2017/data_dsicap_FULL/DorothyDay/raw"
files <- list.files(startingDir, pattern = ".txt")
head(files)
new_names <- paste("DorothyDay", formatC(seq(length(files)), width = 3, flag = "0"), ".txt", sep = "")
file.rename(from = files, to = new_names)
setwd("~/Documents/Data Science/Capstone/DSI-Religion-2017/data_dsicap_FULL/Ghandi/raw")
startingDir <- "~/Documents/Data Science/Capstone/DSI-Religion-2017/data_dsicap_FULL/Ghandi/raw"
files <- list.files(startingDir, pattern = ".txt")
head(files)
new_names <- paste("Ghandi", formatC(seq(length(files)), width = 3, flag = "0"), ".txt", sep = "")
file.rename(from = files, to = new_names)
setwd("~/Documents/Data Science/Capstone/DSI-Religion-2017/data_dsicap_FULL/ISIS/raw")
startingDir <- "~/Documents/Data Science/Capstone/DSI-Religion-2017/data_dsicap_FULL/ISIS/raw"
files <- list.files(startingDir, pattern = ".txt")
head(files)
new_names <- paste("ISIS", formatC(seq(length(files)), width = 3, flag = "0"), ".txt", sep = "")
file.rename(from = files, to = new_names)
setwd("~/Documents/Data Science/Capstone/DSI-Religion-2017/data_dsicap_FULL/JohnPiper/raw")
startingDir <- "~/Documents/Data Science/Capstone/DSI-Religion-2017/data_dsicap_FULL/JohnPiper/raw"
files <- list.files(startingDir, pattern = ".txt")
head(files)
new_names <- paste("JohnPiper", formatC(seq(length(files)), width = 3, flag = "0"), ".txt", sep = "")
file.rename(from = files, to = new_names)
setwd("~/Documents/Data Science/Capstone/DSI-Religion-2017/data_dsicap_FULL/LiberalJudaism/raw")
startingDir <- "~/Documents/Data Science/Capstone/DSI-Religion-2017/data_dsicap_FULL/LiberalJudaism/raw"
files <- list.files(startingDir, pattern = ".txt")
head(files)
new_names <- paste("LiberalJudaism", formatC(seq(length(files)), width = 3, flag = "0"), ".txt", sep = "")
file.rename(from = files, to = new_names)
setwd("~/Documents/Data Science/Capstone/DSI-Religion-2017/data_dsicap_FULL/MalcolmX/raw")
startingDir <- "~/Documents/Data Science/Capstone/DSI-Religion-2017/data_dsicap_FULL/MalcolmX/raw"
files <- list.files(startingDir, pattern = ".txt")
head(files)
new_names <- paste("MalcolmX", formatC(seq(length(files)), width = 3, flag = "0"), ".txt", sep = "")
file.rename(from = files, to = new_names)
setwd("~/Documents/Data Science/Capstone/DSI-Religion-2017/data_dsicap_FULL/MehrBaba/raw")
startingDir <- "~/Documents/Data Science/Capstone/DSI-Religion-2017/data_dsicap_FULL/MehrBaba/raw"
files <- list.files(startingDir, pattern = ".txt")
head(files)
new_names <- paste("MehrBaba", formatC(seq(length(files)), width = 3, flag = "0"), ".txt", sep = "")
file.rename(from = files, to = new_names)
setwd("~/Documents/Data Science/Capstone/DSI-Religion-2017/data_dsicap_FULL/NaumanKahn/raw")
startingDir <- "~/Documents/Data Science/Capstone/DSI-Religion-2017/data_dsicap_FULL/NaumanKahn/raw"
files <- list.files(startingDir, pattern = ".txt")
setwd("~/Documents/Data Science/Capstone/DSI-Religion-2017/data_dsicap_FULL/NaumanKhan/raw")
startingDir <- "~/Documents/Data Science/Capstone/DSI-Religion-2017/data_dsicap_FULL/NaumanKhan/raw"
files <- list.files(startingDir, pattern = ".txt")
head(files)
new_names <- paste("NaumanKhan", formatC(seq(length(files)), width = 3, flag = "0"), ".txt", sep = "")
file.rename(from = files, to = new_names)
setwd("~/Documents/Data Science/Capstone/DSI-Religion-2017/data_dsicap_FULL/PastorAnderson/raw")
startingDir <- "~/Documents/Data Science/Capstone/DSI-Religion-2017/data_dsicap_FULL/PastorAnderson/raw"
files <- list.files(startingDir, pattern = ".txt")
head(files)
new_names <- paste("PastorAnderson", formatC(seq(length(files)), width = 3, flag = "0"), ".txt", sep = "")
file.rename(from = files, to = new_names)
setwd("~/Documents/Data Science/Capstone/DSI-Religion-2017/data_dsicap_FULL/PeterGomes/raw")
startingDir <- "~/Documents/Data Science/Capstone/DSI-Religion-2017/data_dsicap_FULL/PeterGomes/raw"
files <- list.files(startingDir, pattern = ".txt")
head(files)
new_names <- paste("PeterGomes", formatC(seq(length(files)), width = 3, flag = "0"), ".txt", sep = "")
file.rename(from = files, to = new_names)
setwd("~/Documents/Data Science/Capstone/DSI-Religion-2017/data_dsicap_FULL/Schizophrenia/raw")
startingDir <- "~/Documents/Data Science/Capstone/DSI-Religion-2017/data_dsicap_FULL/Schizophrenia/raw"
files <- list.files(startingDir, pattern = ".txt")
head(files)
new_names <- paste("Schizophrenia", formatC(seq(length(files)), width = 3, flag = "0"), ".txt", sep = "")
file.rename(from = files, to = new_names)
setwd("~/Documents/Data Science/Capstone/DSI-Religion-2017/data_dsicap_FULL/Shepherd/raw")
startingDir <- "~/Documents/Data Science/Capstone/DSI-Religion-2017/data_dsicap_FULL/Shepherd/raw"
files <- list.files(startingDir, pattern = ".txt")
head(files)
new_names <- paste("Shepherd", formatC(seq(length(files)), width = 3, flag = "0"), ".txt", sep = "")
file.rename(from = files, to = new_names)
setwd("~/Documents/Data Science/Capstone/DSI-Religion-2017/data_dsicap_FULL/Stalin/raw")
startingDir <- "~/Documents/Data Science/Capstone/DSI-Religion-2017/data_dsicap_FULL/Stalin/raw"
files <- list.files(startingDir, pattern = ".txt")
head(files)
new_names <- paste("Stalin", formatC(seq(length(files)), width = 3, flag = "0"), ".txt", sep = "")
file.rename(from = files, to = new_names)
setwd("~/Documents/Data Science/Capstone/DSI-Religion-2017/data_dsicap_FULL/Unitarian/raw")
startingDir <- "~/Documents/Data Science/Capstone/DSI-Religion-2017/data_dsicap_FULL/Unitarian/raw"
files <- list.files(startingDir, pattern = ".txt")
head(files)
new_names <- paste("Unitarian", formatC(seq(length(files)), width = 3, flag = "0"), ".txt", sep = "")
file.rename(from = files, to = new_names)
setwd("~/Documents/Data Science/Capstone/DSI-Religion-2017/data_dsicap_FULL/WBC/raw")
startingDir <- "~/Documents/Data Science/Capstone/DSI-Religion-2017/data_dsicap_FULL/WBC/raw"
files <- list.files(startingDir, pattern = ".txt")
head(files)
new_names <- paste("WBC", formatC(seq(length(files)), width = 3, flag = "0"), ".txt", sep = "")
file.rename(from = files, to = new_names)
setwd("~/Documents/Data Science/Capstone/DSI-Religion-2017/data_dsicap_FULL/SeaShepherds/raw")
startingDir <- "~/Documents/Data Science/Capstone/DSI-Religion-2017/data_dsicap_FULL/SeaShepherds/raw"
files <- list.files(startingDir, pattern = ".txt")
head(files)
files[files == "SS01.txt",]
new_names <- paste("SeaShepherds", formatC(seq(length(files)), width = 3, flag = "0"), ".txt", sep = "")
file.rename(from = files, to = new_names)
setwd("~/Documents/Data Science/Capstone/DSI-Religion-2017/data_dsicap_FULL/Unabomber/raw")
startingDir <- "~/Documents/Data Science/Capstone/DSI-Religion-2017/data_dsicap_FULL/Unabomber/raw"
files <- list.files(startingDir, pattern = ".txt")
head(files)
new_names <- paste("Unabomber", formatC(seq(length(files)), width = 3, flag = "0"), ".txt", sep = "")
file.rename(from = files, to = new_names)
setwd("~/Documents/Data Science/Capstone/DSI-Religion-2017/data_dsicap_FULL/Unabomber/raw")
startingDir <- "~/Documents/Data Science/Capstone/DSI-Religion-2017/data_dsicap_FULL/Unabomber/raw"
files <- list.files(startingDir, pattern = ".txt")
head(files)
new_names <- paste("Unabomber", formatC(seq(length(files)), width = 3, flag = "0"), ".txt", sep = "")
file.rename(from = files, to = new_names)
credit <- read.csv("~/Desktop/DSI 6016 2017/credit_PACKT.csv")
str(credit)
table(credit$checking_balance)
credit <- read.csv("~/Documents/Data Science/Machine Learning/credit_PACKT.csv")
str(credit)
table(credit$checking_balance)
table(credit$savings_balance)
summary(credit$months_loan_duration)
summary(credit$amount)
table(credit$default)
set.seed(12345)
credit_rand <- credit[order(runif(1000)), ]
summary(credit$amount)
summary(credit_rand$amount)
head(credit$amount)
head(credit_rand$amount)
credit_train <- credit_rand[1:900, ]
credit_test  <- credit_rand[901:1000, ]
prop.table(table(credit_train$default))
prop.table(table(credit_test$default))
install.packages("C50")
credit_model <- C5.0(credit_train[-17], credit_train$default)
credit_model <- C50(credit_train[-17], credit_train$default)
credit_model <- C5.0(credit_train[-17], credit_train$default)
install.packages("C50")
library(C50)
??C5.0
credit_model <- C5.0(credit_train[-17], credit_train$default)
credit_model
summary(credit_model)
setwd("~/Documents/Data Science/Capstone/DSI-Religion-2017")
library(ggplot2)
library(dplyr)
install.packages("extrafont")
library(extrafont)
font_import() # this takes a minute or two
fonts()
theme_set(theme_grey(base_size = 16))
statsDF <- read.csv("modelOutputSingleDocs/modelStats.csv", stringsAsFactors = F)
statsDF <- statsDF[statsDF$targetWordCount==10,]
ids <- statsDF$runID
numberToSample <- 1
sampleIDs <- sample(ids,numberToSample)
signalDF <- read.csv(paste("modelOutputSingleDocs/logs/modelPredictions-coco_3_cv_3_netAng_30_twc_10_tfidfNoPro_pronoun_bin_1-", sampleIDs[1], ".csv", sep = ""), stringsAsFactors = T)
for (i in 2:numberToSample) {
newDF <- read.csv(paste("modelOutputSingleDocs/logs/modelPredictions-coco_3_cv_3_netAng_30_twc_10_tfidfNoPro_pronoun_bin_1-", sampleIDs[i], ".csv", sep = ""), stringsAsFactors = T)
signalDF <- rbind(signalDF, newDF)
print(sampleIDs[i])
print(dim(newDF))
}
dim(signalDF)
sampleStatsDF <- statsDF[statsDF$runID %in% sampleIDs,]
signalDF$rfResid <- signalDF$rfPred - signalDF$rank
signalDF$svmResid <- signalDF$svmPred - signalDF$rank
signalDF$rfClassResid <- signalDF$rfClassPred - signalDF$rank
signalDF$svmClassResid <- signalDF$svmClassPred - signalDF$rank
titlestring <- paste("Residuals, sample of",numberToSample, "runs\nRF accuracy:",
paste(round(mean(sampleStatsDF$rfAccuracy),2)*100, "%", sep=""),
"::: SVM accuracy:",
paste(round(mean(sampleStatsDF$svmAccuracy),2)*100, "%", sep=""))
rp <- ggplot(signalDF, aes(x=rank)) + ggtitle(titlestring) + ylab("|ei|")
rp <- rp + geom_point(aes(x=rank-0.1, y=abs(rfResid), colour="RF"), size = 3)
rp <- rp + geom_point(aes(x=rank+0.1, y=abs(svmResid), colour="SVM"), size = 3)
rp <- rp + geom_hline(yintercept = 1, linetype = "longdash")
rp
d <- ggplot(signalDF, aes(x=abs(rfResid), y=abs(svmResid))) + ggtitle("SVM vs RF (Single Docs)") + geom_point(aes(colour=rank), size=5) + ylab("SVM") + xlab("Random Forest") + geom_hline(yintercept = 1, linetype = "longdash")  + geom_vline(xintercept = 1, linetype = "longdash")
d + scale_color_gradient2("rank", low = "red", mid = "lightgrey", high = "blue", midpoint = 4.5)
sampleIDs <- sample(ids,length(ids))
signalDF <- read.csv(paste("modelOutputSingleDocs/logs/modelPredictions-coco_3_cv_3_netAng_30_twc_10_tfidfNoPro_pronoun_bin_1-", sampleIDs[1], ".csv", sep = ""), stringsAsFactors = T)
for (i in 2:numberToSample) {
newDF <- read.csv(paste("modelOutputSingleDocs/logs/modelPredictions-coco_3_cv_3_netAng_30_twc_10_tfidfNoPro_pronoun_bin_1-", sampleIDs[i], ".csv", sep = ""), stringsAsFactors = T)
signalDF <- rbind(signalDF, newDF)
print(sampleIDs[i])
print(dim(newDF))
}
bprf <- data.frame(rank = signalDF$rank,
resid = signalDF$rfResid,
model = rep("RF",nrow(signalDF)))
bpsvm <- data.frame(rank = signalDF$rank,
resid = signalDF$svmResid,
model = rep("SVM",nrow(signalDF)))
bpDF <- rbind(bprf,bpsvm)
