anova(categorical.model)
help(assocstats)
??assocstats
install.packages("vcd")
??assocstats
library(vcd)
summary(assocstats(categorical.model))
assocstats(categorical.model)
dim(train)
dim(categorical.model)
View(train)
tab <- xtabs(loss ~ . - id - cont1 - cont2 - cont3 - cont4 - cont5 - cont6 - cont7 - cont8 - cont9 - cont10 - cont11 - cont12 - cont13 - cont14, data=train)
colnames(train)
tab <- xtabs(~ cat1 + cat2 + cat3, data = train)
summary(assocstats(tab))
assocstats(tab)
library(car)
library(vcd)
train <- read.csv("~/Documents/MSDS/STAT 6021/Final Project/train.csv")
for (i in 116)
{
train$cat[i] <- as.factor(train$cat[i])
}
is.factor(train$cat116)
View(train)
full.model <- lm(loss ~. - id, data = train)
summary(full.model)
residualPlots(full.model)
library(car)
# load in training data
train <- read.csv("~/Documents/MSDS/STAT 6021/Final Project/train.csv")
# make the categorical variables factors
for (i in 116)
{
train$cat[i] <- as.factor(train$cat[i])
}
# use random 75% of the rows for training
set.seed(123467)
train.indices = sample(1:nrow(train), as.integer(nrow(train) * 0.75))
# fit the baseline model
full.model = lm(loss ~ .- id, data = train[train.indices, ])
# log transform
full.model.log = lm(log(loss) ~ .- id, data = train[train.indices, ])
# sqrt transform
full.model.sqrt = lm(sqrt(loss) ~ .- id, data = train[train.indices, ])
# calculate MSE of all models
mse.full <- anova(full.model)[["Mean Sq"]][2]
mse.log <- anova(full.model.log)[["Mean Sq"]][2] #best MSE, so best model
mse.sqrt <- anova(full.model.sqrt)[["Mean Sq"]][2]
??predict
log.ypred <- predict(full.model.log, newdata = train[-train.indices, ])
help("predict")
train[-train.indices, ]$predictor
train[-train.indices, ]$loss
id <- which(!(train[-train.indices, ]$loss %in% levels(train[train.indices]$loss)))
# DO MSE TESTING
id <- which(!(train[-train.indices, ]$loss %in% levels(train[train.indices, ]$loss)))
train$
data <- read.csv("~/Documents/MSDS/STAT 6021/Final Project/train.csv")
data <- read.csv("~/Documents/MSDS/STAT 6021/Final Project/train.csv")
View(data)
View(train)
colnames(data)
colnames(train)
train <- data[train.indices, ]
test <- data[-train.indices, ]
# log transform
full.model.log = lm(log(loss) ~ .- id, data = train)
id <- which(!(test$cat75 %in% levels(train$cat75)))
id
id <- which(!(test$loss %in% levels(train$loss)))
id
log.ypred <- predict(full.model.log, newdata = test)
test$cat75
id <- which(!(train$cat75 %in% levels(test$cat75)))
id
train$cat75
levels(train$cat75)
test$cat75)
levels(test$cat75)
library(readr)
train <-read_csv("train.csv")
df <- data.frame(matrix(ncol=1))
cat_train <- train[,2:117]
for (i in 1:116)
{
temp <- cat_train[,i]
l <- length(unique(temp))
df <- cbind(df, l)
names(df)[i+1] = toString(i)
}
df <- df[2:117]
df[116]
length(unique(train$cat116))
View(df)
View(cat_train)
length(unique(train$cat75))
unique(train$cat75)
library(car)
# load in training data
data <- read.csv("~/Documents/MSDS/STAT 6021/Final Project/train.csv")
# make the categorical variables factors
for (i in 116)
{
data$cat[i] <- as.factor(data$cat[i])
}
# use random 75% of the rows for training
set.seed(123467)
train.indices = sample(1:nrow(train), as.integer(nrow(train) * 0.75))
train <- data[train.indices, ]
test <- data[-train.indices, ]
unique(train$cat75)
unique(test$cat75)
test$cat75[C] <- NA
data$cat75 == "C"
count(data$cat75 == "C")
sum(data$cat75 == "C")
which(data$cat75 == "C")
rownum <- which(data$cat75 == "C")
data[-c(rownum), ]
rownum <- which(data$cat75 == "C")
which(data$cat75 == "C")
data <- data[-c(rownum), ]
unique(data$cat75)
# load in training data
data <- read.csv("~/Documents/MSDS/STAT 6021/Final Project/train.csv")
rownum <- which(data$cat75 == "C")
data <- data[-c(rownum), ]
unique(data$cat75)
# make the categorical variables factors
for (i in 116)
{
data$cat[i] <- as.factor(data$cat[i])
}
unique(data$cat75)
# log transform
full.model.log = lm(log(loss) ~ .- id, data = train)
log.ypred <- predict(full.model.log, newdata = test)
which(data$cat89 == "H")
unique(test$cat89)
unique(train$cat89)
which(data$cat89 == "E")
which(data$cat89 == "G")
which(data$cat89 == "I")
which(data$cat89 == "H")
which(data$cat89 == "G")
data <- data[-c(5210,75048), ]
# log transform
full.model.log = lm(log(loss) ~ .- id, data = train)
log.ypred <- predict(full.model.log, newdata = test)
test$cat89
unique(test$cat89)
# make the categorical variables factors
for (i in 116)
{
data$cat[i] <- as.factor(data$cat[i])
}
# use random 75% of the rows for training
set.seed(123467)
train.indices = sample(1:nrow(train), as.integer(nrow(train) * 0.75))
train <- data[train.indices, ]
test <- data[-train.indices, ]
# log transform
full.model.log = lm(log(loss) ~ .- id, data = train)
log.ypred <- predict(full.model.log, newdata = test)
unique(data$cat89)
unique(data$cat92)
data$cat92 == "H"
which(data$92 == "F")
which(data$cat92 == "F")
which(data$cat92 == "H")
which(data$cat92 == "F")
data <- data[-c(165251), ]
# make the categorical variables factors
for (i in 116)
{
data$cat[i] <- as.factor(data$cat[i])
}
# use random 75% of the rows for training
set.seed(123467)
train.indices = sample(1:nrow(train), as.integer(nrow(train) * 0.75))
train <- data[train.indices, ]
test <- data[-train.indices, ]
# log transform
full.model.log = lm(log(loss) ~ .- id, data = train)
log.ypred <- predict(full.model.log, newdata = test)
which(data$cat101 == "K")
which(test$cat101 == "K")
which(train$cat101 == "K")
which(data$cat101 == "U")
data <- data[-c(131247,131351,106553), ]
# use random 75% of the rows for training
set.seed(123467)
train.indices = sample(1:nrow(train), as.integer(nrow(train) * 0.75))
train <- data[train.indices, ]
test <- data[-train.indices, ]
# log transform
full.model.log = lm(log(loss) ~ .- id, data = train)
log.ypred <- predict(full.model.log, newdata = test)
which(data$cat99 == "O")
data <- data[-c(32265,101569,171092), ]
# use random 75% of the rows for training
set.seed(123467)
train.indices = sample(1:nrow(train), as.integer(nrow(train) * 0.75))
train <- data[train.indices, ]
test <- data[-train.indices, ]
log.ypred <- predict(full.model.log, newdata = test)
which(data$cat101 == "B")
levels(data$cat99)
levels(data$cat101)
test$cat101 %in% levels(data$cat101)
which(test$cat101 %in% levels(data$cat101))
levels(test$cat101
levels(test$cat101)
levels(test$cat101)
library(car)
# load in training data
data <- read.csv("~/Documents/MSDS/STAT 6021/Final Project/train.csv")
# make the categorical variables factors
for (i in 116)
{
data$cat[i] <- as.factor(data$cat[i])
}
# use random 75% of the rows for training
set.seed(123467)
train.indices = sample(1:nrow(train), as.integer(nrow(train) * 0.75))
train <- data[train.indices, ]
test <- data[-train.indices, ]
# use random 75% of the rows for training
set.seed(123467)
train.indices = sample(1:nrow(data), as.integer(nrow(data) * 0.75))
train <- data[train.indices, ]
test <- data[-train.indices, ]
# log transform
full.model.log = lm(log(loss) ~ .- id, data = train)
log.ypred <- predict(full.model.log, newdata = test)
which(test$cat75 == "C")
test <- test[-c(7715), ]
log.ypred <- predict(full.model.log, newdata = test)
which(test$cat89 == "G")
test <- test[-c(18783), ]
log.ypred <- predict(full.model.log, newdata = test)
which(test$cat101 == "U")
test <- test[-c(26626), ]
log.ypred <- predict(full.model.log, newdata = test)
which(test$cat102 == "J")
test <- test[-c(32666), ]
log.ypred <- predict(full.model.log, newdata = test)
which(test$cat109 == "BF")
which(test$cat109 == "BF"|test$cat109 == "BP"|test$cat109 == "J"|test$cat109 == "ZZ")
test <- test[-c(10659, 12839, 22078, 36571), ]
log.ypred <- predict(full.model.log, newdata = test)
which(test$cat110 == "BD"|test$cat109 == "CB")
test <- test[-c(6180), ]
log.ypred <- predict(full.model.log, newdata = test)
which(test$cat110 == "BD"|test$cat110 == "CB")
test <- test[-c(41469), ]
log.ypred <- predict(full.model.log, newdata = test)
which(test$cat113 == "P")
test <- test[-c(31340), ]
log.ypred <- predict(full.model.log, newdata = test)
which(test$cat114 == "W")
test <- test[-c(15133), ]
log.ypred <- predict(full.model.log, newdata = test)
which(test$cat116 == "AD"|test$cat116 == "AE"|test$cat116 == "AN"|test$cat116 == "BF"|test$cat116 == "BG"|test$cat116 == "EV"|test$cat116 == "FM"|test$cat116 == "HU"|test$cat116 == "IB"|test$cat116 == "JT"|test$cat116 == "MT")
test <- test[-c(12349, 20455, 20961, 25070, 25350, 27803, 28112, 35329, 37016, 43689, 43899), ]
log.ypred <- predict(full.model.log, newdata = test)
log.ypred
log.ypred
test <- cbind(test, log.ypred)
View(test)
colnames(test)
test["standard error"] <- NA
test["standarderror"] <- NA
test$standarderror <- ((test$loss - test$log.ypred)^2)
test$standarderror
mse.test <- mean(test$standarderror)
mse.test
# load in data
data <- read.csv("~/Documents/MSDS/STAT 6021/Final Project/train.csv")
# make the categorical variables factors
for (i in 116)
{
data$cat[i] <- as.factor(data$cat[i])
}
load("~/Downloads/training.rda")
View(training)
load("~/Downloads/testing.rda")
is.factor(testing$cat1)
is.factor(training$cat98)
is.factor(training$cont1)
# fit the baseline model
full.model = lm(loss ~ ., data = training)
# run the summary
summary(full.model)
# Normal Probabilty plot of residuals
qqnorm(resid(full.model))
qqline(resid(full.model))
R.student.residuals <- rstudent(full.model) # R-student
plot(full.model.log$fitted.values, R.student.residuals,
main = 'R-Student Residuals Plot', xlab = "Fitted Values", ylab = "R.Student Residuals"); abline(h = 0)
plot(full.model$fitted.values, R.student.residuals,
main = 'R-Student Residuals Plot', xlab = "Fitted Values", ylab = "R.Student Residuals"); abline(h = 0)
# log transform
full.model.log = lm(log(loss) ~ ., data = training)
# run the summary
summary(full.model.log)
# Normal Probabilty plot of residuals
qqnorm(resid(full.model.log))
qqline(resid(full.model.log))
R.student.residuals <- rstudent(full.model.log) # R-student
# Plot Residuals vs Predicted Response
R.student.residuals <- rstudent(full.model.log) # R-student
plot(full.model.log$fitted.values, R.student.residuals,
main = 'R-Student Residuals Plot', xlab = "Fitted Values", ylab = "R.Student Residuals"); abline(h = 0)
# calculate training MSE of both models
mse.full <- anova(full.model)[["Mean Sq"]][2]
mse.log <- anova(full.model.log)[["Mean Sq"]][2] #best MSE, so best model
mse.full
mse.log
### Predict Using Testing Set ###
log.ypred <- predict(full.model.log, newdata = testing)
which(testing$cat75 == "C")
testing <- testing[-c(6135), ]
log.ypred <- predict(full.model.log, newdata = testing)
which(testing$cat101 == "K")
testing <- testing[-c(26303, 26330), ]
log.ypred <- predict(full.model.log, newdata = testing)
which(test$cat109 == "BF")
which(testing$cat109 == "BF")
testing <- testing[-c(8396), ]
log.ypred <- predict(full.model.log, newdata = testing)
which(testing$cat110 == "BI"|testing$cat110 == "BM"|testing$cat110 == "EH")
testing <- testing[-c(6029, 7876, 35019), ]
log.ypred <- predict(full.model.log, newdata = testing)
which(testing$cat113 == "AR"|testing$cat113 == "T")
testing <- testing[-c(20674, 34772, 36621), ]
log.ypred <- predict(full.model.log, newdata = testing)
which(testing$cat114 == "G")
testing <- testing[-c(29983), ]
og.ypred <- predict(full.model.log, newdata = testing)
which(testing$cat116 == "AN"|testing$cat116 == "AP"|testing$cat116 == "AS"|testing$cat116 == "C"|testing$cat116 == "CC"|testing$cat116 == "DY"|testing$cat116 == "HO"|testing$cat116 == "IK"|testing$cat116 == "JI"|testing$cat116 == "JT"|testing$cat116 == "KH"|testing$cat116 == "MF"|testing$cat116 == "MT")
test <- test[-c(1736, 7961, 9960, 12140, 14061, 15610, 19640, 20271, 22252, 22586, 25871, 28831, 29611, 30891), ]
testing <- testing[-c(1736, 7961, 9960, 12140, 14061, 15610, 19640, 20271, 22252, 22586, 25871, 28831, 29611, 30891), ]
log.ypred <- predict(full.model.log, newdata = testing)
testing <- cbind(testing, log.ypred)
testing["standarderror"] <- NA
testing$standarderror <- ((testing$loss - testing$log.ypred)^2)
mse.test <- mean(testing$standarderror)
mse.test
full.model.log$df.residual
mse.log <- sum(residuals(full.model.log)^2)/full.model.log$df.residual
mse.log
anova(full.model.log)
exp(mse.log)
anova(full.model.log)[["Mean Sq"]]
sum(residuals(full.model.log)^2)
full.model.log$df.residual
full.model.log$hat
full.model.log$fitted.values
mse.log <- mean(sum(residuals(full.model.log)^2))
mse.log
sum(residuals(full.model.log)^2)
full.model.log$residuals
sum(full.model.log$residuals^2)
mean(sum(full.model.log$residuals^2))
mse.log <- mean(residuals(full.model.log)^2)
mse.log
log(mse.log)
testing$standarderror
sum(testing$standarderror)
nrow(testing)
(sum(testing$standarderror))/nrow(testing)
mse.test <- mean(testing$standarderror)
mse.test
full.model.log$fitted.values[1]
training#loss[1]
training$loss[1]
exp(full.model.log$fitted.values[1])
(exp(full.model.log$fitted.values) - training$loss)^2
mean((exp(full.model.log$fitted.values) - training$loss)^2)
mse.log <- mean((exp(full.model.log$fitted.values) - training$loss)^2) #best MSE, so best model
mse.log
testing$log.ypred
testing$log.ypred[1]
testing$loss[1]
exp(testing$log.ypred[1])
View(testing)
testing <- testing[1:132]
testing[132]
testing[132,1]
testing <- testing[1:131]
testing <- cbind(testing, exp(log.ypred))
testing["standarderror"] <- NA
# populate the "standarderror" column
testing$standarderror <- ((testing$loss - testing$`exp(log.ypred)`)^2)
testing$standarderror[1]
mse.test <- mean(testing$standarderror)
mse.test
# load the package "irr"
library(irr)
# load the package "psy"
library(psy)
# load the package "irr"
library(irr)
# load the package "psy"
library(psy)
## input the data ##
# scores from the 2 raters: the intern (I) and ground truth (T) aka Zain/Jonathan/Peter
# the scores below are based on the Malcolm X example
I = c(3,6,5,6,5,6,4,2,2,2,2,2)
T = c(3,2,2,2,2,2,2,2,2,2,2,2)
# convert it to a data frame
df = data.frame(I,T)
## calculate Cohen's Kappa ##
# kappa2 shows the number of subjects, raters, and gives z-statistic and p-value
kappa2(df, "unweighted")
# ckappa shows the matrix of scores
ckappa(df)
install.packages('RWeka')
library('RWeka')
install.packages(RWeka)
"RWeka"
install.packages('RWeka')
install.packages('RWeka')
library('RWeka')
install.packages("rJava", type = 'source')
install.packages("RWeka")
library("RWeka")
library(RWeka)
install.packages("RWeka")
library(RWeka)
library("RWeka", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("rJava", type = 'source')
library('rJava')
library('rJava')
install.packages("RWeka")
library('RWeka')
library(XML)
library(tm)
library(MASS)
library(SnowballC)
#######################
### Import the Data ###
#######################
setwd("~/Documents/MSDS/DSI-Religion-2017")
## read in docRanks.csv file ##
docRanks <- read.csv(paste(c(toString(getwd()),"/refData/docRanks.csv"),collapse = ''))
## get single docs ##
# load in first file
file <- paste(c(toString(getwd()), "/data_dsicap_single/", toString(docRanks$groupName[1]), "/raw/", toString(docRanks$groupName[1]), ".txt"), collapse = '')
rawtext <- readLines(file, encoding = "utf-8")
df <- as.data.frame(rawtext)
# get temp data frame
dftemp <- data.frame(matrix(ncol = 1))
names(dftemp)[1] <- "rawtext"
# load rest of docs in temp data frame one by one and append
for (i in 2:(nrow(docRanks)))
{
file <- paste(c(toString(getwd()), "/data_dsicap_single/", toString(docRanks$groupName[i]), "/raw/", toString(docRanks$groupName[i]), ".txt"), collapse = '')
rawtext <- readLines(file, encoding = "utf-8")
if (length(rawtext) > 1)
{
rawtext <- toString(paste(rawtext))
}
dftemp$rawtext <- rawtext
df <- rbind(df, dftemp)
}
master <- cbind(df, docRanks)
master <- master[,c(1,4)]
master$X1 <- ifelse(master$rank == 1, 1, 0)
master$X2 <- ifelse(master$rank == 2, 1, 0)
master$X3 <- ifelse(master$rank == 3, 1, 0)
master$X4 <- ifelse(master$rank == 4, 1, 0)
master$X5 <- ifelse(master$rank == 5, 1, 0)
master$X6 <- ifelse(master$rank == 6, 1, 0)
master$X7 <- ifelse(master$rank == 7, 1, 0)
master$X8 <- ifelse(master$rank == 8, 1, 0)
master$X9 <- ifelse(master$rank == 9, 1, 0)
setwd("~/Documents/MSDS/DSI-Religion-2017")
## read in docRanks.csv file ##
docRanks <- read.csv(paste(c(toString(getwd()),"/refData/docRanks.csv"),collapse = ''))
## get single docs ##
# load in first file
file <- paste(c(toString(getwd()), "/data_dsicap_single/", toString(docRanks$groupName[1]), "/raw/", toString(docRanks$groupName[1]), ".txt"), collapse = '')
rawtext <- readLines(file, encoding = "utf-8")
df <- as.data.frame(rawtext)
# get temp data frame
dftemp <- data.frame(matrix(ncol = 1))
names(dftemp)[1] <- "rawtext"
# load rest of docs in temp data frame one by one and append
for (i in 2:(nrow(docRanks)))
{
file <- paste(c(toString(getwd()), "/data_dsicap_single/", toString(docRanks$groupName[i]), "/raw/", toString(docRanks$groupName[i]), ".txt"), collapse = '')
rawtext <- readLines(file, encoding = "utf-8")
if (length(rawtext) > 1)
{
rawtext <- toString(paste(rawtext))
}
dftemp$rawtext <- rawtext
df <- rbind(df, dftemp)
}
master <- cbind(df, docRanks)
master <- master[,c(1,4)]
## get single docs ##
# load in first file
file <- paste(c(toString(getwd()), "/data_dsicap_single/", toString(docRanks$groupName[1]), "/raw/", toString(docRanks$groupName[1]), ".txt"), collapse = '')
rawtext <- readLines(file, encoding = "utf-8")
df <- as.data.frame(rawtext)
file
toString(docRanks$groupName[1]
toString(docRanks$groupName[1])
