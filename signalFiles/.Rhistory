library(datasets)
data("Groceries")
inspect(Groceries[1:5])
itemFrequency(Groceries[,1:3])
itemFrequencyPlot(Groceries, support = 0.1)
itemFrequencyPlot(Groceries, topN=20)
image(sample(Groceries, 100))
myrules<- apriori(data = Groceries, parameter = list(support = 0.1, confidence = 0.8, minlen = 1))
myrules<- apriori(data = Groceries, parameter = list(support = 0.1, confidence = 0.25, minlen = 1))
summary(groceryrules)
summary(myrules)
inspect(myrules[1:3])
berryrules<- subset(myrules, items %in% 'berries')
inspect(berryrules)
inspect(myrules)
myrules<- apriori(data = Groceries, parameter = list(support = 0.1, confidence = 0.25, minlen = 1))
summary(myrules)
inspect(myrules)
inspect(sort(myrules, by = 'lift')[1:5])
inspect(berryrules)
berryrules<- subset(myrules, items %in% 'berries')
inspect(berryrules)
?apriori
myrules<- apriori(data = Groceries, parameter = list(support = 0.1, confidence = 0.25, minlen = 2))
myrules<- apriori(data = Groceries, parameter = list(support = 0.01, confidence = 0.25, minlen = 1))
summary(myrules)
inspect(myrules)
inspect(sort(myrules, by = 'lift')[1:5])
berryrules<- subset(myrules, items %in% 'berries')
inspect(berryrules)
frozenrules<- subset(myrules, items %in% 'frozenmeals')
inspect(Groceries[1:5])
itemFrequency(Groceries[,1:3])
frozenrules<- subset(myrules, items %in% 'frozen')
names(Groceries)
library(arules)
library(datasets)
data("Income")
myrules<- apriori(data = Income, parameter = list(support = 0.01, confidence = 0.1))
myrules<- apriori(data = Income, parameter = list(support = 0.01, confidence = 0.15))
myrules<- apriori(data = Income, parameter = list(support = 0.01, confidence = 0.20))
myrules<- apriori(data = Income, parameter = list(support = 0.01, confidence = 0.25))
myrules<- apriori(data = Income, parameter = list(support = 0.01, confidence = 0.25, minlen = 1, maxlen = 10))
myrules<- apriori(data = Income, parameter = list(support = 0.05, confidence = 0.25, minlen = 1, maxlen = 10))
myrules<- apriori(data = Income, parameter = list(support = 0.05, confidence = 0.3, minlen = 1, maxlen = 10))
myrules<- apriori(data = Income, parameter = list(support = 0.1, confidence = 0.3, minlen = 1, maxlen = 10))
inspect(sort(myrules, by = 'lift')[1:10])
myrules<- apriori(data = Income, parameter = list(support = 0.1, confidence = 0.25, minlen = 1, maxlen = 10))
inspect(sort(myrules, by = 'lift')[1:10])
myrules<- apriori(data = Income, parameter = list(support = 0.1, confidence = 0.25, minlen = 1, maxlen = 20))
inspect(sort(myrules, by = 'lift')[1:10])
myrules<- apriori(data = Income, parameter = list(support = 0.1, confidence = 0.20, minlen = 1, maxlen = 20))
inspect(sort(myrules, by = 'lift')[1:10])
myrules<- apriori(data = Income, parameter = list(support = 0.05, confidence = 0.20, minlen = 1, maxlen = 20))
inspect(sort(myrules, by = 'lift')[1:10])
myrules<- apriori(data = Income, parameter = list(support = 0.05, confidence = 0.15, minlen = 1, maxlen = 20))
inspect(sort(myrules, by = 'lift')[1:10])
myrules<- apriori(data = Income, parameter = list(support = 0.01, confidence = 0.15, minlen = 1, maxlen = 25))
inspect(sort(myrules, by = 'lift')[1:10])
install.packages("e1071")
install.packages("mlbench")
library(e1071)
library(mlbench)
data(HouseVotes84, package = "mlbench")
head(HouseVotes84, 5)
str(HouseVotes84)
table(HouseVotes84$Class)
HouseVotes84$Class <- factor(HouseVotes84$Class)
str(HouseVotes84$Class)
plot(as.factor(HouseVotes84[,7]))
title(main="Total Vote cast for issue 6", xlab="vote", ylab="# reps")
plot(as.factor(HouseVotes84[HouseVotes84$Class=='republican', 7]))
title(main='Republican votes cast for issue 6', xlab='vote', ylab='#reps')
plot(as.factor(HouseVotes84[HouseVotes84$Class=='democrat', 7]))
title(main='Democrat votes cast for issue 6', xlab='vote', ylab='#reps')
head(HouseVotes84, 5)
table(HouseVotes84$Class)
HouseVotes84$Class <- factor(HouseVotes84$Class)
str(HouseVotes84$Class)
plot(as.factor(HouseVotes84[,7]))
title(main="Total Vote cast for issue 6", xlab="vote", ylab="# reps")
plot(as.factor(HouseVotes84[HouseVotes84$Class=='republican', 7]))
title(main='Republican votes cast for issue 6', xlab='vote', ylab='#reps')
plot(as.factor(HouseVotes84[HouseVotes84$Class=='democrat', 7]))
title(main='Democrat votes cast for issue 6', xlab='vote', ylab='#reps')
na_by_col_class <- function (col,cls){return(sum(is.na(HouseVotes84[,col]) & HouseVotes84$Class==cls))}
p_y_col_class <- function(col,cls){
sum_y<-sum(HouseVotes84[,col]=="y" & HouseVotes84$Class==cls,na.rm = TRUE)
sum_n<-sum(HouseVotes84[,col]=="n" & HouseVotes84$Class==cls,na.rm = TRUE)
return(sum_y/(sum_y+sum_n))}
p_y_col_class(7,"democrat")
p_y_col_class(7,"republican")
na_by_col_class(7,"democrat")
na_by_col_class(7,"republican")
for (i in 2:ncol(HouseVotes84)) {
if(sum(is.na(HouseVotes84[,i])>0)) { #is sum of NAs >0
c1 <- which(is.na(HouseVotes84[,i])& HouseVotes84$Class=="democrat",arr.ind = TRUE) #check values that are NAs and class
c2 <- which(is.na(HouseVotes84[,i])& HouseVotes84$Class=="republican",arr.ind = TRUE)
HouseVotes84[c1,i] <-
ifelse(runif(na_by_col_class(i,"democrat"))<p_y_col_class(i,"democrat"),"y","n")
HouseVotes84[c2,i] <-
ifelse(runif(na_by_col_class(i,"republican"))<p_y_col_class(i,"republican"),"y","n")}
}
head(HouseVotes84, 5)
HouseVotes84[ ,'train'] <- ifelse(runif(nrow(HouseVotes84))<0.80,1,0)
trainColNum <- grep('train',names(HouseVotes84))
trainHouseVotes84 <- HouseVotes84[HouseVotes84$train==1,-trainColNum]
testHouseVotes84 <- HouseVotes84[HouseVotes84$train==0,-trainColNum]
nb_model <- naiveBayes(Class~.,data = trainHouseVotes84)
nb_model
summary(nb_model)
nb_test_predict <- predict(nb_model,testHouseVotes84[,-1])
table(pred=nb_test_predict,true=testHouseVotes84$Class)
mean(nb_test_predict==testHouseVotes84$Class)
nb_multiple_runs <- function(train_fraction,n){
fraction_correct <- rep(NA,n)
for (i in 1:n){
HouseVotes84[,'train'] <- ifelse(runif(nrow(HouseVotes84))<train_fraction,1,0)
trainColNum <- grep('train',names(HouseVotes84))
trainHouseVotes84 <- HouseVotes84[HouseVotes84$train==1,-trainColNum]
testHouseVotes84 <- HouseVotes84[HouseVotes84$train==0,-trainColNum]
nb_model <- naiveBayes(Class~.,data = trainHouseVotes84)
nb_test_predict <- predict(nb_model,testHouseVotes84[,-1])
fraction_correct[i] <- mean(nb_test_predict==testHouseVotes84$Class)
}
return(fraction_correct)
}
fraction_correct_predictions <- nb_multiple_runs(0.8,20)
fraction_correct_predictions
summary(fraction_correct_predictions)
sd(fraction_correct_predictions)
install.packages("bnlearn")
library(bnlearn)
data("coronary")
head(coronary)
bn_df <- data.frame(coronary)
res <- hc(bn_df)
plot(res)
res$arcs <- res$arcs[-which((res$arcs[,'from'] == "M..Work" & res$arcs[,'to'] == "Family")),]
plot(res)
res <- set.arc(res, from = "Family", to = "Pressure")
plot(res)
fittedbn <- bn.fit(res, data = bn_df)
print(fittedbn$Proteins)
print(fittedbn$M..Work)
cpquery(fittedbn, event = (Proteins=="<3"), evidence = ( Smoking=="no"))
cpquery(fittedbn, event = (Proteins=="<3"), evidence = ( Smoking=="no" & Pressure==">140" ) )
cpquery(fittedbn, event = (Pressure==">140"), evidence = ( Proteins=="<3" ) )
cpquery(fittedbn, event = (Proteins=="<3"), evidence = ( Smoking=="no" & Pressure==">140" ) )
cpquery(fittedbn, event = (Proteins=="<3"), evidence = ( Smoking=="no"))
library(randomForest)
?randomForest
install.packages('genalg')
library(genalg)
library(ggplot2)
dataset <- data.frame(item = c("pocketknife", "beans", "potatoes", "onions",
"sleeping bag", "rope", "compass"), survivalpoints = c(10, 20, 15, 2, 30,
10, 30), weight = c(1, 5, 10, 1, 7, 5, 1))
dataset
weightlimit <- 20
chromosome = c(1, 0, 0, 1, 1, 0, 0)
dataset[chromosome == 1, ]
cat(chromosome %*% dataset$survivalpoints)
?cat
evalFunc <- function(x) {
current_solution_survivalpoints <- x %*% dataset$survivalpoints
current_solution_weight <- x %*% dataset$weight
if (current_solution_weight > weightlimit)
return(0) else return(-current_solution_survivalpoints)
}
iter = 100
GAmodel <- rbga.bin(size = 7, popSize = 200, iters = iter, mutationChance = 0.01,
elitism = T, evalFunc = evalFunc, verbose = TRUE)
cat(genalg:::summary.rbga(GAmodel))
solution = c(1, 1, 0, 1, 1, 1, 1)
dataset[solution == 1, ]
cat(paste(solution %*% dataset$survivalpoints, "/", sum(dataset$survivalpoints)))
require(genalg)
evaluate <- function(string=c()) {
returnVal = NA;
if (length(string) == 2) {
returnVal = abs(string[1]-pi) + abs(string[2]-sqrt(50));
} else {
stop("Expecting a chromosome of length 2!");
}
returnVal
}
monitor <- function(obj) {
# plot the population
xlim = c(obj$stringMin[1], obj$stringMax[1]);
ylim = c(obj$stringMin[2], obj$stringMax[2]);
plot(obj$population, xlim=xlim, ylim=ylim,
xlab="pi", ylab="sqrt(50)");
}
rbga.results = rbga(stringMin=c(1, 1), stringMax=c(5, 10), popSize = 200, monitorFunc=monitor,
evalFunc=evaluate, verbose=TRUE, mutationChance=0.01)
plot(rbga.results)
plot(rbga.results, type="hist")
plot(rbga.results, type="vars")
library(genalg)
library(ggplot2)
dataset
chromosome = c(1, 0, 0, 1, 1, 0, 0)
dataset[chromosome == 1, ]
dataset <- data.frame(item = c("pizza", "steak", "chips", "chicken",
"broccoli", "apples", "bread", "salmon"), nutrition = c(1, 10, 3, 15, 20,
17, 1, 25), cost = c(5, 8, 3, 4, 2, 3, 2, 10))
dataset
budget <- 40
chromosome = c(1, 0, 0, 1, 1, 0, 0)
dataset[chromosome == 1, ]
dataset <- data.frame(item = c("pizza", "steak", "chips", "chicken",
"broccoli", "apples", "bread", "salmon"), nutrition = c(1, 10, 3, 15, 20,
17, 1, 25), calories = c(700, 450, 300, 200, 50, 75, 200, 200), cost = c(5, 8, 3, 4, 2, 3, 2, 10))
dataset
budget <- 40
chromosome = c(1, 0, 0, 1, 1, 0, 0)
dataset[chromosome == 1, ]
cat(chromosome %*% dataset$calories)
str(dataset)
dataset
## This is the budget for my shopping trip
budget <- 40
## For this problem, chromosomes represent which items are to be taken and which
## are to be left behind.  "1" indicates that the object should be packed and
## taken, while "0" indicates that the corresponding object should be left behind.
## Here is an example chromosome:
chromosome = c(1, 0, 0, 1, 1, 0, 0)
dataset[chromosome == 1, ]
cat(chromosome %*% dataset$calories)
cat(chromosome %*% dataset$nutrition)
cat(chromosome %*% dataset$cost)
library(genalg)
library(ggplot2)
## Create dataset to reflect objects, how necessary each object is to survival and
## the weight of each object
dataset <- data.frame(item = c("pocketknife", "beans", "potatoes", "onions",
"sleeping bag", "rope", "compass"), survivalpoints = c(10, 20, 15, 2, 30,
10, 30), weight = c(1, 5, 10, 1, 7, 5, 1))
dataset
## Set a weight limit for what you can handle carrying in your backpack.
weightlimit <- 20
chromosome = c(1, 0, 0, 1, 1, 0, 0)
dataset[chromosome == 1, ]
cat(chromosome %*% dataset$survivalpoints)
chromosome = c(1, 0, 0, 1, 1, 0, 0, 1)
dataset[chromosome == 1, ]
dataset <- data.frame(item = c("pizza", "steak", "chips", "chicken",
"broccoli", "apples", "bread", "salmon"), nutrition = c(1, 10, 3, 15, 20,
17, 1, 25), calories = c(700, 450, 300, 200, 50, 75, 200, 200), cost = c(5, 8, 3, 4, 2, 3, 2, 10))
dataset
budget <- 40
chromosome = c(1, 0, 0, 1, 1, 0, 0, 1)
dataset[chromosome == 1, ]
cat(chromosome %*% dataset$cost)
evalFunc <- function(x) {
current_solution_cost <- x %*% dataset$cost
current_solution_nutrition <- x %*% dataset$nutrition
current_solution_calories<- x %*% dataset$calories
if (current_solution_cost > budget)
return(0) else return(-current_solution_nutrition -current_solution_calories)
}
GAmodel <- rbga.bin(size = 7, popSize = 200, iters = iter, mutationChance = 0.01,
elitism = T, evalFunc = evalFunc, verbose = TRUE)
cat(genalg:::summary.rbga(GAmodel))
iter = 100
GAmodel <- rbga.bin(size = 7, popSize = 200, iters = iter, mutationChance = 0.01,
elitism = T, evalFunc = evalFunc, verbose = TRUE)
cat(genalg:::summary.rbga(GAmodel))
cat(chromosome %*% dataset$cost)
library(genalg)
library(ggplot2)
## Create dataset to reflect objects, how necessary each object is to survival and
## the weight of each object
dataset <- data.frame(item = c("pocketknife", "beans", "potatoes", "onions",
"sleeping bag", "rope", "compass"), survivalpoints = c(10, 20, 15, 2, 30,
10, 30), weight = c(1, 5, 10, 1, 7, 5, 1))
dataset
## Set a weight limit for what you can handle carrying in your backpack.
weightlimit <- 20
## For this problem, chromosomes represent which items are to be taken and which
## are to be left behind.  "1" indicates that the object should be packed and
## taken, while "0" indicates that the corresponding object should be left behind.
## Here is an example chromosome:
chromosome = c(1, 0, 0, 1, 1, 0, 0)
## Let's look at what the chromosome represents:
dataset[chromosome == 1, ]
## We can check the sum of the survival points for this particular chromosome:
cat(chromosome %*% dataset$survivalpoints)
evalFunc <- function(x) {
current_solution_survivalpoints <- x %*% dataset$survivalpoints
current_solution_weight <- x %*% dataset$weight
if (current_solution_weight > weightlimit)
return(0) else return(-current_solution_survivalpoints)
}
iter = 100
GAmodel <- rbga.bin(size = 7, popSize = 200, iters = iter, mutationChance = 0.01,
elitism = T, evalFunc = evalFunc, verbose = TRUE)
library(genalg)
library(ggplot2)
## I am going to create a data set that contains food items, how much they cost, their nutritional
## value and their calories ( I estimated these values). The goal is to maximize nutrition, calories
## while staying under budget
dataset <- data.frame(item = c("pizza", "steak", "chips", "chicken",
"broccoli", "apples", "bread", "salmon"), nutrition = c(1, 10, 3, 15, 20,
17, 1, 25), calories = c(700, 450, 300, 200, 50, 75, 200, 200), cost = c(5, 8, 3, 4, 2, 3, 2, 10))
dataset
## This is the budget for my shopping trip
budget <- 40
chromosome = c(1, 0, 0, 1, 1, 0, 0, 1)
dataset[chromosome == 1, ]
cat(chromosome %*% dataset$cost)
evalFunc <- function(x) {
current_solution_cost <- x %*% dataset$cost
current_solution_nutrition <- x %*% dataset$nutrition
current_solution_calories<- x %*% dataset$calories
if (current_solution_cost > budget)
return(0) else return(-current_solution_nutrition -current_solution_calories)
}
iter = 100
GAmodel <- rbga.bin(size = 8, popSize = 200, iters = iter, mutationChance = 0.01,
elitism = T, evalFunc = evalFunc, verbose = TRUE)
cat(genalg:::summary.rbga(GAmodel))
dataset[solution == 1, ]
solution = c(1, 1, 1, 1, 1, 1, 1)
dataset[solution == 1, ]
budget <- 25
GAmodel <- rbga.bin(size = 8, popSize = 200, iters = iter, mutationChance = 0.01,
elitism = T, evalFunc = evalFunc, verbose = TRUE)
cat(genalg:::summary.rbga(GAmodel))
solution = c(1, 1, 1, 1,0, 1, 1, 0)
dataset[solution == 1, ]
budget <- 20
GAmodel <- rbga.bin(size = 8, popSize = 200, iters = iter, mutationChance = 0.01,
elitism = T, evalFunc = evalFunc, verbose = TRUE)
cat(genalg:::summary.rbga(GAmodel))
solution = c(1, 1, 1, 0 ,1 , 0, 1, 0)
dataset[solution == 1, ]
cat(paste(solution %*% dataset$nutrition, "/", sum(dataset$nutrition)))
cat(paste(solution %*% dataset$calories, "/", sum(dataset$calories)))
solution = c(1, 1, 1, 0 ,1 , 0, 1, 0)
dataset[solution == 1, ]
dataset <- data.frame(item = c("pizza", "steak", "chips", "chicken",
"broccoli", "apples", "bread", "salmon"), nutrition = c(0, 15, 1, 20, 30,
17, 0, 50), calories = c(700, 450, 300, 200, 50, 75, 200, 200), cost = c(5, 8, 3, 4, 2, 3, 2, 10))
dataset
budget <- 20
chromosome = c(1, 0, 0, 1, 1, 0, 0, 1)
dataset[chromosome == 1, ]
cat(chromosome %*% dataset$cost)
evalFunc <- function(x) {
current_solution_cost <- x %*% dataset$cost
current_solution_nutrition <- x %*% dataset$nutrition
current_solution_calories<- x %*% dataset$calories
if (current_solution_cost > budget)
return(0) else return(-current_solution_nutrition -current_solution_calories)
}
iter = 100
GAmodel <- rbga.bin(size = 8, popSize = 200, iters = iter, mutationChance = 0.01,
elitism = T, evalFunc = evalFunc, verbose = TRUE)
cat(genalg:::summary.rbga(GAmodel))
solution = c(1, 1, 1, 0 ,1 , 0, 1, 0)
dataset[solution == 1, ]
cat(paste(solution %*% dataset$nutrition, "/", sum(dataset$nutrition))) #35/92
cat(paste(solution %*% dataset$calories, "/", sum(dataset$calories))) #1700/2175
evalFunc <- function(x) {
current_solution_cost <- x %*% dataset$cost
current_solution_nutrition <- x %*% dataset$nutrition
current_solution_calories<- x %*% dataset$calories
if (current_solution_cost > budget)
return(0) else return(-current_solution_calories-current_solution_nutrition )
}
GAmodel <- rbga.bin(size = 8, popSize = 200, iters = iter, mutationChance = 0.01,
elitism = T, evalFunc = evalFunc, verbose = TRUE)
cat(genalg:::summary.rbga(GAmodel))
solution = c(1, 1, 1, 0 ,1 , 0, 1, 0)
dataset[solution == 1, ]
cat(paste(solution %*% dataset$nutrition, "/", sum(dataset$nutrition))) #46/133
cat(paste(solution %*% dataset$calories, "/", sum(dataset$calories))) #1700/2175
x<- scale(dataset$nutrition)
dataset <- data.frame(item = c("pocketknife", "beans", "potatoes", "onions",
"sleeping bag", "rope", "compass"), survivalpoints = c(10, 20, 15, 2, 30,
10, 30), weight = c(1, 5, 10, 1, 7, 5, 1))
dataset
weightlimit <- 20
dataset$calories<- scale(dataset$calories)
dataset$nutrition<- scale(dataset$nutrition)
View(x)
dataset$calories<-(dataset$calories - mean(dataset$calories)) / sd(dataset$calories)
View(dataset)
library(genalg)
library(ggplot2)
## I am going to create a data set that contains food items, how much they cost, their nutritional
## value and their calories ( I estimated these values). The goal is to maximize nutrition, calories
## while staying under budget
dataset <- data.frame(item = c("pizza", "steak", "chips", "chicken",
"broccoli", "apples", "bread", "salmon"), nutrition = c(0, 15, 1, 20, 30,
17, 0, 50), calories = c(700, 450, 300, 200, 50, 75, 200, 200), cost = c(5, 8, 3, 4, 2, 3, 2, 10))
dataset
## This is the budget for my shopping trip
budget <- 20
## For this problem, chromosomes represent which items are to be taken and which
## are to be left behind.  "1" indicates that the object should be packed and
## taken, while "0" indicates that the corresponding object should be left behind.
## Here is an example chromosome:
chromosome = c(1, 0, 0, 1, 1, 0, 0, 1)
dataset[chromosome == 1, ]
## We can check the sum of the calories and nutrition for this particular chromosome:
cat(chromosome %*% dataset$cost)
dataset$calories<-(dataset$calories - mean(dataset$calories)) / sd(dataset$calories)
dataset$calories<-(dataset$calories - mean(dataset$calories)) / sd(dataset$calories)
dataset$nutrition<- (dataset$nutrition - mean(dataset$nutrition))/sd(dataset$nutrition)
dataset <- data.frame(item = c("pizza", "steak", "chips", "chicken",
"broccoli", "apples", "bread", "salmon"), nutrition = c(0, 15, 1, 20, 30,
17, 0, 50), calories = c(700, 450, 300, 200, 50, 75, 200, 200), cost = c(5, 8, 3, 4, 2, 3, 2, 10))
dataset
## This is the budget for my shopping trip
budget <- 20
#Scale Data
dataset$calories<-(dataset$calories - mean(dataset$calories)) / sd(dataset$calories)
dataset$nutrition<- (dataset$nutrition - mean(dataset$nutrition))/sd(dataset$nutrition)
## For this problem, chromosomes represent which items are to be taken and which
evalFunc <- function(x) {
current_solution_cost <- x %*% dataset$cost
current_solution_nutrition <- x %*% dataset$nutrition
current_solution_calories<- x %*% dataset$calories
if (current_solution_cost > budget)
return(0) else return(-current_solution_calories-current_solution_nutrition )
}
## Next, the number of iterations is chosen and the model is designed and run.
iter = 100
## To run the model, we give the number of genes in the chromosome (size),  the population
## size, the number of generations or iterations, the mutation rate, whether or not we
## want to use elitism in the model and we indicate the fitness function to be used.
GAmodel <- rbga.bin(size = 8, popSize = 200, iters = iter, mutationChance = 0.01,
elitism = T, evalFunc = evalFunc, verbose = TRUE)
cat(genalg:::summary.rbga(GAmodel))
solution = c(1, 0, 0, 0 ,0 , 0, 0, 1)
dataset[solution == 1, ]
rm(list=ls)
rm(list=ls())
library(genalg)
library(ggplot2)
dataset <- data.frame(item = c("pizza", "steak", "chips", "chicken",
"broccoli", "apples", "bread", "salmon"), nutrition = c(0, 15, 1, 20, 30,
17, 0, 50), calories = c(700, 450, 300, 200, 50, 75, 200, 200), cost = c(5, 8, 3, 4, 2, 3, 2, 10))
dataset.unscaled<- dataset
budget <- 20
sd.calories<- sd(dataset$calories)
mean.calories<- mean(dataset$calories)
sd.nutrition<- sd(dataset$nutrition)
mean.nutrition<- mean(dataset$nutrition)
dataset$calories<-(dataset$calories-mean.calories) / sd.calories
dataset$nutrition<- (dataset$nutrition-mean.nutrition)/sd.nutrition
chromosome = c(1, 0, 0, 1, 1, 0, 0, 1)
dataset[chromosome == 1, ]
cat(chromosome %*% dataset$cost)
evalFunc <- function(x) {
current_solution_cost <- x %*% dataset$cost
current_solution_nutrition <- x %*% dataset$nutrition
current_solution_calories<- x %*% dataset$calories
remaining_money<- budget - current_solution_cost
if (current_solution_cost > budget)
return(0) else return(-current_solution_calories-current_solution_nutrition+remaining_money)
}
iter = 100
GAmodel <- rbga.bin(size = 8, popSize = 200, iters = iter, mutationChance = 0.01,
elitism = T, evalFunc = evalFunc, verbose = TRUE)
cat(genalg:::summary.rbga(GAmodel))
solution = c(0, 1, 0, 0 ,1 , 0, 0, 1)
dataset[solution == 1, ]
dataset.unscaled[solution == 1,]
cat(paste(solution %*% dataset.unscaled$nutrition, "/", sum(dataset.unscaled$nutrition)))
cat(paste(solution %*% dataset.unscaled$calories, "/", sum(dataset.unscaled$calories)))
library(caret)
library(randomForest)
setwd('/Users/meganstiles/Desktop/github/DSI-Religion-2017/signalFiles/')
list.files()
signals<- read.csv('SingleDocSignals.csv')
signals<- signals[,-1]
signals$rank<- as.factor(signals$rank)
set.seed(21)
folds<-createFolds(signals$rank, k=10, list = TRUE, returnTrain = FALSE)
raw_accuracy<- vector()
difference<- vector()
i=0
j=0
for (i in 1:10) {
#Create testing indicies based on folds
test.indices<- folds[[i]]
#Create training and testing sets
train = signals[-test.indices,]
test = signals[test.indices,]
train$rank = factor(train$rank)
test$rank = factor(test$rank)
#train Model
model <- randomForest(rank ~. -groupId, data = train)
#Make predictions based on model for testing set
predictions<- predict(model, newdata = test)
#Calculate Accuracy
for (j in 1: length(test)) {
diff<- abs(as.numeric(test$rank[j]) - as.numeric(predictions[j]))
difference[j]<- diff
}
#Calculate Accuracy, we define accuracy as correctly predicting the class within 1
correct<-  sum(difference ==1 | difference ==0)
accuracy<-correct/length(test)
#Store accuracy for each run in vector
raw_accuracy[i]= accuracy
}
raw_accuracy
mean(raw_accuracy)
