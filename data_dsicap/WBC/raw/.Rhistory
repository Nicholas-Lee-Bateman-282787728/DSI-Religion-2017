text <- (convtext[!is.na(convtext)])
temp <- paste(text, collapse = " ")
if (length(temp) == 0){
dftemp$Text <- NA
} else {
dftemp$Text <- temp
}
dftemp$`File Name` <- filelist[i]
master_B <- rbind(dftemp,master_B)
}
View(master_B)
setwd("~/Documents/MSDS/DSI-Religion-2017/data_dsicap/DorothyDay/raw")
master_B["Score"] <- 6
master_B["Group"] <- "Bahai"
View(master_B)
# Read in DorothyDay files
setwd("~/Documents/MSDS/DSI-Religion-2017/data_dsicap/DorothyDay/raw")
# read in all files from file list
filelist <- list.files(pattern=".txt")
rawtext <- readLines(filelist[1], encoding = "utf-8")
convtext <- iconv(rawtext, to= "utf-8")
text <- (convtext[!is.na(convtext)])
master_DD <- as.data.frame(paste(text, collapse = " "))
names(master_DD)[1] <- "Text"
master_DD["File Name"] <- NA
master_DD$`File Name` <- filelist[1]
dftemp <- data.frame(matrix(ncol=1))
names(dftemp)[1] <- "Text"
dftemp["File Name"] <- NA
for (i in 2:(length(filelist))) {
rawtext <- readLines(filelist[i], encoding = "utf-8")
convtext <- iconv(rawtext, to= "utf-8")
text <- (convtext[!is.na(convtext)])
temp <- paste(text, collapse = " ")
if (length(temp) == 0){
dftemp$Text <- NA
} else {
dftemp$Text <- temp
}
dftemp$`File Name` <- filelist[i]
master_DD <- rbind(dftemp,master_DD)
}
master_NK["Score"] <- 4
master_NK["Group"] <- "DorothyDay"
master_DD["Score"] <- 4
master_DD["Group"] <- "DorothyDay"
setwd("~/Documents/MSDS/DSI-Religion-2017/data_dsicap/IntegralYoga/raw")
# Read in IntegralYoga files
setwd("~/Documents/MSDS/DSI-Religion-2017/data_dsicap/IntegralYoga/raw")
# read in all files from file list
filelist <- list.files(pattern=".txt")
rawtext <- readLines(filelist[1], encoding = "utf-8")
convtext <- iconv(rawtext, to= "utf-8")
text <- (convtext[!is.na(convtext)])
master_IY <- as.data.frame(paste(text, collapse = " "))
names(master_IY)[1] <- "Text"
master_IY["File Name"] <- NA
master_IY$`File Name` <- filelist[1]
dftemp <- data.frame(matrix(ncol=1))
names(dftemp)[1] <- "Text"
dftemp["File Name"] <- NA
for (i in 2:(length(filelist))) {
rawtext <- readLines(filelist[i], encoding = "utf-8")
convtext <- iconv(rawtext, to= "utf-8")
text <- (convtext[!is.na(convtext)])
temp <- paste(text, collapse = " ")
if (length(temp) == 0){
dftemp$Text <- NA
} else {
dftemp$Text <- temp
}
dftemp$`File Name` <- filelist[i]
master_IY <- rbind(dftemp,master_IY)
}
master_IY["Score"] <- 7
master_IY["Group"] <- "IntegralYoga"
setwd("~/Documents/MSDS/DSI-Religion-2017/data_dsicap/SeaShepherds/raw")
# Read in SeaShepherds files
setwd("~/Documents/MSDS/DSI-Religion-2017/data_dsicap/SeaShepherds/raw")
# read in all files from file list
filelist <- list.files(pattern=".txt")
rawtext <- readLines(filelist[1], encoding = "utf-8")
convtext <- iconv(rawtext, to= "utf-8")
text <- (convtext[!is.na(convtext)])
master_SS <- as.data.frame(paste(text, collapse = " "))
names(master_SS)[1] <- "Text"
master_SS["File Name"] <- NA
master_SS$`File Name` <- filelist[1]
dftemp <- data.frame(matrix(ncol=1))
names(dftemp)[1] <- "Text"
dftemp["File Name"] <- NA
for (i in 2:(length(filelist))) {
rawtext <- readLines(filelist[i], encoding = "utf-8")
convtext <- iconv(rawtext, to= "utf-8")
text <- (convtext[!is.na(convtext)])
temp <- paste(text, collapse = " ")
if (length(temp) == 0){
dftemp$Text <- NA
} else {
dftemp$Text <- temp
}
dftemp$`File Name` <- filelist[i]
master_SS <- rbind(dftemp,master_SS)
}
master_SS["Score"] <- 2
master_SS["Group"] <- "SeaShepherds"
setwd("~/Documents/MSDS/DSI-Religion-2017/data_dsicap/WBC/raw")
# Read in WBC files
setwd("~/Documents/MSDS/DSI-Religion-2017/data_dsicap/WBC/raw")
# read in all files from file list
filelist <- list.files(pattern=".txt")
rawtext <- readLines(filelist[1], encoding = "utf-8")
convtext <- iconv(rawtext, to= "utf-8")
text <- (convtext[!is.na(convtext)])
master_WBC <- as.data.frame(paste(text, collapse = " "))
names(master_WBC)[1] <- "Text"
master_WBC["File Name"] <- NA
master_WBC$`File Name` <- filelist[1]
dftemp <- data.frame(matrix(ncol=1))
names(dftemp)[1] <- "Text"
dftemp["File Name"] <- NA
for (i in 2:(length(filelist))) {
rawtext <- readLines(filelist[i], encoding = "utf-8")
convtext <- iconv(rawtext, to= "utf-8")
text <- (convtext[!is.na(convtext)])
temp <- paste(text, collapse = " ")
if (length(temp) == 0){
dftemp$Text <- NA
} else {
dftemp$Text <- temp
}
dftemp$`File Name` <- filelist[i]
master_WBC <- rbind(dftemp,master_WBC)
}
master_WBC["Score"] <- 1
master_WBC["Group"] <- "WBC"
master <- rbind(master_B, master_DD, master_IY, master_SS, master_WBC)
master["Bahai"] <- NA
master["DorothyDay"] <- NA
master["IntegralYoga"] <- NA
master["SeaShepherds"] <- NA
master["WBC"] <- NA
View(master)
master <- transform(master, Bahai = ifelse(Score == 6, 1, 0))
master <- transform(master, DorothyDay = ifelse(Score == 4, 1, 0))
master <- transform(master, IntegralYoga = ifelse(Score == 7, 1, 0))
master <- transform(master, SeaShepherds = ifelse(Score == 2, 1, 0))
master <- transform(master, WBC = ifelse(Score == 1, 1, 0))
View(master)
View(master_WBC)
View(dftemp)
# read in all files from file list
filelist <- list.files(pattern=".txt")
master_WBC <- as.data.frame(paste(readLines(filelist[1])))
names(master_WBC)[1] <- "Text"
master_WBC["File Name"] <- NA
master_WBC$`File Name` <- filelist[1]
dftemp <- data.frame(matrix(ncol=1))
names(dftemp)[1] <- "Text"
dftemp["File Name"] <- NA
View(dftemp)
View(master_WBC)
# Read in WBC files
setwd("~/Documents/MSDS/DSI-Religion-2017/data_dsicap/WBC/raw")
# read in all files from file list
filelist <- list.files(pattern=".txt")
master_WBC <- as.data.frame(paste(readLines(filelist[1])))
names(master_WBC)[1] <- "Text"
master_WBC["File Name"] <- NA
master_WBC$`File Name` <- filelist[1]
dftemp <- data.frame(matrix(ncol=1))
names(dftemp)[1] <- "Text"
dftemp["File Name"] <- NA
for (i in 2:(length(filelist))) {
temp <- paste(readLines(filelist[i]))
if (length(temp) == 0){
dftemp$Text <- NA
} else {
dftemp$Text <- temp
}
dftemp$`File Name` <- filelist[i]
master_WBC <- rbind(dftemp,master_WBC)
}
master_WBC["Score"] <- 1
master_WBC["Group"] <- "WBC"
View(master_WBC)
master <- rbind(master_B, master_DD, master_IY, master_SS, master_WBC)
master["Bahai"] <- NA
master["DorothyDay"] <- NA
master["IntegralYoga"] <- NA
master["SeaShepherds"] <- NA
master["WBC"] <- NA
master <- transform(master, Bahai = ifelse(Score == 6, 1, 0))
master <- transform(master, DorothyDay = ifelse(Score == 4, 1, 0))
master <- transform(master, IntegralYoga = ifelse(Score == 7, 1, 0))
master <- transform(master, SeaShepherds = ifelse(Score == 2, 1, 0))
master <- transform(master, WBC = ifelse(Score == 1, 1, 0))
View(master)
# 80% of the sample size
smp_size <- floor(0.80 * nrow(master))
# set the seed to make your partition reproductible
set.seed(123)
train_ind <- sample(seq_len(nrow(master)), size = smp_size)
train <- master[train_ind, ]
test <- master[-train_ind, ]
View(train)
# 80% of the sample size
smp_size <- floor(0.80 * nrow(master))
# set the seed to make your partition reproductible
set.seed(123)
train_ind <- sample(seq_len(nrow(master)), size = smp_size)
train <- master[train_ind, ]
test <- master[-train_ind, ]
trainX <- train[1]
trainY <-train[5:9]
testX <- test[1]
testY <-test[5:9]
View(testX)
# get text and transform it into a corpus for train and test
train = VCorpus(DataframeSource(trainX))
test = VCorpus(DataframeSource(testX))
# compute TF matrix
train.tf = DocumentTermMatrix(train)
test.tf = DocumentTermMatrix(test)
# clean up the corpus train
train.clean = tm_map(train, stripWhitespace)                          # remove extra whitespace
train.clean = tm_map(train.clean, removeNumbers)                      # remove numbers
train.clean = tm_map(train.clean, removePunctuation)                  # remove punctuation
train.clean = tm_map(train.clean, content_transformer(tolower))       # ignore case
# clean up the corpus test
test.clean = tm_map(test, stripWhitespace)                          # remove extra whitespace
test.clean = tm_map(test.clean, removeNumbers)                      # remove numbers
test.clean = tm_map(test.clean, removePunctuation)                  # remove punctuation
test.clean = tm_map(test.clean, content_transformer(tolower))       # ignore case
# recompute TF matrix train
train.clean.tf = DocumentTermMatrix(train.clean)
train.clean.tf <- as.data.frame(as.matrix(train.clean.tf))
# recompute TF matrix test
test.clean.tf = DocumentTermMatrix(test.clean)
test.clean.tf <- as.data.frame(as.matrix(test.clean.tf))
master <- rbind(master_B, master_DD, master_IY, master_SS)
master["Bahai"] <- NA
master["DorothyDay"] <- NA
master["IntegralYoga"] <- NA
master["SeaShepherds"] <- NA
master <- transform(master, Bahai = ifelse(Score == 6, 1, 0))
master <- transform(master, DorothyDay = ifelse(Score == 4, 1, 0))
master <- transform(master, IntegralYoga = ifelse(Score == 7, 1, 0))
master <- transform(master, SeaShepherds = ifelse(Score == 2, 1, 0))
# 80% of the sample size
smp_size <- floor(0.80 * nrow(master))
# set the seed to make your partition reproductible
set.seed(123)
train_ind <- sample(seq_len(nrow(master)), size = smp_size)
train <- master[train_ind, ]
test <- master[-train_ind, ]
trainX <- train[1]
trainY <-train[5:8]
testX <- test[1]
testY <-test[5:8]
# get text and transform it into a corpus for train and test
train = VCorpus(DataframeSource(trainX))
test = VCorpus(DataframeSource(testX))
# compute TF matrix
train.tf = DocumentTermMatrix(train)
test.tf = DocumentTermMatrix(test)
# clean up the corpus train
train.clean = tm_map(train, stripWhitespace)                          # remove extra whitespace
train.clean = tm_map(train.clean, removeNumbers)                      # remove numbers
train.clean = tm_map(train.clean, removePunctuation)                  # remove punctuation
train.clean = tm_map(train.clean, content_transformer(tolower))       # ignore case
# clean up the corpus test
test.clean = tm_map(test, stripWhitespace)                          # remove extra whitespace
test.clean = tm_map(test.clean, removeNumbers)                      # remove numbers
test.clean = tm_map(test.clean, removePunctuation)                  # remove punctuation
test.clean = tm_map(test.clean, content_transformer(tolower))       # ignore case
# recompute TF matrix train
train.clean.tf = DocumentTermMatrix(train.clean)
train.clean.tf <- as.data.frame(as.matrix(train.clean.tf))
# recompute TF matrix test
test.clean.tf = DocumentTermMatrix(test.clean)
test.clean.tf <- as.data.frame(as.matrix(test.clean.tf))
setwd("~/Documents/MSDS/DSI-Religion-2017/NeuralNet")
# write data to csvs
write.csv(train.clean.tf, file = "~/Documents/MSDS/DSI-Religion-2017/NeuralNet/trainX.csv")
write.csv(trainY, file = "~/Documents/MSDS/DSI-Religion-2017/NeuralNet/trainY.csv")
write.csv(test.clean.tf, file = "~/Documents/MSDS/DSI-Religion-2017/NeuralNet/testX.csv")
write.csv(testY, file = "~/Documents/MSDS/DSI-Religion-2017/NeuralNet/testY.csv")
View(trainX)
View(train.clean.tf)
# 50% of the sample size
smp_size <- floor(0.50 * nrow(master))
# set the seed to make your partition reproductible
set.seed(123)
train_ind <- sample(seq_len(nrow(master)), size = smp_size)
train <- master[train_ind, ]
test <- master[-train_ind, ]
trainX <- train[1]
trainY <-train[5:8]
testX <- test[1]
testY <-test[5:8]
# get text and transform it into a corpus for train and test
train = VCorpus(DataframeSource(trainX))
test = VCorpus(DataframeSource(testX))
# compute TF matrix
train.tf = DocumentTermMatrix(train)
test.tf = DocumentTermMatrix(test)
# clean up the corpus train
train.clean = tm_map(train, stripWhitespace)                          # remove extra whitespace
train.clean = tm_map(train.clean, removeNumbers)                      # remove numbers
train.clean = tm_map(train.clean, removePunctuation)                  # remove punctuation
train.clean = tm_map(train.clean, content_transformer(tolower))       # ignore case
# clean up the corpus test
test.clean = tm_map(test, stripWhitespace)                          # remove extra whitespace
test.clean = tm_map(test.clean, removeNumbers)                      # remove numbers
test.clean = tm_map(test.clean, removePunctuation)                  # remove punctuation
test.clean = tm_map(test.clean, content_transformer(tolower))       # ignore case
# recompute TF matrix train
train.clean.tf = DocumentTermMatrix(train.clean)
train.clean.tf <- as.data.frame(as.matrix(train.clean.tf))
# recompute TF matrix test
test.clean.tf = DocumentTermMatrix(test.clean)
test.clean.tf <- as.data.frame(as.matrix(test.clean.tf))
library(XML)
library(tm)
library(MASS)
library(SnowballC)
#######################
### Import the Data ###
#######################
# Read in Bahai files
setwd("~/Documents/MSDS/DSI-Religion-2017/data_dsicap/Bahai/raw")
# read in all files from file list
filelist <- list.files(pattern=".txt")
rawtext <- readLines(filelist[1], encoding = "utf-8")
convtext <- iconv(rawtext, to= "utf-8")
text <- (convtext[!is.na(convtext)])
master_B <- as.data.frame(paste(text, collapse = " "))
names(master_B)[1] <- "Text"
master_B["File Name"] <- NA
master_B$`File Name` <- filelist[1]
dftemp <- data.frame(matrix(ncol=1))
names(dftemp)[1] <- "Text"
dftemp["File Name"] <- NA
for (i in 2:(length(filelist))) {
rawtext <- readLines(filelist[i], encoding = "utf-8")
convtext <- iconv(rawtext, to= "utf-8")
text <- (convtext[!is.na(convtext)])
temp <- paste(text, collapse = " ")
if (length(temp) == 0){
dftemp$Text <- NA
} else {
dftemp$Text <- temp
}
dftemp$`File Name` <- filelist[i]
master_B <- rbind(dftemp,master_B)
}
master_B["Score"] <- 6
master_B["Group"] <- "Bahai"
# Read in DorothyDay files
setwd("~/Documents/MSDS/DSI-Religion-2017/data_dsicap/DorothyDay/raw")
# read in all files from file list
filelist <- list.files(pattern=".txt")
rawtext <- readLines(filelist[1], encoding = "utf-8")
convtext <- iconv(rawtext, to= "utf-8")
text <- (convtext[!is.na(convtext)])
master_DD <- as.data.frame(paste(text, collapse = " "))
names(master_DD)[1] <- "Text"
master_DD["File Name"] <- NA
master_DD$`File Name` <- filelist[1]
dftemp <- data.frame(matrix(ncol=1))
names(dftemp)[1] <- "Text"
dftemp["File Name"] <- NA
for (i in 2:(length(filelist))) {
rawtext <- readLines(filelist[i], encoding = "utf-8")
convtext <- iconv(rawtext, to= "utf-8")
text <- (convtext[!is.na(convtext)])
temp <- paste(text, collapse = " ")
if (length(temp) == 0){
dftemp$Text <- NA
} else {
dftemp$Text <- temp
}
dftemp$`File Name` <- filelist[i]
master_DD <- rbind(dftemp,master_DD)
}
master_DD["Score"] <- 4
master_DD["Group"] <- "DorothyDay"
# Read in IntegralYoga files
setwd("~/Documents/MSDS/DSI-Religion-2017/data_dsicap/IntegralYoga/raw")
# read in all files from file list
filelist <- list.files(pattern=".txt")
rawtext <- readLines(filelist[1], encoding = "utf-8")
convtext <- iconv(rawtext, to= "utf-8")
text <- (convtext[!is.na(convtext)])
master_IY <- as.data.frame(paste(text, collapse = " "))
names(master_IY)[1] <- "Text"
master_IY["File Name"] <- NA
master_IY$`File Name` <- filelist[1]
dftemp <- data.frame(matrix(ncol=1))
names(dftemp)[1] <- "Text"
dftemp["File Name"] <- NA
for (i in 2:(length(filelist))) {
rawtext <- readLines(filelist[i], encoding = "utf-8")
convtext <- iconv(rawtext, to= "utf-8")
text <- (convtext[!is.na(convtext)])
temp <- paste(text, collapse = " ")
if (length(temp) == 0){
dftemp$Text <- NA
} else {
dftemp$Text <- temp
}
dftemp$`File Name` <- filelist[i]
master_IY <- rbind(dftemp,master_IY)
}
master_IY["Score"] <- 7
master_IY["Group"] <- "IntegralYoga"
# Read in SeaShepherds files
setwd("~/Documents/MSDS/DSI-Religion-2017/data_dsicap/SeaShepherds/raw")
# read in all files from file list
filelist <- list.files(pattern=".txt")
rawtext <- readLines(filelist[1], encoding = "utf-8")
convtext <- iconv(rawtext, to= "utf-8")
text <- (convtext[!is.na(convtext)])
master_SS <- as.data.frame(paste(text, collapse = " "))
names(master_SS)[1] <- "Text"
master_SS["File Name"] <- NA
master_SS$`File Name` <- filelist[1]
dftemp <- data.frame(matrix(ncol=1))
names(dftemp)[1] <- "Text"
dftemp["File Name"] <- NA
for (i in 2:(length(filelist))) {
rawtext <- readLines(filelist[i], encoding = "utf-8")
convtext <- iconv(rawtext, to= "utf-8")
text <- (convtext[!is.na(convtext)])
temp <- paste(text, collapse = " ")
if (length(temp) == 0){
dftemp$Text <- NA
} else {
dftemp$Text <- temp
}
dftemp$`File Name` <- filelist[i]
master_SS <- rbind(dftemp,master_SS)
}
master_SS["Score"] <- 2
master_SS["Group"] <- "SeaShepherds"
# Read in WBC files
setwd("~/Documents/MSDS/DSI-Religion-2017/data_dsicap/WBC/raw")
# read in all files from file list
filelist <- list.files(pattern=".txt")
master_WBC <- as.data.frame(paste(readLines(filelist[1])))
names(master_WBC)[1] <- "Text"
master_WBC["File Name"] <- NA
master_WBC$`File Name` <- filelist[1]
dftemp <- data.frame(matrix(ncol=1))
names(dftemp)[1] <- "Text"
dftemp["File Name"] <- NA
for (i in 2:(length(filelist))) {
temp <- paste(readLines(filelist[i]))
if (length(temp) == 0){
dftemp$Text <- NA
} else {
dftemp$Text <- temp
}
dftemp$`File Name` <- filelist[i]
master_WBC <- rbind(dftemp,master_WBC)
}
master_WBC["Score"] <- 1
master_WBC["Group"] <- "WBC"
master <- rbind(master_B, master_DD, master_IY, master_SS)
master["Bahai"] <- NA
master["DorothyDay"] <- NA
master["IntegralYoga"] <- NA
master["SeaShepherds"] <- NA
master <- transform(master, Bahai = ifelse(Score == 6, 1, 0))
master <- transform(master, DorothyDay = ifelse(Score == 4, 1, 0))
master <- transform(master, IntegralYoga = ifelse(Score == 7, 1, 0))
master <- transform(master, SeaShepherds = ifelse(Score == 2, 1, 0))
View(master)
masterX <- master[1]
masterY <- master[5:8]
View(masterX)
View(masterY)
# get text and transform it into a corpus for train and test
masterX = VCorpus(DataframeSource(masterX))
# compute TF matrix
masterX.tf = DocumentTermMatrix(masterX)
# clean up the corpus masterX
masterX.clean = tm_map(masterX, stripWhitespace)                          # remove extra whitespace
masterX.clean = tm_map(masterX.clean, removeNumbers)                      # remove numbers
masterX.clean = tm_map(masterX.clean, removePunctuation)                  # remove punctuation
masterX.clean = tm_map(masterX.clean, content_transformer(tolower))       # ignore case
# recompute TF matrix masterX
masterX.clean.tf = DocumentTermMatrix(masterX.clean)
masterX.clean.tf <- as.data.frame(as.matrix(masterX.clean.tf))
View(masterX.clean.tf)
# 80% of the sample size
smp_size <- floor(0.80 * nrow(master))
# set the seed to make your partition reproductible
set.seed(123)
train_ind <- sample(seq_len(nrow(master)), size = smp_size)
trainX <- masterX.clean.tf[train_ind, ]
testX <- masterX.clean.tf[-train_ind, ]
View(trainX)
trainY <- masterY[train_ind, ]
testY <- masterY[-train_ind, ]
View(trainY)
# write data to csvs
write.csv(trainX, file = "~/Documents/MSDS/DSI-Religion-2017/NeuralNet/trainX.csv")
write.csv(trainY, file = "~/Documents/MSDS/DSI-Religion-2017/NeuralNet/trainY.csv")
write.csv(testX, file = "~/Documents/MSDS/DSI-Religion-2017/NeuralNet/testX.csv")
write.csv(testY, file = "~/Documents/MSDS/DSI-Religion-2017/NeuralNet/testY.csv")
