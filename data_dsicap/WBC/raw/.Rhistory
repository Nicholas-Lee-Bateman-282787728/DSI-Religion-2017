b5.1.lm <- lm(y~x6+x7, data=table.b5)
b5.1.lm.resid <- resid(b5.1.lm)
residuals(b5.1.lm)/(1-lm.influence(b5.1.lm)$hat)
# PRESS residuals
PRESS <- residuals(b5.1.lm)/(1-lm.influence(b5.1.lm)$hat)
PRESS^2
sum(PRESS^2)
# Run a summary
summary(b5.1.lm)
# import Table B.5
table.b5 <- read_csv('~/Documents/MSDS/STAT 6021/data-table-B5.csv')
# Run the regression
b5.1.lm <- lm(y~x6+x7, data=table.b5)
b5.1.lm.resid <- resid(b5.1.lm)
# Normal probabilty plot
qqnorm(resid(b5.1.lm))
qqline(resid(b5.1.lm))
dev.copy(pdf, "~/Documents/MSDS/STAT 6021/hw4_klh8mr/4.13_norm1.pdf")
dev.off()
# plot the residuals vs predicted resposne
plot(table.b5$y, b5.1.lm.resid, main = "Residuals Versus Predicted Response", xlab = "Response", ylab = "Residuals")
abline(0, 0)
dev.copy(pdf, "~/Documents/MSDS/STAT 6021/hw4_klh8mr/4.13_resid1.pdf")
dev.off()
# Run the regression for the second model
b5.2.lm <- lm(y~x6, data=table.b5)
b5.2.lm.resid <- resid(b5.2.lm)
# Normal probabilty plot
qqnorm(resid(b5.2.lm))
qqline(resid(b5.2.lm))
dev.copy(pdf, "~/Documents/MSDS/STAT 6021/hw4_klh8mr/4.13_norm2.pdf")
dev.off()
# plot the residuals vs predicted resposne
plot(table.b5$y, b5.2.lm.resid, main = "Residuals Versus Predicted Response", xlab = "Response", ylab = "Residuals")
abline(0, 0)
dev.copy(pdf, "~/Documents/MSDS/STAT 6021/hw4_klh8mr/4.13_resid2.pdf")
dev.off()
# PRESS residuals
PRESS <- residuals(b5.2.lm)/(1-lm.influence(b5.2.lm)$hat)
sum(PRESS^2)
# import Table B.20
table.b20 <- read_csv('~/Documents/MSDS/STAT 6021/data-table-B20.csv')
View(table.b20)
# import Table B.20
table.b20 <- read_csv('~/Documents/MSDS/STAT 6021/data-table-B20.csv')
# Run the regression
b20.lm <- lm(y ~ ., data=table.b20)
b20.lm.resid <- resid(b20.lm)
# Normal probabilty plot
qqnorm(resid(b20.lm))
qqline(resid(b20.lm))
dev.copy(pdf, "~/Documents/MSDS/STAT 6021/hw4_klh8mr/4.29_norm.pdf")
dev.off()
# plot the residuals vs predicted resposne
plot(table.b20$y, b20.lm.resid, main = "Residuals Versus Predicted Response", xlab = "Response", ylab = "Residuals")
abline(0, 0)
dev.copy(pdf, "~/Documents/MSDS/STAT 6021/hw4_klh8mr/4.29_resid.pdf")
dev.off()
# Run the regression
b5.5.lm <- lm(defects ~ weeks, data=table.5.5)
b5.5.lm.resid <- resid(b5.5.lm)
# Run a summary
summary(b5.5.lm)
# import Table 5.5
table.5.5 <- read_csv('~/Documents/MSDS/STAT 6021/data-prob-5-5.csv')
# a)
# Run the regression
b5.5.lm <- lm(defects ~ weeks, data=table.5.5)
b5.5.lm.resid <- resid(b5.5.lm)
# Run a summary
summary(b5.5.lm)
# plot the residuals vs predicted resposne LifeExp
plot(table.5.5$defects, b5.5.lm.resid, main = "Residuals Versus Predicted Response", xlab = "Response", ylab = "Residuals")
abline(0, 0)
# Run the regression - transformation
b5.5b.lm <- lm(log(defects) ~ weeks, data=table.5.5)
b5.5b.lm.resid <- resid(b5.5b.lm)
# Run a summary
summary(b5.5b.lm)
# plot the residuals vs predicted resposne LifeExp
plot(table.5.5$defects, b5.5b.lm.resid, main = "Residuals Versus Predicted Response", xlab = "Response", ylab = "Residuals")
abline(0, 0)
# import Table B.8
table.b8 <- read_csv('~/Documents/MSDS/STAT 6021/data-table-B8.csv')
View(table.b8)
# Run the regression
b8.lm <- lm(y ~ ., data=table.b8)
b8.lm.resid <- resid(b8.lm)
# Run the regression
b8.lm <- lm(y ~ ., data=table.b8)
b8.lm.resid <- resid(b8.lm)
# Normal probabilty plot
qqnorm(resid(b8.lm))
qqline(resid(b8.lm))
dev.copy(pdf, "~/Documents/MSDS/STAT 6021/hw4_klh8mr/5.9_norm.pdf")
dev.off()
# plot the residuals vs predicted resposne
plot(table.b8$y, b8.lm.resid, main = "Residuals Versus Predicted Response", xlab = "Response", ylab = "Residuals")
abline(0, 0)
dev.copy(pdf, "~/Documents/MSDS/STAT 6021/hw4_klh8mr/5.9_resid.pdf")
dev.off()
# plot residuals over time
plot(b8.lm.resid, main = "Residuals Versus Order", xlab = "Order", ylab = "Residuals")
abline(0, 0)
# plot the residuals vs x1, x2
plot(table.b8$x1, b8.lm.resid, main = "Residuals Versus x1", xlab = "x1", ylab = "Residuals")
abline(0, 0)
plot(table.b8$x2, b8.lm.resid, main = "Residuals Versus x2", xlab = "x2", ylab = "Residuals")
abline(0, 0)
plot(b8.lm)
# Run the regression - transformation
b8_T.lm <- lm(sqrt(y) ~ ., data=table.b8)
b8_T.lm.resid <- resid(b8_T.lm)
# Normal probabilty plot
qqnorm(resid(b8_T.lm))
qqline(resid(b8_T.lm))
dev.copy(pdf, "~/Documents/MSDS/STAT 6021/hw4_klh8mr/5.9_T_norm.pdf")
dev.off()
# plot the residuals vs predicted resposne
plot(table.b8$y, b8_T.lm.resid, main = "Residuals Versus Predicted Response", xlab = "Response", ylab = "Residuals")
abline(0, 0)
dev.copy(pdf, "~/Documents/MSDS/STAT 6021/hw4_klh8mr/5.9_T_resid.pdf")
dev.off()
# plot the residuals vs predicted resposne
plot(sqrt(table.b8$y), b8_T.lm.resid, main = "Residuals Versus Predicted Response", xlab = "Response", ylab = "Residuals")
abline(0, 0)
# plot the residuals vs predicted resposne
plot(sqrt(table.b8$y), b8_T.lm.resid, main = "Residuals Versus Predicted Response", xlab = "Response", ylab = "Residuals")
abline(0, 0)
dev.copy(pdf, "~/Documents/MSDS/STAT 6021/hw4_klh8mr/5.9_T_resid.pdf")
dev.off()
# plot the residuals vs predicted resposne LifeExp
plot(log(table.5.5$defects), b5.5b.lm.resid, main = "Residuals Versus Predicted Response", xlab = "Response", ylab = "Residuals")
abline(0, 0)
# import Table B.9
table.b9 <- read_csv('~/Documents/MSDS/STAT 6021/data-table-B9.csv')
# Run the regression
b9.lm <- lm(y ~ ., data=table.b9)
b9.lm.resid <- resid(b9.lm)
# Normal probabilty plot
qqnorm(resid(b9.lm))
qqline(resid(b9.lm))
dev.copy(pdf, "~/Documents/MSDS/STAT 6021/hw4_klh8mr/5.10_norm.pdf")
dev.off()
# plot the residuals vs predicted resposne
plot(table.b9$y, b9.lm.resid, main = "Residuals Versus Predicted Response", xlab = "Response", ylab = "Residuals")
abline(0, 0)
dev.copy(pdf, "~/Documents/MSDS/STAT 6021/hw4_klh8mr/5.10_resid.pdf")
dev.off()
# Run the regression - transformation
b9_T.lm <- lm(log(y) ~ ., data=table.b9)
b9_T.lm.resid <- resid(b9_T.lm)
# Normal probabilty plot
qqnorm(resid(b9_T.lm))
qqline(resid(b9_T.lm))
dev.copy(pdf, "~/Documents/MSDS/STAT 6021/hw4_klh8mr/5.10_T_norm.pdf")
dev.off()
# plot the residuals vs predicted resposne
plot(log(table.b8$y), b9_T.lm.resid, main = "Residuals Versus Predicted Response", xlab = "Response", ylab = "Residuals")
abline(0, 0)
dev.copy(pdf, "~/Documents/MSDS/STAT 6021/hw4_klh8mr/5.10_T_resid.pdf")
dev.off()
plot(log(table.b9$y), b9_T.lm.resid, main = "Residuals Versus Predicted Response", xlab = "Response", ylab = "Residuals")
abline(0, 0)
# plot the residuals vs predicted resposne
plot(log(table.b9$y), b9_T.lm.resid, main = "Residuals Versus Predicted Response", xlab = "Response", ylab = "Residuals")
abline(0, 0)
dev.copy(pdf, "~/Documents/MSDS/STAT 6021/hw4_klh8mr/5.10_T_resid.pdf")
dev.off()
View(table.b9)
# plot the residuals vs predicted resposne LifeExp
plot(table.5.5$defects, b5.5.lm.resid, main = "Residuals Versus Predicted Response", xlab = "Response", ylab = "Residuals")
abline(0, 0)
dev.copy(pdf, "~/Documents/MSDS/STAT 6021/hw4_klh8mr/5.5_resid.pdf")
dev.off()
# plot the residuals vs predicted resposne LifeExp
plot(log(table.5.5$defects), b5.5b.lm.resid, main = "Residuals Versus Predicted Response", xlab = "Response", ylab = "Residuals")
abline(0, 0)
dev.copy(pdf, "~/Documents/MSDS/STAT 6021/hw4_klh8mr/5.5_T_resid.pdf")
dev.off()
# Normal probabilty plot
qqnorm(resid(b5.2.lm))
qqline(resid(b5.2.lm))
dev.copy(pdf, "~/Documents/MSDS/STAT 6021/hw4_klh8mr/5.2b_norm.pdf")
dev.off()
# plot the residuals vs predicted resposne
plot(table.5.2$vapor, b5.2.lm.resid, main = "Residuals Versus Predicted Response", xlab = "Response", ylab = "Residuals")
abline(0, 0)
dev.copy(pdf, "~/Documents/MSDS/STAT 6021/hw4_klh8mr/5.2b_resid.pdf")
dev.off()
influence2 = read.table("~/Documents/MSDS/STAT 6021/influence2.txt", header = TRUE, fileEncoding = "UCS-2LE")
influence3 = read.table("~/Documents/MSDS/STAT 6021/influence3.txt", header = TRUE, fileEncoding = "UCS-2LE")
influence4 = read.table("~/Documents/MSDS/STAT 6021/influence4.txt", header = TRUE, fileEncoding = "UCS-2LE")
View(influence2)
influence2 = influe[2:3]
influence2 = influence2[2:3]
View(influence2)
influence2 = read.table("~/Documents/MSDS/STAT 6021/influence2.txt", header = TRUE, fileEncoding = "UCS-2LE")
influence2 = influence2[2:3]
influence3 = read.table("~/Documents/MSDS/STAT 6021/influence3.txt", header = TRUE, fileEncoding = "UCS-2LE")
influence3 = influence3[2:3]
influence4 = read.table("~/Documents/MSDS/STAT 6021/influence4.txt", header = TRUE, fileEncoding = "UCS-2LE")
influence4 = influence4[2:3]
View(influence3)
View(influence4)
# Run the regression
lm2 <- lm(y~x, data = influence2)
influence2 = read.table("~/Documents/MSDS/STAT 6021/influence2.txt", header = TRUE, fileEncoding = "UCS-2LE")
influence2 = influence2[2:3]
# Run the regression
lm2 <- lm(y~x, data = influence2)
resid2 <- lm2$residuals
#standard.resid2 <- resid2/sqrt(sum(resid2^2)/lm.fit.q2$df.residual) ## CHECK
student.resid2 <- rstandard(lm2)
#PRESS.resid2 #<- ## CHECK
rstudent.resid2 <- rstudent(lm2)
student.resid2
rstudent.resid2
library(readr) # Install library "readr"
########
# 6.12 #
########
# import Table B.11
table.b11 <- read_csv('~/Documents/MSDS/STAT 6021/data-table-B11.csv')
########
# 6.13 #
########
# import Table B.12
table.b12 <- read_csv('~/Documents/MSDS/STAT 6021/data-table-B12.csv')
########
# 6.14 #
########
# import Table B.13
table.b13 <- read_csv('~/Documents/MSDS/STAT 6021/data-table-B13.csv')
########
# 6.15 #
########
# import Table B.14
table.b14 <- read_csv('~/Documents/MSDS/STAT 6021/data-table-B14.csv')
View(table.b11)
# Run the regression
b11.lm <- lm(Quality ~ Clarity + Aroma + Body + Flavor + Oakiness, data = table.b11)
View(table.b12)
# Run the regression
b12.lm <- lm(pitch ~ . , data = table.b12)
View(table.b13)
# Run the regression
b13.lm <- lm(y ~ . , data = table.b13)
View(table.b14)
# import Table B.14
table.b14 <- read_csv('~/Documents/MSDS/STAT 6021/data-table-B14.csv')
# Run the regression
b14.lm <- lm(y ~ x1 + x2 + x3 + x4 , data = table.b14)
# Simple demonstration of AIC-based stepwise model selection.
library(car)
data(Prestige)
# Fit linear model.
lm.fit = lm(prestige ~ ., data = Prestige)
# Run stepwise model selection using AIC.
step(lm.fit)
Prestige = Prestige[!is.na(Prestige$type),]
lm.fit = lm(prestige ~ education, data = Prestige)
lm.fit = lm(prestige ~ education, data = Prestige)
sum(lm.fit$residuals^2)
add1(lm.fit, ~ education + income + women + type)
lm.fit = lm(prestige ~ education + income + women + type, data = Prestige)
sum(lm.fit$residuals^2)
drop1(lm.fit)
# Run stepwise model selection using AIC.
step(lm.fit)
# Create randomized training/testing sets.
set.seed(1230984)
random.indices = sample(1:nrow(Prestige))
num.training.observations = as.integer(0.75 * length(random.indices))
training.indices = random.indices[1:num.training.observations]
training.set = Prestige[training.indices,]
testing.indices = random.indices[(num.training.observations + 1):length(random.indices)]
testing.set = Prestige[testing.indices,]
# Round 1:  Find single-best predictor.
column.name.is.prestige = names(Prestige) == "prestige"
predictor.columns = names(Prestige)[!column.name.is.prestige]
predictor.mse = c()
for(predictor in predictor.columns)
{
data.columns = c("prestige",predictor)
lm.fit = lm(prestige ~ ., data = training.set[,data.columns])
predictions = predict(lm.fit, newdata = testing.set[,data.columns], type="response")
mse = mean((predictions - testing.set$prestige)^2)
predictor.mse = c(predictor.mse, mse)
print(paste("MSE for ", predictor, ":  ", mse, sep=""))
}
predictor.1 = predictor.columns[order(predictor.mse)][1]
# Round 2:  Single-best (education) combined with each of the remaining predictors.
predictor.columns = predictor.columns[predictor.columns != predictor.1]
predictor.mse = c()
for(predictor in predictor.columns)
{
data.columns = c("prestige",predictor.1,predictor)
lm.fit = lm(prestige ~ ., data = training.set[,data.columns])
predictions = predict(lm.fit, newdata = testing.set[,data.columns], type="response")
mse = mean((predictions - testing.set$prestige)^2)
predictor.mse = c(predictor.mse, mse)
print(paste("MSE for ", predictor, ":  ", mse, sep=""))
}
predictor.2 = predictor.columns[order(predictor.mse)][1]
library(XML)
library(tm)
install.packages("XML")
install.packages("tm")
install.packages("tm")
library(XML)
library(tm)
library(XML)
library(tm)
library(MASS)
library(SnowballC)
#######################
### Import the Data ###
#######################
# Read in Bahai files
setwd("~/Documents/MSDS/DSI-Religion-2017/data_dsicap/Bahai/raw")
# read in all files from file list
filelist <- list.files(pattern=".txt")
rawtext <- readLines(filelist[1], encoding = "utf-8")
convtext <- iconv(rawtext, to= "utf-8")
text <- (convtext[!is.na(convtext)])
master_B <- as.data.frame(paste(text, collapse = " "))
names(master_B)[1] <- "Text"
master_B["File Name"] <- NA
master_B$`File Name` <- filelist[1]
dftemp <- data.frame(matrix(ncol=1))
names(dftemp)[1] <- "Text"
dftemp["File Name"] <- NA
for (i in 2:(length(filelist))) {
rawtext <- readLines(filelist[i], encoding = "utf-8")
convtext <- iconv(rawtext, to= "utf-8")
text <- (convtext[!is.na(convtext)])
temp <- paste(text, collapse = " ")
if (length(temp) == 0){
dftemp$Text <- NA
} else {
dftemp$Text <- temp
}
dftemp$`File Name` <- filelist[i]
master_B <- rbind(dftemp,master_B)
}
master_B["Score"] <- 6
master_B["Group"] <- "Bahai"
# Read in DorothyDay files
setwd("~/Documents/MSDS/DSI-Religion-2017/data_dsicap/DorothyDay/raw")
# read in all files from file list
filelist <- list.files(pattern=".txt")
rawtext <- readLines(filelist[1], encoding = "utf-8")
convtext <- iconv(rawtext, to= "utf-8")
text <- (convtext[!is.na(convtext)])
master_DD <- as.data.frame(paste(text, collapse = " "))
names(master_DD)[1] <- "Text"
master_DD["File Name"] <- NA
master_DD$`File Name` <- filelist[1]
dftemp <- data.frame(matrix(ncol=1))
names(dftemp)[1] <- "Text"
dftemp["File Name"] <- NA
for (i in 2:(length(filelist))) {
rawtext <- readLines(filelist[i], encoding = "utf-8")
convtext <- iconv(rawtext, to= "utf-8")
text <- (convtext[!is.na(convtext)])
temp <- paste(text, collapse = " ")
if (length(temp) == 0){
dftemp$Text <- NA
} else {
dftemp$Text <- temp
}
dftemp$`File Name` <- filelist[i]
master_DD <- rbind(dftemp,master_DD)
}
master_DD["Score"] <- 4
master_DD["Group"] <- "DorothyDay"
# Read in IntegralYoga files
setwd("~/Documents/MSDS/DSI-Religion-2017/data_dsicap/IntegralYoga/raw")
# read in all files from file list
filelist <- list.files(pattern=".txt")
rawtext <- readLines(filelist[1], encoding = "utf-8")
convtext <- iconv(rawtext, to= "utf-8")
text <- (convtext[!is.na(convtext)])
master_IY <- as.data.frame(paste(text, collapse = " "))
names(master_IY)[1] <- "Text"
master_IY["File Name"] <- NA
master_IY$`File Name` <- filelist[1]
dftemp <- data.frame(matrix(ncol=1))
names(dftemp)[1] <- "Text"
dftemp["File Name"] <- NA
for (i in 2:(length(filelist))) {
rawtext <- readLines(filelist[i], encoding = "utf-8")
convtext <- iconv(rawtext, to= "utf-8")
text <- (convtext[!is.na(convtext)])
temp <- paste(text, collapse = " ")
if (length(temp) == 0){
dftemp$Text <- NA
} else {
dftemp$Text <- temp
}
dftemp$`File Name` <- filelist[i]
master_IY <- rbind(dftemp,master_IY)
}
master_IY["Score"] <- 7
master_IY["Group"] <- "IntegralYoga"
# Read in SeaShepherds files
setwd("~/Documents/MSDS/DSI-Religion-2017/data_dsicap/SeaShepherds/raw")
# read in all files from file list
filelist <- list.files(pattern=".txt")
rawtext <- readLines(filelist[1], encoding = "utf-8")
convtext <- iconv(rawtext, to= "utf-8")
text <- (convtext[!is.na(convtext)])
master_SS <- as.data.frame(paste(text, collapse = " "))
names(master_SS)[1] <- "Text"
master_SS["File Name"] <- NA
master_SS$`File Name` <- filelist[1]
dftemp <- data.frame(matrix(ncol=1))
names(dftemp)[1] <- "Text"
dftemp["File Name"] <- NA
for (i in 2:(length(filelist))) {
rawtext <- readLines(filelist[i], encoding = "utf-8")
convtext <- iconv(rawtext, to= "utf-8")
text <- (convtext[!is.na(convtext)])
temp <- paste(text, collapse = " ")
if (length(temp) == 0){
dftemp$Text <- NA
} else {
dftemp$Text <- temp
}
dftemp$`File Name` <- filelist[i]
master_SS <- rbind(dftemp,master_SS)
}
master_SS["Score"] <- 2
master_SS["Group"] <- "SeaShepherds"
# Read in WBC files
setwd("~/Documents/MSDS/DSI-Religion-2017/data_dsicap/WBC/raw")
# read in all files from file list
filelist <- list.files(pattern=".txt")
master_WBC <- as.data.frame(paste(readLines(filelist[1])))
names(master_WBC)[1] <- "Text"
master_WBC["File Name"] <- NA
master_WBC$`File Name` <- filelist[1]
dftemp <- data.frame(matrix(ncol=1))
names(dftemp)[1] <- "Text"
dftemp["File Name"] <- NA
for (i in 2:(length(filelist))) {
temp <- paste(readLines(filelist[i]))
if (length(temp) == 0){
dftemp$Text <- NA
} else {
dftemp$Text <- temp
}
dftemp$`File Name` <- filelist[i]
master_WBC <- rbind(dftemp,master_WBC)
}
master_WBC["Score"] <- 1
master_WBC["Group"] <- "WBC"
master <- rbind(master_B, master_DD, master_IY, master_SS)
master["Bahai"] <- NA
master["DorothyDay"] <- NA
master["IntegralYoga"] <- NA
master["SeaShepherds"] <- NA
master <- transform(master, Bahai = ifelse(Score == 6, 1, 0))
master <- transform(master, DorothyDay = ifelse(Score == 4, 1, 0))
master <- transform(master, IntegralYoga = ifelse(Score == 7, 1, 0))
master <- transform(master, SeaShepherds = ifelse(Score == 2, 1, 0))
View(master)
masterX <- master[1]
masterY <- master[5:8]
# get text and transform it into a corpus for train and test
masterX = VCorpus(DataframeSource(masterX))
# compute TF matrix
masterX.tf = DocumentTermMatrix(masterX)
# clean up the corpus masterX
masterX.clean = tm_map(masterX, stripWhitespace)                          # remove extra whitespace
masterX.clean = tm_map(masterX.clean, removeNumbers)                      # remove numbers
masterX.clean = tm_map(masterX.clean, removePunctuation)                  # remove punctuation
masterX.clean = tm_map(masterX.clean, content_transformer(tolower))       # ignore case
# recompute TF matrix masterX
masterX.clean.tf = DocumentTermMatrix(masterX.clean)
masterX.clean.tf <- as.data.frame(as.matrix(masterX.clean.tf))
# 80% of the sample size
smp_size <- floor(0.80 * nrow(master))
# set the seed to make your partition reproductible
set.seed(123)
train_ind <- sample(seq_len(nrow(master)), size = smp_size)
trainX <- masterX.clean.tf[train_ind, ]
testX <- masterX.clean.tf[-train_ind, ]
trainY <- masterY[train_ind, ]
testY <- masterY[-train_ind, ]
View(master)
View(masterX.clean.tf)
View(masterY)
# compute TF-IDF matrix
masterX.clean.tfidf = DocumentTermMatrix(masterX.clean, control = list(weighting = weightTfIdf))
masterX.clean.tfidf <- as.data.frame(as.matrix(masterX.clean.tfidf))
View(masterX.clean.tfidf)
# 80% of the sample size
smp_size <- floor(0.80 * nrow(master))
# set the seed to make your partition reproductible
set.seed(123)
train_ind <- sample(seq_len(nrow(master)), size = smp_size)
trainX <- masterX.clean.tfidf[train_ind, ]
testX <- masterX.clean.tfidf[-train_ind, ]
trainY <- masterY[train_ind, ]
testY <- masterY[-train_ind, ]
# write data to csvs
write.csv(trainX, file = "~/Documents/MSDS/DSI-Religion-2017/NeuralNet/trainX.csv")
write.csv(trainY, file = "~/Documents/MSDS/DSI-Religion-2017/NeuralNet/trainY.csv")
write.csv(testX, file = "~/Documents/MSDS/DSI-Religion-2017/NeuralNet/testX.csv")
write.csv(testY, file = "~/Documents/MSDS/DSI-Religion-2017/NeuralNet/testY.csv")
